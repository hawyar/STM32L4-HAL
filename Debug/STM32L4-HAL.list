
STM32L4-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08009948  08009948  00019948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d24  08009d24  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d2c  08009d2c  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08009d34  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  20000268  08009f9c  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  08009f9c  00020c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a09a  00000000  00000000  000202db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ac  00000000  00000000  0003a375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  0003da28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127b  00000000  00000000  0003f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c96  00000000  00000000  0004049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b306  00000000  00000000  0006a131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8d44  00000000  00000000  00085437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077c0  00000000  00000000  0017e17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018593c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800992c 	.word	0x0800992c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	0800992c 	.word	0x0800992c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af04      	add	r7, sp, #16
  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000f4a:	f001 fb29 	bl	80025a0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f8c1 	bl	80010d4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 fa89 	bl	8001468 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f56:	f000 f91f 	bl	8001198 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f5a:	f000 f955 	bl	8001208 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f5e:	f000 f991 	bl	8001284 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f62:	f000 f9b5 	bl	80012d0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f66:	f000 f9f1 	bl	800134c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f6a:	f000 fa1f 	bl	80013ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f6e:	f000 fa4d 	bl	800140c <MX_USB_OTG_FS_PCD_Init>
  //   Error_Handler();
  // }

  // HAL_UART_Transmit(&huart1, tmp_success_msg, sizeof(tmp_success_msg), 1000);

  HAL_UART_Transmit(&huart1, acc_start_msg, sizeof(acc_start_msg), 1000);
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	2226      	movs	r2, #38	; 0x26
 8000f78:	4946      	ldr	r1, [pc, #280]	; (8001094 <main+0x150>)
 8000f7a:	4847      	ldr	r0, [pc, #284]	; (8001098 <main+0x154>)
 8000f7c:	f004 fd47 	bl	8005a0e <HAL_UART_Transmit>

  if (BSP_ACCELERO_Init() != ACCELERO_OK) {
 8000f80:	f001 f9a0 	bl	80022c4 <BSP_ACCELERO_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <main+0x4a>
    Error_Handler();
 8000f8a:	f000 fc1f 	bl	80017cc <Error_Handler>
  }

  HAL_UART_Transmit(&huart1, acc_success_msg, sizeof(acc_success_msg), 1000);
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	2223      	movs	r2, #35	; 0x23
 8000f94:	4941      	ldr	r1, [pc, #260]	; (800109c <main+0x158>)
 8000f96:	4840      	ldr	r0, [pc, #256]	; (8001098 <main+0x154>)
 8000f98:	f004 fd39 	bl	8005a0e <HAL_UART_Transmit>

  // if (BSP_HSENSOR_Init() != HSENSOR_OK) {
  //   Error_Handler();
  // }

  HAL_UART_Transmit(&huart1, acc_success_msg, sizeof(acc_success_msg), 1000);
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	2223      	movs	r2, #35	; 0x23
 8000fa2:	493e      	ldr	r1, [pc, #248]	; (800109c <main+0x158>)
 8000fa4:	483c      	ldr	r0, [pc, #240]	; (8001098 <main+0x154>)
 8000fa6:	f004 fd32 	bl	8005a0e <HAL_UART_Transmit>

  pDataXYZ = (int16_t *)malloc(3 * sizeof(int16_t));
 8000faa:	2006      	movs	r0, #6
 8000fac:	f006 f808 	bl	8006fc0 <malloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b3a      	ldr	r3, [pc, #232]	; (80010a0 <main+0x15c>)
 8000fb6:	601a      	str	r2, [r3, #0]
    // snprintf(str_tmp, 100, "TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
    // HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp), 1000);
    // HAL_Delay(1000);

    // read accelerometer
    BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <main+0x15c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 f9bf 	bl	8002340 <BSP_ACCELERO_AccGetXYZ>

    int16_t x = pDataXYZ[0];
 8000fc2:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <main+0x15c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	827b      	strh	r3, [r7, #18]
    int16_t y = pDataXYZ[1];
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <main+0x15c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	885b      	ldrh	r3, [r3, #2]
 8000fd0:	823b      	strh	r3, [r7, #16]
    int16_t z = pDataXYZ[2];
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <main+0x15c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	889b      	ldrh	r3, [r3, #4]
 8000fd8:	81fb      	strh	r3, [r7, #14]

    // calculate the acceleration magnitude vector
    float accelerationMagnitude = sqrt(x * x + y * y + z * z);
 8000fda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fde:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fe2:	fb03 f202 	mul.w	r2, r3, r2
 8000fe6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fea:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8000fee:	fb01 f303 	mul.w	r3, r1, r3
 8000ff2:	441a      	add	r2, r3
 8000ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000ffc:	fb01 f303 	mul.w	r3, r1, r3
 8001000:	4413      	add	r3, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa8e 	bl	8000524 <__aeabi_i2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	ec43 2b10 	vmov	d0, r2, r3
 8001010:	f008 fb86 	bl	8009720 <sqrt>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fdc4 	bl	8000ba8 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	60bb      	str	r3, [r7, #8]

    float threshold = 1020;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <main+0x160>)
 8001026:	607b      	str	r3, [r7, #4]

    // ALSO PRINT THE ACCELERATION MAGNITUDE
    snprintf(str_tmp, 100, "X = %d, Y = %d, Z = %d acc=%f\n\r", x, y, z,
 8001028:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 800102c:	f9b7 4010 	ldrsh.w	r4, [r7, #16]
 8001030:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 8001034:	68b8      	ldr	r0, [r7, #8]
 8001036:	f7ff fa87 	bl	8000548 <__aeabi_f2d>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001042:	9501      	str	r5, [sp, #4]
 8001044:	9400      	str	r4, [sp, #0]
 8001046:	4633      	mov	r3, r6
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <main+0x164>)
 800104a:	2164      	movs	r1, #100	; 0x64
 800104c:	4817      	ldr	r0, [pc, #92]	; (80010ac <main+0x168>)
 800104e:	f006 f9ef 	bl	8007430 <sniprintf>
             accelerationMagnitude);

    HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp), 1000);
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	2264      	movs	r2, #100	; 0x64
 8001058:	4914      	ldr	r1, [pc, #80]	; (80010ac <main+0x168>)
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <main+0x154>)
 800105c:	f004 fcd7 	bl	8005a0e <HAL_UART_Transmit>

    if (accelerationMagnitude > threshold) {
 8001060:	ed97 7a02 	vldr	s14, [r7, #8]
 8001064:	edd7 7a01 	vldr	s15, [r7, #4]
 8001068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd0b      	ble.n	800108a <main+0x146>
      // Blink the LED very fast
      for (int i = 0; i < 10; i++) {
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e005      	b.n	8001084 <main+0x140>
        Blink(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f000 f819 	bl	80010b0 <Blink>
      for (int i = 0; i < 10; i++) {
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b09      	cmp	r3, #9
 8001088:	ddf6      	ble.n	8001078 <main+0x134>
      }
    }

     HAL_Delay(200);
 800108a:	20c8      	movs	r0, #200	; 0xc8
 800108c:	f001 fafc 	bl	8002688 <HAL_Delay>
  while (1) {
 8001090:	e792      	b.n	8000fb8 <main+0x74>
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	200003b8 	.word	0x200003b8
 800109c:	20000028 	.word	0x20000028
 80010a0:	20000a38 	.word	0x20000a38
 80010a4:	447f0000 	.word	0x447f0000
 80010a8:	08009948 	.word	0x08009948
 80010ac:	200009d4 	.word	0x200009d4

080010b0 <Blink>:
  // BSP_ACCELERO_DeInit();

  return 0;
}

void Blink(uint32_t delay) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80010b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <Blink+0x20>)
 80010be:	f001 ffdb 	bl	8003078 <HAL_GPIO_TogglePin>
  HAL_Delay(delay);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fae0 	bl	8002688 <HAL_Delay>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	48000400 	.word	0x48000400

080010d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	; 0x58
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2244      	movs	r2, #68	; 0x44
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f006 fa94 	bl	8007610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80010f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010fa:	f002 ffa9 	bl	8004050 <HAL_PWREx_ControlVoltageScaling>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x34>
    Error_Handler();
 8001104:	f000 fb62 	bl	80017cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001108:	f002 ff84 	bl	8004014 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <SystemClock_Config+0xc0>)
 800110e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001112:	4a20      	ldr	r2, [pc, #128]	; (8001194 <SystemClock_Config+0xc0>)
 8001114:	f023 0318 	bic.w	r3, r3, #24
 8001118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType =
 800111c:	2314      	movs	r3, #20
 800111e:	617b      	str	r3, [r7, #20]
      RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001134:	2301      	movs	r3, #1
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800113c:	2328      	movs	r3, #40	; 0x28
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001140:	2307      	movs	r3, #7
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f003 f89f 	bl	8004294 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x8c>
    Error_Handler();
 800115c:	f000 fb36 	bl	80017cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001160:	230f      	movs	r3, #15
 8001162:	603b      	str	r3, [r7, #0]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001174:	463b      	mov	r3, r7
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fc67 	bl	8004a4c <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xb4>
    Error_Handler();
 8001184:	f000 fb22 	bl	80017cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8001188:	f004 f96e 	bl	8005468 <HAL_RCCEx_EnableMSIPLLMode>
}
 800118c:	bf00      	nop
 800118e:	3758      	adds	r7, #88	; 0x58
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000

08001198 <MX_DFSDM1_Init>:
/**
 * @brief DFSDM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DFSDM1_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_DFSDM1_Init+0x68>)
 800119e:	4a19      	ldr	r2, [pc, #100]	; (8001204 <MX_DFSDM1_Init+0x6c>)
 80011a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection =
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
      DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	621a      	str	r2, [r3, #32]
      DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011dc:	2201      	movs	r2, #1
 80011de:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_DFSDM1_Init+0x68>)
 80011ee:	f001 fb81 	bl	80028f4 <HAL_DFSDM_ChannelInit>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_DFSDM1_Init+0x64>
    Error_Handler();
 80011f8:	f000 fae8 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000284 	.word	0x20000284
 8001204:	40016020 	.word	0x40016020

08001208 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_I2C2_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_I2C2_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_I2C2_Init+0x74>)
 8001214:	f640 6214 	movw	r2, #3604	; 0xe14
 8001218:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_I2C2_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_I2C2_Init+0x74>)
 8001222:	2201      	movs	r2, #1
 8001224:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_I2C2_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_I2C2_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_I2C2_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_I2C2_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_I2C2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_I2C2_Init+0x74>)
 8001246:	f001 ff54 	bl	80030f2 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C2_Init+0x4c>
    Error_Handler();
 8001250:	f000 fabc 	bl	80017cc <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001254:	2100      	movs	r1, #0
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <MX_I2C2_Init+0x74>)
 8001258:	f002 fcfc 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C2_Init+0x5e>
    Error_Handler();
 8001262:	f000 fab3 	bl	80017cc <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8001266:	2100      	movs	r1, #0
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_I2C2_Init+0x74>)
 800126a:	f002 fd3e 	bl	8003cea <HAL_I2CEx_ConfigDigitalFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C2_Init+0x70>
    Error_Handler();
 8001274:	f000 faaa 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002bc 	.word	0x200002bc
 8001280:	40005800 	.word	0x40005800

08001284 <MX_QUADSPI_Init>:
/**
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <MX_QUADSPI_Init+0x48>)
 800128c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 8001290:	2202      	movs	r2, #2
 8001292:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 8001296:	2204      	movs	r2, #4
 8001298:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 800129c:	2210      	movs	r2, #16
 800129e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 80012a2:	2217      	movs	r2, #23
 80012a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_QUADSPI_Init+0x44>)
 80012b4:	f002 ff32 	bl	800411c <HAL_QSPI_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_QUADSPI_Init+0x3e>
    Error_Handler();
 80012be:	f000 fa85 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000310 	.word	0x20000310
 80012cc:	a0001000 	.word	0xa0001000

080012d0 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_SPI3_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_SPI3_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_SPI3_Init+0x74>)
 80012dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_SPI3_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SPI3_Init+0x74>)
 80012ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_SPI3_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <MX_SPI3_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_SPI3_Init+0x74>)
 80012fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001302:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_SPI3_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_SPI3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_SPI3_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_SPI3_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SPI3_Init+0x74>)
 800131e:	2207      	movs	r2, #7
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_SPI3_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SPI3_Init+0x74>)
 800132a:	2208      	movs	r2, #8
 800132c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_SPI3_Init+0x74>)
 8001330:	f004 fa7c 	bl	800582c <HAL_SPI_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_SPI3_Init+0x6e>
    Error_Handler();
 800133a:	f000 fa47 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000354 	.word	0x20000354
 8001348:	40003c00 	.word	0x40003c00

0800134c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <MX_USART1_UART_Init+0x5c>)
 8001354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART1_UART_Init+0x58>)
 8001390:	f004 faef 	bl	8005972 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART1_UART_Init+0x52>
    Error_Handler();
 800139a:	f000 fa17 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200003b8 	.word	0x200003b8
 80013a8:	40013800 	.word	0x40013800

080013ac <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <MX_USART3_UART_Init+0x5c>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART3_UART_Init+0x58>)
 80013f0:	f004 fabf 	bl	8005972 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x52>
    Error_Handler();
 80013fa:	f000 f9e7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000440 	.word	0x20000440
 8001408:	40004800 	.word	0x40004800

0800140c <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001412:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001416:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2206      	movs	r2, #6
 800141c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	2202      	movs	r2, #2
 8001422:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2202      	movs	r2, #2
 8001428:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	f002 fc97 	bl	8003d82 <HAL_PCD_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 800145a:	f000 f9b7 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200004c8 	.word	0x200004c8

08001468 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b08a      	sub	sp, #40	; 0x28
 800146c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147e:	4bbd      	ldr	r3, [pc, #756]	; (8001774 <MX_GPIO_Init+0x30c>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4abc      	ldr	r2, [pc, #752]	; (8001774 <MX_GPIO_Init+0x30c>)
 8001484:	f043 0310 	orr.w	r3, r3, #16
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4bba      	ldr	r3, [pc, #744]	; (8001774 <MX_GPIO_Init+0x30c>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4bb7      	ldr	r3, [pc, #732]	; (8001774 <MX_GPIO_Init+0x30c>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4ab6      	ldr	r2, [pc, #728]	; (8001774 <MX_GPIO_Init+0x30c>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4bb4      	ldr	r3, [pc, #720]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4bb1      	ldr	r3, [pc, #708]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	4ab0      	ldr	r2, [pc, #704]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ba:	4bae      	ldr	r3, [pc, #696]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4bab      	ldr	r3, [pc, #684]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4aaa      	ldr	r2, [pc, #680]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4ba8      	ldr	r3, [pc, #672]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014de:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4aa4      	ldr	r2, [pc, #656]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4ba2      	ldr	r3, [pc, #648]	; (8001774 <MX_GPIO_Init+0x30c>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80014fc:	489e      	ldr	r0, [pc, #632]	; (8001778 <MX_GPIO_Init+0x310>)
 80014fe:	f001 fda3 	bl	8003048 <HAL_GPIO_WritePin>
      GPIOE, M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin,
      GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 8001502:	2200      	movs	r2, #0
 8001504:	f248 1104 	movw	r1, #33028	; 0x8104
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f001 fd9c 	bl	8003048 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,
 8001510:	2200      	movs	r2, #0
 8001512:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001516:	4899      	ldr	r0, [pc, #612]	; (800177c <MX_GPIO_Init+0x314>)
 8001518:	f001 fd96 	bl	8003048 <HAL_GPIO_WritePin>
                    ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin |
                        LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin,
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(
 800151c:	2200      	movs	r2, #0
 800151e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001522:	4897      	ldr	r0, [pc, #604]	; (8001780 <MX_GPIO_Init+0x318>)
 8001524:	f001 fd90 	bl	8003048 <HAL_GPIO_WritePin>
      GPIOD, USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin,
      GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin,
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152e:	4894      	ldr	r0, [pc, #592]	; (8001780 <MX_GPIO_Init+0x318>)
 8001530:	f001 fd8a 	bl	8003048 <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7110 	mov.w	r1, #576	; 0x240
 800153a:	4892      	ldr	r0, [pc, #584]	; (8001784 <MX_GPIO_Init+0x31c>)
 800153c:	f001 fd84 	bl	8003048 <HAL_GPIO_WritePin>
                    GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin,
 8001540:	2201      	movs	r2, #1
 8001542:	2120      	movs	r1, #32
 8001544:	488d      	ldr	r0, [pc, #564]	; (800177c <MX_GPIO_Init+0x314>)
 8001546:	f001 fd7f 	bl	8003048 <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin,
 800154a:	2201      	movs	r2, #1
 800154c:	2101      	movs	r1, #1
 800154e:	488a      	ldr	r0, [pc, #552]	; (8001778 <MX_GPIO_Init+0x310>)
 8001550:	f001 fd7a 	bl	8003048 <HAL_GPIO_WritePin>
                    GPIO_PIN_SET);

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin
   * ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin |
 8001554:	f240 1315 	movw	r3, #277	; 0x115
 8001558:	617b      	str	r3, [r7, #20]
                        ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4882      	ldr	r0, [pc, #520]	; (8001778 <MX_GPIO_Init+0x310>)
 800156e:	f001 facd 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin
   * SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin |
 8001572:	236a      	movs	r3, #106	; 0x6a
 8001574:	617b      	str	r3, [r7, #20]
                        SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin |
                        ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	487c      	ldr	r0, [pc, #496]	; (8001778 <MX_GPIO_Init+0x310>)
 8001588:	f001 fac0 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800158c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4878      	ldr	r0, [pc, #480]	; (8001784 <MX_GPIO_Init+0x31c>)
 80015a4:	f001 fab2 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin |
 80015a8:	233f      	movs	r3, #63	; 0x3f
 80015aa:	617b      	str	r3, [r7, #20]
                        ARD_A1_Pin | ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ac:	230b      	movs	r3, #11
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	4872      	ldr	r0, [pc, #456]	; (8001784 <MX_GPIO_Init+0x31c>)
 80015bc:	f001 faa6 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin | ARD_D0_Pin;
 80015c0:	2303      	movs	r3, #3
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d0:	2308      	movs	r3, #8
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f001 fa95 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 80015e2:	f248 1304 	movw	r3, #33028	; 0x8104
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f001 fa85 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001602:	2308      	movs	r3, #8
 8001604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001612:	2301      	movs	r3, #1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f001 fa74 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001624:	2310      	movs	r3, #16
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001628:	230b      	movs	r3, #11
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f001 fa67 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 800163e:	23e0      	movs	r3, #224	; 0xe0
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800164e:	2305      	movs	r3, #5
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 fa56 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001660:	2301      	movs	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001664:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4841      	ldr	r0, [pc, #260]	; (800177c <MX_GPIO_Init+0x314>)
 8001676:	f001 fa49 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800167e:	230b      	movs	r3, #11
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	483b      	ldr	r0, [pc, #236]	; (800177c <MX_GPIO_Init+0x314>)
 800168e:	f001 fa3d 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
     LED2_Pin SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin |
 8001692:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001696:	617b      	str	r3, [r7, #20]
                        LED2_Pin | SPSGRF_915_SDN_Pin | ARD_D5_Pin |
                        SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4834      	ldr	r0, [pc, #208]	; (800177c <MX_GPIO_Init+0x314>)
 80016ac:	f001 fa2e 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin
     ARD_D2_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin |
 80016b0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80016b4:	617b      	str	r3, [r7, #20]
                        ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin |
                        PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	482e      	ldr	r0, [pc, #184]	; (8001780 <MX_GPIO_Init+0x318>)
 80016c8:	f001 fa20 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin
   * PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin |
 80016cc:	f243 0381 	movw	r3, #12417	; 0x3081
 80016d0:	617b      	str	r3, [r7, #20]
                        PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4826      	ldr	r0, [pc, #152]	; (8001780 <MX_GPIO_Init+0x318>)
 80016e6:	f001 fa11 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80016ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4820      	ldr	r0, [pc, #128]	; (8001784 <MX_GPIO_Init+0x31c>)
 8001704:	f001 fa02 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8001708:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4819      	ldr	r0, [pc, #100]	; (8001784 <MX_GPIO_Init+0x31c>)
 8001720:	f001 f9f4 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001724:	2302      	movs	r3, #2
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001734:	2305      	movs	r3, #5
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <MX_GPIO_Init+0x318>)
 8001740:	f001 f9e4 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin
   * PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin |
 8001744:	2378      	movs	r3, #120	; 0x78
 8001746:	617b      	str	r3, [r7, #20]
                        PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001754:	2307      	movs	r3, #7
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <MX_GPIO_Init+0x318>)
 8001760:	f001 f9d4 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8001764:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	e00a      	b.n	8001788 <MX_GPIO_Init+0x320>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	48001000 	.word	0x48001000
 800177c:	48000400 	.word	0x48000400
 8001780:	48000c00 	.word	0x48000c00
 8001784:	48000800 	.word	0x48000800
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800178e:	2304      	movs	r3, #4
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0x360>)
 800179a:	f001 f9b7 	bl	8002b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2017      	movs	r0, #23
 80017a4:	f001 f86f 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017a8:	2017      	movs	r0, #23
 80017aa:	f001 f888 	bl	80028be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f001 f867 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b8:	2028      	movs	r0, #40	; 0x28
 80017ba:	f001 f880 	bl	80028be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	48000400 	.word	0x48000400

080017cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1) {
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_MspInit+0x44>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_MspInit+0x44>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_MspInit+0x44>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x44>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_MspInit+0x44>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6593      	str	r3, [r2, #88]	; 0x58
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_MspInit+0x44>)
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0ac      	sub	sp, #176	; 0xb0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2288      	movs	r2, #136	; 0x88
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f005 fee5 	bl	8007610 <memset>
  if(DFSDM1_Init == 0)
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d142      	bne.n	80018d4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800184e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001852:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fb18 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800186a:	f7ff ffaf 	bl	80017cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800188c:	f043 0310 	orr.w	r3, r3, #16
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800189e:	f44f 7320 	mov.w	r3, #640	; 0x280
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018b8:	2306      	movs	r3, #6
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80018c6:	f001 f921 	bl	8002b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a02      	ldr	r2, [pc, #8]	; (80018dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018d2:	6013      	str	r3, [r2, #0]
  }

}
 80018d4:	bf00      	nop
 80018d6:	37b0      	adds	r7, #176	; 0xb0
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000a3c 	.word	0x20000a3c
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001000 	.word	0x48001000

080018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ac      	sub	sp, #176	; 0xb0
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2288      	movs	r2, #136	; 0x88
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f005 fe81 	bl	8007610 <memset>
  if(hi2c->Instance==I2C2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a21      	ldr	r2, [pc, #132]	; (8001998 <HAL_I2C_MspInit+0xb0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13b      	bne.n	8001990 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800191c:	2300      	movs	r3, #0
 800191e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4618      	mov	r0, r3
 8001926:	f003 fab5 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001930:	f7ff ff4c 	bl	80017cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_I2C_MspInit+0xb4>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	4a18      	ldr	r2, [pc, #96]	; (800199c <HAL_I2C_MspInit+0xb4>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_I2C_MspInit+0xb4>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800194c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195a:	2301      	movs	r3, #1
 800195c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001966:	2304      	movs	r3, #4
 8001968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001970:	4619      	mov	r1, r3
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_I2C_MspInit+0xb8>)
 8001974:	f001 f8ca 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_I2C_MspInit+0xb4>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_I2C_MspInit+0xb4>)
 800197e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_I2C_MspInit+0xb4>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	37b0      	adds	r7, #176	; 0xb0
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40005800 	.word	0x40005800
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000400 	.word	0x48000400

080019a4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_I2C_MspDeInit+0x3c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10f      	bne.n	80019d6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_I2C_MspDeInit+0x40>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <HAL_I2C_MspDeInit+0x40>)
 80019bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019c0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80019c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <HAL_I2C_MspDeInit+0x44>)
 80019c8:	f001 fa4a 	bl	8002e60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80019cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <HAL_I2C_MspDeInit+0x44>)
 80019d2:	f001 fa45 	bl	8002e60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40005800 	.word	0x40005800
 80019e4:	40021000 	.word	0x40021000
 80019e8:	48000400 	.word	0x48000400

080019ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_QSPI_MspInit+0x7c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d128      	bne.n	8001a60 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_QSPI_MspInit+0x80>)
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_QSPI_MspInit+0x80>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6513      	str	r3, [r2, #80]	; 0x50
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_QSPI_MspInit+0x80>)
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_QSPI_MspInit+0x80>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_QSPI_MspInit+0x80>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_QSPI_MspInit+0x80>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001a3e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001a42:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a50:	230a      	movs	r3, #10
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_QSPI_MspInit+0x84>)
 8001a5c:	f001 f856 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	a0001000 	.word	0xa0001000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48001000 	.word	0x48001000

08001a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_SPI_MspInit+0x7c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d128      	bne.n	8001ae8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_SPI_MspInit+0x80>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_SPI_MspInit+0x80>)
 8001a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa2:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_SPI_MspInit+0x80>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_SPI_MspInit+0x80>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_SPI_MspInit+0x80>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_SPI_MspInit+0x80>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ac6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ad8:	2306      	movs	r3, #6
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_SPI_MspInit+0x84>)
 8001ae4:	f001 f812 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	; 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40003c00 	.word	0x40003c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	48000800 	.word	0x48000800

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0ae      	sub	sp, #184	; 0xb8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	2288      	movs	r2, #136	; 0x88
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 fd77 	bl	8007610 <memset>
  if(huart->Instance==USART1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <HAL_UART_MspInit+0x134>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d13b      	bne.n	8001ba4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b30:	2300      	movs	r3, #0
 8001b32:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 f9ab 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b44:	f7ff fe42 	bl	80017cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b52:	6613      	str	r3, [r2, #96]	; 0x60
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001b78:	23c0      	movs	r3, #192	; 0xc0
 8001b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b90:	2307      	movs	r3, #7
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4826      	ldr	r0, [pc, #152]	; (8001c38 <HAL_UART_MspInit+0x13c>)
 8001b9e:	f000 ffb5 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ba2:	e040      	b.n	8001c26 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_UART_MspInit+0x140>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d13b      	bne.n	8001c26 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bae:	2304      	movs	r3, #4
 8001bb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 f96a 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001bc6:	f7ff fe01 	bl	80017cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_UART_MspInit+0x138>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c14:	2307      	movs	r3, #7
 8001c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	; (8001c40 <HAL_UART_MspInit+0x144>)
 8001c22:	f000 ff73 	bl	8002b0c <HAL_GPIO_Init>
}
 8001c26:	bf00      	nop
 8001c28:	37b8      	adds	r7, #184	; 0xb8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40013800 	.word	0x40013800
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000400 	.word	0x48000400
 8001c3c:	40004800 	.word	0x40004800
 8001c40:	48000c00 	.word	0x48000c00

08001c44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ac      	sub	sp, #176	; 0xb0
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2288      	movs	r2, #136	; 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f005 fcd3 	bl	8007610 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c72:	d17c      	bne.n	8001d6e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c8a:	2318      	movs	r3, #24
 8001c8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c8e:	2307      	movs	r3, #7
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 f8f5 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001cb0:	f7ff fd8c 	bl	80017cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ce0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f000 ff0f 	bl	8002b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001cee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d08:	230a      	movs	r3, #10
 8001d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f000 fef8 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d114      	bne.n	8001d6a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d58:	f002 f9d0 	bl	80040fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_PCD_MspInit+0x134>)
 8001d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d68:	e001      	b.n	8001d6e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001d6a:	f002 f9c7 	bl	80040fc <HAL_PWREx_EnableVddUSB>
}
 8001d6e:	bf00      	nop
 8001d70:	37b0      	adds	r7, #176	; 0xb0
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <NMI_Handler+0x4>

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 fc3e 	bl	8002648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001dd4:	2020      	movs	r0, #32
 8001dd6:	f001 f969 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001dda:	2040      	movs	r0, #64	; 0x40
 8001ddc:	f001 f966 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001de0:	2080      	movs	r0, #128	; 0x80
 8001de2:	f001 f963 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001de6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dea:	f001 f95f 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001df6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dfa:	f001 f957 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001dfe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e02:	f001 f953 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001e06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e0a:	f001 f94f 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001e0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e12:	f001 f94b 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001e16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e1a:	f001 f947 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  return 1;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_kill>:

int _kill(int pid, int sig)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3c:	f005 fc04 	bl	8007648 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2216      	movs	r2, #22
 8001e44:	601a      	str	r2, [r3, #0]
  return -1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_exit>:

void _exit (int status)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ffe7 	bl	8001e32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e64:	e7fe      	b.n	8001e64 <_exit+0x12>

08001e66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	e00a      	b.n	8001e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e78:	f3af 8000 	nop.w
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	60ba      	str	r2, [r7, #8]
 8001e84:	b2ca      	uxtb	r2, r1
 8001e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dbf0      	blt.n	8001e78 <_read+0x12>
  }

  return len;
 8001e96:	687b      	ldr	r3, [r7, #4]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e009      	b.n	8001ec6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	60ba      	str	r2, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	dbf1      	blt.n	8001eb2 <_write+0x12>
  }
  return len;
 8001ece:	687b      	ldr	r3, [r7, #4]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <_close>:

int _close(int file)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f00:	605a      	str	r2, [r3, #4]
  return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_isatty>:

int _isatty(int file)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <_sbrk+0x5c>)
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <_sbrk+0x60>)
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x64>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <_sbrk+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d207      	bcs.n	8001f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f70:	f005 fb6a 	bl	8007648 <__errno>
 8001f74:	4603      	mov	r3, r0
 8001f76:	220c      	movs	r2, #12
 8001f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7e:	e009      	b.n	8001f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a05      	ldr	r2, [pc, #20]	; (8001fa4 <_sbrk+0x64>)
 8001f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20018000 	.word	0x20018000
 8001fa0:	00000400 	.word	0x00000400
 8001fa4:	20000a40 	.word	0x20000a40
 8001fa8:	20000c10 	.word	0x20000c10

08001fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <SystemInit+0x20>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <SystemInit+0x20>)
 8001fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002008 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd4:	f7ff ffea 	bl	8001fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <LoopForever+0x6>)
  ldr r1, =_edata
 8001fda:	490d      	ldr	r1, [pc, #52]	; (8002010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <LoopForever+0xe>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	; (800201c <LoopForever+0x16>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffe:	f005 fb29 	bl	8007654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002002:	f7fe ff9f 	bl	8000f44 <main>

08002006 <LoopForever>:

LoopForever:
    b LoopForever
 8002006:	e7fe      	b.n	8002006 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002008:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002010:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 8002014:	08009d34 	.word	0x08009d34
  ldr r2, =_sbss
 8002018:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 800201c:	20000c10 	.word	0x20000c10

08002020 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002020:	e7fe      	b.n	8002020 <ADC1_2_IRQHandler>
	...

08002024 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <I2Cx_MspInit+0xa8>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a26      	ldr	r2, [pc, #152]	; (80020cc <I2Cx_MspInit+0xa8>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <I2Cx_MspInit+0xa8>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002044:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002048:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800204a:	2312      	movs	r3, #18
 800204c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800204e:	2301      	movs	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002056:	2304      	movs	r3, #4
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	481b      	ldr	r0, [pc, #108]	; (80020d0 <I2Cx_MspInit+0xac>)
 8002062:	f000 fd53 	bl	8002b0c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4818      	ldr	r0, [pc, #96]	; (80020d0 <I2Cx_MspInit+0xac>)
 800206e:	f000 fd4d 	bl	8002b0c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <I2Cx_MspInit+0xa8>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <I2Cx_MspInit+0xa8>)
 8002078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <I2Cx_MspInit+0xa8>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <I2Cx_MspInit+0xa8>)
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <I2Cx_MspInit+0xa8>)
 8002090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002094:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <I2Cx_MspInit+0xa8>)
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <I2Cx_MspInit+0xa8>)
 800209c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020a0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	210f      	movs	r1, #15
 80020a6:	2021      	movs	r0, #33	; 0x21
 80020a8:	f000 fbed 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80020ac:	2021      	movs	r0, #33	; 0x21
 80020ae:	f000 fc06 	bl	80028be <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	210f      	movs	r1, #15
 80020b6:	2022      	movs	r0, #34	; 0x22
 80020b8:	f000 fbe5 	bl	8002886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80020bc:	2022      	movs	r0, #34	; 0x22
 80020be:	f000 fbfe 	bl	80028be <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3728      	adds	r7, #40	; 0x28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000400 	.word	0x48000400

080020d4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <I2Cx_Init+0x54>)
 80020e0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a11      	ldr	r2, [pc, #68]	; (800212c <I2Cx_Init+0x58>)
 80020e6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff89 	bl	8002024 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 ffed 	bl	80030f2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002118:	2100      	movs	r1, #0
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f001 fd9a 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40005800 	.word	0x40005800
 800212c:	00702681 	.word	0x00702681

08002130 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af04      	add	r7, sp, #16
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	72fb      	strb	r3, [r7, #11]
 8002142:	460b      	mov	r3, r1
 8002144:	813b      	strh	r3, [r7, #8]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	b299      	uxth	r1, r3
 8002152:	88f8      	ldrh	r0, [r7, #6]
 8002154:	893a      	ldrh	r2, [r7, #8]
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	4603      	mov	r3, r0
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f001 f9a2 	bl	80034b0 <HAL_I2C_Mem_Read>
 800216c:	4603      	mov	r3, r0
 800216e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f832 	bl	80021e4 <I2Cx_Error>
  }
  return status;
 8002180:	7dfb      	ldrb	r3, [r7, #23]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b08a      	sub	sp, #40	; 0x28
 800218e:	af04      	add	r7, sp, #16
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	4608      	mov	r0, r1
 8002194:	4611      	mov	r1, r2
 8002196:	461a      	mov	r2, r3
 8002198:	4603      	mov	r3, r0
 800219a:	72fb      	strb	r3, [r7, #11]
 800219c:	460b      	mov	r3, r1
 800219e:	813b      	strh	r3, [r7, #8]
 80021a0:	4613      	mov	r3, r2
 80021a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	b299      	uxth	r1, r3
 80021ac:	88f8      	ldrh	r0, [r7, #6]
 80021ae:	893a      	ldrh	r2, [r7, #8]
 80021b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b4:	9302      	str	r3, [sp, #8]
 80021b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4603      	mov	r3, r0
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f001 f861 	bl	8003288 <HAL_I2C_Mem_Write>
 80021c6:	4603      	mov	r3, r0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	4619      	mov	r1, r3
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f805 	bl	80021e4 <I2Cx_Error>
  }
  return status;
 80021da:	7dfb      	ldrb	r3, [r7, #23]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f001 f819 	bl	8003228 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff6c 	bl	80020d4 <I2Cx_Init>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <SENSOR_IO_Init+0x10>)
 800220a:	f7ff ff63 	bl	80020d4 <I2Cx_Init>
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000a44 	.word	0x20000a44

08002218 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af02      	add	r7, sp, #8
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
 8002222:	460b      	mov	r3, r1
 8002224:	71bb      	strb	r3, [r7, #6]
 8002226:	4613      	mov	r3, r2
 8002228:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	b29a      	uxth	r2, r3
 800222e:	79f9      	ldrb	r1, [r7, #7]
 8002230:	2301      	movs	r3, #1
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	1d7b      	adds	r3, r7, #5
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	4803      	ldr	r0, [pc, #12]	; (8002248 <SENSOR_IO_Write+0x30>)
 800223c:	f7ff ffa5 	bl	800218a <I2Cx_WriteMultiple>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000a44 	.word	0x20000a44

0800224c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af02      	add	r7, sp, #8
 8002252:	4603      	mov	r3, r0
 8002254:	460a      	mov	r2, r1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002260:	79bb      	ldrb	r3, [r7, #6]
 8002262:	b29a      	uxth	r2, r3
 8002264:	79f9      	ldrb	r1, [r7, #7]
 8002266:	2301      	movs	r3, #1
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	f107 030f 	add.w	r3, r7, #15
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	4804      	ldr	r0, [pc, #16]	; (8002284 <SENSOR_IO_Read+0x38>)
 8002274:	f7ff ff5c 	bl	8002130 <I2Cx_ReadMultiple>

  return read_value;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000a44 	.word	0x20000a44

08002288 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af02      	add	r7, sp, #8
 800228e:	603a      	str	r2, [r7, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	460b      	mov	r3, r1
 8002298:	71bb      	strb	r3, [r7, #6]
 800229a:	4613      	mov	r3, r2
 800229c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800229e:	79bb      	ldrb	r3, [r7, #6]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	79f9      	ldrb	r1, [r7, #7]
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2301      	movs	r3, #1
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <SENSOR_IO_ReadMultiple+0x38>)
 80022b0:	f7ff ff3e 	bl	8002130 <I2Cx_ReadMultiple>
 80022b4:	4603      	mov	r3, r0
 80022b6:	b29b      	uxth	r3, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000a44 	.word	0x20000a44

080022c4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80022ce:	2300      	movs	r3, #0
 80022d0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80022d2:	4b19      	ldr	r3, [pc, #100]	; (8002338 <BSP_ACCELERO_Init+0x74>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4798      	blx	r3
 80022d8:	4603      	mov	r3, r0
 80022da:	2b6a      	cmp	r3, #106	; 0x6a
 80022dc:	d002      	beq.n	80022e4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
 80022e2:	e024      	b.n	800232e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <BSP_ACCELERO_Init+0x78>)
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <BSP_ACCELERO_Init+0x74>)
 80022e8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80022ea:	2330      	movs	r3, #48	; 0x30
 80022ec:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80022f2:	2300      	movs	r3, #0
 80022f4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002302:	797a      	ldrb	r2, [r7, #5]
 8002304:	7abb      	ldrb	r3, [r7, #10]
 8002306:	4313      	orrs	r3, r2
 8002308:	b2db      	uxtb	r3, r3
 800230a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800230c:	7a3b      	ldrb	r3, [r7, #8]
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	b2db      	uxtb	r3, r3
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	b21a      	sxth	r2, r3
 8002318:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	b21b      	sxth	r3, r3
 8002320:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <BSP_ACCELERO_Init+0x78>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	89ba      	ldrh	r2, [r7, #12]
 800232a:	4610      	mov	r0, r2
 800232c:	4798      	blx	r3
  }  

  return ret;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000050 	.word	0x20000050
 800233c:	20000a98 	.word	0x20000a98

08002340 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
    }
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000a98 	.word	0x20000a98

08002370 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800237e:	2110      	movs	r1, #16
 8002380:	20d4      	movs	r0, #212	; 0xd4
 8002382:	f7ff ff63 	bl	800224c <SENSOR_IO_Read>
 8002386:	4603      	mov	r3, r0
 8002388:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002396:	7bba      	ldrb	r2, [r7, #14]
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	4313      	orrs	r3, r2
 800239c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800239e:	7bbb      	ldrb	r3, [r7, #14]
 80023a0:	461a      	mov	r2, r3
 80023a2:	2110      	movs	r1, #16
 80023a4:	20d4      	movs	r0, #212	; 0xd4
 80023a6:	f7ff ff37 	bl	8002218 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80023aa:	2112      	movs	r1, #18
 80023ac:	20d4      	movs	r0, #212	; 0xd4
 80023ae:	f7ff ff4d 	bl	800224c <SENSOR_IO_Read>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80023c4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80023c6:	7bba      	ldrb	r2, [r7, #14]
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	461a      	mov	r2, r3
 80023d2:	2112      	movs	r1, #18
 80023d4:	20d4      	movs	r0, #212	; 0xd4
 80023d6:	f7ff ff1f 	bl	8002218 <SENSOR_IO_Write>
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80023e8:	2300      	movs	r3, #0
 80023ea:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023ec:	2110      	movs	r1, #16
 80023ee:	20d4      	movs	r0, #212	; 0xd4
 80023f0:	f7ff ff2c 	bl	800224c <SENSOR_IO_Read>
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	461a      	mov	r2, r3
 8002404:	2110      	movs	r1, #16
 8002406:	20d4      	movs	r0, #212	; 0xd4
 8002408:	f7ff ff06 	bl	8002218 <SENSOR_IO_Write>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002418:	f7ff fef4 	bl	8002204 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800241c:	210f      	movs	r1, #15
 800241e:	20d4      	movs	r0, #212	; 0xd4
 8002420:	f7ff ff14 	bl	800224c <SENSOR_IO_Read>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}

0800242a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002438:	2115      	movs	r1, #21
 800243a:	20d4      	movs	r0, #212	; 0xd4
 800243c:	f7ff ff06 	bl	800224c <SENSOR_IO_Read>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	f023 0310 	bic.w	r3, r3, #16
 800244a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	461a      	mov	r2, r3
 800245e:	2115      	movs	r1, #21
 8002460:	20d4      	movs	r0, #212	; 0xd4
 8002462:	f7ff fed9 	bl	8002218 <SENSOR_IO_Write>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002486:	2110      	movs	r1, #16
 8002488:	20d4      	movs	r0, #212	; 0xd4
 800248a:	f7ff fedf 	bl	800224c <SENSOR_IO_Read>
 800248e:	4603      	mov	r3, r0
 8002490:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002492:	f107 0208 	add.w	r2, r7, #8
 8002496:	2306      	movs	r3, #6
 8002498:	2128      	movs	r1, #40	; 0x28
 800249a:	20d4      	movs	r0, #212	; 0xd4
 800249c:	f7ff fef4 	bl	8002288 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	e01c      	b.n	80024e0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80024a6:	7ffb      	ldrb	r3, [r7, #31]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	3301      	adds	r3, #1
 80024ac:	3320      	adds	r3, #32
 80024ae:	443b      	add	r3, r7
 80024b0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	3320      	adds	r3, #32
 80024c0:	443b      	add	r3, r7
 80024c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	7ffb      	ldrb	r3, [r7, #31]
 80024ce:	b212      	sxth	r2, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	3320      	adds	r3, #32
 80024d4:	443b      	add	r3, r7
 80024d6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80024da:	7ffb      	ldrb	r3, [r7, #31]
 80024dc:	3301      	adds	r3, #1
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d9df      	bls.n	80024a6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d829      	bhi.n	8002544 <LSM6DSL_AccReadXYZ+0xd4>
 80024f0:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <LSM6DSL_AccReadXYZ+0x88>)
 80024f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f6:	bf00      	nop
 80024f8:	0800252d 	.word	0x0800252d
 80024fc:	08002545 	.word	0x08002545
 8002500:	08002545 	.word	0x08002545
 8002504:	08002545 	.word	0x08002545
 8002508:	0800253f 	.word	0x0800253f
 800250c:	08002545 	.word	0x08002545
 8002510:	08002545 	.word	0x08002545
 8002514:	08002545 	.word	0x08002545
 8002518:	08002533 	.word	0x08002533
 800251c:	08002545 	.word	0x08002545
 8002520:	08002545 	.word	0x08002545
 8002524:	08002545 	.word	0x08002545
 8002528:	08002539 	.word	0x08002539
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800252c:	4b18      	ldr	r3, [pc, #96]	; (8002590 <LSM6DSL_AccReadXYZ+0x120>)
 800252e:	61bb      	str	r3, [r7, #24]
    break;
 8002530:	e008      	b.n	8002544 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <LSM6DSL_AccReadXYZ+0x124>)
 8002534:	61bb      	str	r3, [r7, #24]
    break;
 8002536:	e005      	b.n	8002544 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <LSM6DSL_AccReadXYZ+0x128>)
 800253a:	61bb      	str	r3, [r7, #24]
    break;
 800253c:	e002      	b.n	8002544 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <LSM6DSL_AccReadXYZ+0x12c>)
 8002540:	61bb      	str	r3, [r7, #24]
    break;    
 8002542:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
 8002548:	e01a      	b.n	8002580 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	3320      	adds	r3, #32
 8002550:	443b      	add	r3, r7
 8002552:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	7ffb      	ldrb	r3, [r7, #31]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002572:	ee17 2a90 	vmov	r2, s15
 8002576:	b212      	sxth	r2, r2
 8002578:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800257a:	7ffb      	ldrb	r3, [r7, #31]
 800257c:	3301      	adds	r3, #1
 800257e:	77fb      	strb	r3, [r7, #31]
 8002580:	7ffb      	ldrb	r3, [r7, #31]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d9e1      	bls.n	800254a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	3d79db23 	.word	0x3d79db23
 8002594:	3df9db23 	.word	0x3df9db23
 8002598:	3e79db23 	.word	0x3e79db23
 800259c:	3ef9db23 	.word	0x3ef9db23

080025a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025aa:	2003      	movs	r0, #3
 80025ac:	f000 f960 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 f80d 	bl	80025d0 <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	e001      	b.n	80025c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025c2:	f7ff f909 	bl	80017d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <HAL_InitTick+0x6c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d023      	beq.n	800262c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <HAL_InitTick+0x70>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_InitTick+0x6c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f96d 	bl	80028da <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d809      	bhi.n	8002620 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800260c:	2200      	movs	r2, #0
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002614:	f000 f937 	bl	8002886 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_InitTick+0x74>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e007      	b.n	8002630 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e004      	b.n	8002630 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e001      	b.n	8002630 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000088 	.word	0x20000088
 8002640:	2000004c 	.word	0x2000004c
 8002644:	20000084 	.word	0x20000084

08002648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x20>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x24>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4413      	add	r3, r2
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_IncTick+0x24>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000088 	.word	0x20000088
 800266c:	20000a9c 	.word	0x20000a9c

08002670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return uwTick;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_GetTick+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000a9c 	.word	0x20000a9c

08002688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff ffee 	bl	8002670 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a0:	d005      	beq.n	80026ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_Delay+0x44>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026ae:	bf00      	nop
 80026b0:	f7ff ffde 	bl	8002670 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d8f7      	bhi.n	80026b0 <HAL_Delay+0x28>
  {
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000088 	.word	0x20000088

080026d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002850:	f7ff ff8e 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff29 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff3e 	bl	8002718 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff8e 	bl	80027c4 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5d 	bl	8002770 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff31 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa2 	bl	800282c <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0ac      	b.n	8002a60 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f8b2 	bl	8002a74 <DFSDM_GetChannelFromInstance>
 8002910:	4603      	mov	r3, r0
 8002912:	4a55      	ldr	r2, [pc, #340]	; (8002a68 <HAL_DFSDM_ChannelInit+0x174>)
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e09f      	b.n	8002a60 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fe ff7d 	bl	8001820 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002926:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <HAL_DFSDM_ChannelInit+0x178>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3301      	adds	r3, #1
 800292c:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_DFSDM_ChannelInit+0x178>)
 800292e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002930:	4b4e      	ldr	r3, [pc, #312]	; (8002a6c <HAL_DFSDM_ChannelInit+0x178>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d125      	bne.n	8002984 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4c      	ldr	r2, [pc, #304]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 800293e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002942:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002944:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4948      	ldr	r1, [pc, #288]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 8002958:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800295c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	791b      	ldrb	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002966:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	3b01      	subs	r3, #1
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	493f      	ldr	r1, [pc, #252]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a3c      	ldr	r2, [pc, #240]	; (8002a70 <HAL_DFSDM_ChannelInit+0x17c>)
 800297e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002982:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002992:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029a2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80029a8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 020f 	bic.w	r2, r2, #15
 80029c0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6819      	ldr	r1, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80029e8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 0207 	and.w	r2, r2, #7
 8002a14:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a40:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f810 	bl	8002a74 <DFSDM_GetChannelFromInstance>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4904      	ldr	r1, [pc, #16]	; (8002a68 <HAL_DFSDM_ChannelInit+0x174>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000aa4 	.word	0x20000aa4
 8002a6c:	20000aa0 	.word	0x20000aa0
 8002a70:	40016000 	.word	0x40016000

08002a74 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d102      	bne.n	8002a8a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e02b      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <DFSDM_GetChannelFromInstance+0x80>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d102      	bne.n	8002a98 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e024      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <DFSDM_GetChannelFromInstance+0x84>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d102      	bne.n	8002aa6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e01d      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <DFSDM_GetChannelFromInstance+0x88>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d102      	bne.n	8002ab4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e016      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <DFSDM_GetChannelFromInstance+0x8c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d102      	bne.n	8002ac2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002abc:	2305      	movs	r3, #5
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e00f      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <DFSDM_GetChannelFromInstance+0x90>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d102      	bne.n	8002ad0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002aca:	2306      	movs	r3, #6
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e008      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <DFSDM_GetChannelFromInstance+0x94>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d102      	bne.n	8002ade <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002ad8:	2307      	movs	r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e001      	b.n	8002ae2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40016000 	.word	0x40016000
 8002af4:	40016020 	.word	0x40016020
 8002af8:	40016040 	.word	0x40016040
 8002afc:	40016080 	.word	0x40016080
 8002b00:	400160a0 	.word	0x400160a0
 8002b04:	400160c0 	.word	0x400160c0
 8002b08:	400160e0 	.word	0x400160e0

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1a:	e17f      	b.n	8002e1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8171 	beq.w	8002e16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d005      	beq.n	8002b4c <HAL_GPIO_Init+0x40>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d130      	bne.n	8002bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b82:	2201      	movs	r2, #1
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	f003 0201 	and.w	r2, r3, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d118      	bne.n	8002bec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	f003 0201 	and.w	r2, r3, #1
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d017      	beq.n	8002c28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d123      	bne.n	8002c7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	08da      	lsrs	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3208      	adds	r2, #8
 8002c76:	6939      	ldr	r1, [r7, #16]
 8002c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0203 	and.w	r2, r3, #3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80ac 	beq.w	8002e16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	4b5f      	ldr	r3, [pc, #380]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	4a5e      	ldr	r2, [pc, #376]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cca:	4b5c      	ldr	r3, [pc, #368]	; (8002e3c <HAL_GPIO_Init+0x330>)
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cd6:	4a5a      	ldr	r2, [pc, #360]	; (8002e40 <HAL_GPIO_Init+0x334>)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	220f      	movs	r2, #15
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d00:	d025      	beq.n	8002d4e <HAL_GPIO_Init+0x242>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4f      	ldr	r2, [pc, #316]	; (8002e44 <HAL_GPIO_Init+0x338>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01f      	beq.n	8002d4a <HAL_GPIO_Init+0x23e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4e      	ldr	r2, [pc, #312]	; (8002e48 <HAL_GPIO_Init+0x33c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d019      	beq.n	8002d46 <HAL_GPIO_Init+0x23a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4d      	ldr	r2, [pc, #308]	; (8002e4c <HAL_GPIO_Init+0x340>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0x236>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a4c      	ldr	r2, [pc, #304]	; (8002e50 <HAL_GPIO_Init+0x344>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00d      	beq.n	8002d3e <HAL_GPIO_Init+0x232>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <HAL_GPIO_Init+0x348>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <HAL_GPIO_Init+0x22e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <HAL_GPIO_Init+0x34c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_GPIO_Init+0x22a>
 8002d32:	2306      	movs	r3, #6
 8002d34:	e00c      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e00a      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e008      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	e006      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d42:	2303      	movs	r3, #3
 8002d44:	e004      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e002      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_GPIO_Init+0x244>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	f002 0203 	and.w	r2, r2, #3
 8002d56:	0092      	lsls	r2, r2, #2
 8002d58:	4093      	lsls	r3, r2
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d60:	4937      	ldr	r1, [pc, #220]	; (8002e40 <HAL_GPIO_Init+0x334>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	3302      	adds	r3, #2
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d92:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d98:	4b30      	ldr	r3, [pc, #192]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dc2:	4b26      	ldr	r3, [pc, #152]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de6:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <HAL_GPIO_Init+0x350>)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f47f ae78 	bne.w	8002b1c <HAL_GPIO_Init+0x10>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010000 	.word	0x40010000
 8002e44:	48000400 	.word	0x48000400
 8002e48:	48000800 	.word	0x48000800
 8002e4c:	48000c00 	.word	0x48000c00
 8002e50:	48001000 	.word	0x48001000
 8002e54:	48001400 	.word	0x48001400
 8002e58:	48001800 	.word	0x48001800
 8002e5c:	40010400 	.word	0x40010400

08002e60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002e6e:	e0cd      	b.n	800300c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002e70:	2201      	movs	r2, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80c0 	beq.w	8003006 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002e86:	4a68      	ldr	r2, [pc, #416]	; (8003028 <HAL_GPIO_DeInit+0x1c8>)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eae:	d025      	beq.n	8002efc <HAL_GPIO_DeInit+0x9c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a5e      	ldr	r2, [pc, #376]	; (800302c <HAL_GPIO_DeInit+0x1cc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01f      	beq.n	8002ef8 <HAL_GPIO_DeInit+0x98>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a5d      	ldr	r2, [pc, #372]	; (8003030 <HAL_GPIO_DeInit+0x1d0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d019      	beq.n	8002ef4 <HAL_GPIO_DeInit+0x94>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a5c      	ldr	r2, [pc, #368]	; (8003034 <HAL_GPIO_DeInit+0x1d4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_GPIO_DeInit+0x90>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_GPIO_DeInit+0x1d8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00d      	beq.n	8002eec <HAL_GPIO_DeInit+0x8c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_GPIO_DeInit+0x1dc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <HAL_GPIO_DeInit+0x88>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a59      	ldr	r2, [pc, #356]	; (8003040 <HAL_GPIO_DeInit+0x1e0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d101      	bne.n	8002ee4 <HAL_GPIO_DeInit+0x84>
 8002ee0:	2306      	movs	r3, #6
 8002ee2:	e00c      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	e00a      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002ee8:	2305      	movs	r3, #5
 8002eea:	e008      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e006      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e004      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e002      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_GPIO_DeInit+0x9e>
 8002efc:	2300      	movs	r3, #0
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	f002 0203 	and.w	r2, r2, #3
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	4093      	lsls	r3, r2
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d132      	bne.n	8002f74 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002f0e:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	494b      	ldr	r1, [pc, #300]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002f1c:	4b49      	ldr	r3, [pc, #292]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4947      	ldr	r1, [pc, #284]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002f2a:	4b46      	ldr	r3, [pc, #280]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4944      	ldr	r1, [pc, #272]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002f38:	4b42      	ldr	r3, [pc, #264]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4940      	ldr	r1, [pc, #256]	; (8003044 <HAL_GPIO_DeInit+0x1e4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	220f      	movs	r2, #15
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <HAL_GPIO_DeInit+0x1c8>)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43da      	mvns	r2, r3
 8002f66:	4830      	ldr	r0, [pc, #192]	; (8003028 <HAL_GPIO_DeInit+0x1c8>)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	089b      	lsrs	r3, r3, #2
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	3302      	adds	r3, #2
 8002f70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	08da      	lsrs	r2, r3, #3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3208      	adds	r2, #8
 8002f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	08d2      	lsrs	r2, r2, #3
 8002fa8:	4019      	ands	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2103      	movs	r1, #3
 8002fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	401a      	ands	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	401a      	ands	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f af2b 	bne.w	8002e70 <HAL_GPIO_DeInit+0x10>
  }
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40010000 	.word	0x40010000
 800302c:	48000400 	.word	0x48000400
 8003030:	48000800 	.word	0x48000800
 8003034:	48000c00 	.word	0x48000c00
 8003038:	48001000 	.word	0x48001000
 800303c:	48001400 	.word	0x48001400
 8003040:	48001800 	.word	0x48001800
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003064:	e002      	b.n	800306c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43d9      	mvns	r1, r3
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	400b      	ands	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f806 	bl	80030dc <HAL_GPIO_EXTI_Callback>
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e08d      	b.n	8003220 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fe fbe5 	bl	80018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2224      	movs	r2, #36	; 0x24
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003142:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003152:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	e006      	b.n	800317a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003178:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d108      	bne.n	8003194 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e007      	b.n	80031a4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69d9      	ldr	r1, [r3, #28]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e021      	b.n	800327e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2224      	movs	r2, #36	; 0x24
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0201 	bic.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe fba6 	bl	80019a4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	f040 80f9 	bne.w	80034a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_I2C_Mem_Write+0x34>
 80032b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0ed      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x4e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0e6      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032de:	f7ff f9c7 	bl	8002670 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	2319      	movs	r3, #25
 80032ea:	2201      	movs	r2, #1
 80032ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fac3 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d1      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2221      	movs	r2, #33	; 0x21
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a3a      	ldr	r2, [r7, #32]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003328:	88f8      	ldrh	r0, [r7, #6]
 800332a:	893a      	ldrh	r2, [r7, #8]
 800332c:	8979      	ldrh	r1, [r7, #10]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4603      	mov	r3, r0
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f9d3 	bl	80036e4 <I2C_RequestMemoryWrite>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0a9      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	2bff      	cmp	r3, #255	; 0xff
 8003358:	d90e      	bls.n	8003378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	22ff      	movs	r2, #255	; 0xff
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8979      	ldrh	r1, [r7, #10]
 8003368:	2300      	movs	r3, #0
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fc3d 	bl	8003bf0 <I2C_TransferConfig>
 8003376:	e00f      	b.n	8003398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	b2da      	uxtb	r2, r3
 8003388:	8979      	ldrh	r1, [r7, #10]
 800338a:	2300      	movs	r3, #0
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fc2c 	bl	8003bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fabc 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e07b      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d034      	beq.n	8003450 <HAL_I2C_Mem_Write+0x1c8>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d130      	bne.n	8003450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	; 0x80
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fa3f 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04d      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2bff      	cmp	r3, #255	; 0xff
 8003410:	d90e      	bls.n	8003430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	b2da      	uxtb	r2, r3
 800341e:	8979      	ldrh	r1, [r7, #10]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fbe1 	bl	8003bf0 <I2C_TransferConfig>
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	b2da      	uxtb	r2, r3
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	2300      	movs	r3, #0
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fbd0 	bl	8003bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d19e      	bne.n	8003398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 faa2 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e01a      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2220      	movs	r2, #32
 8003474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_I2C_Mem_Write+0x224>)
 8003482:	400b      	ands	r3, r1
 8003484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	fe00e800 	.word	0xfe00e800

080034b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	4608      	mov	r0, r1
 80034ba:	4611      	mov	r1, r2
 80034bc:	461a      	mov	r2, r3
 80034be:	4603      	mov	r3, r0
 80034c0:	817b      	strh	r3, [r7, #10]
 80034c2:	460b      	mov	r3, r1
 80034c4:	813b      	strh	r3, [r7, #8]
 80034c6:	4613      	mov	r3, r2
 80034c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	f040 80fd 	bne.w	80036d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_I2C_Mem_Read+0x34>
 80034de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0f1      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Mem_Read+0x4e>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0ea      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003506:	f7ff f8b3 	bl	8002670 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2319      	movs	r3, #25
 8003512:	2201      	movs	r2, #1
 8003514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f9af 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d5      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2222      	movs	r2, #34	; 0x22
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2240      	movs	r2, #64	; 0x40
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a3a      	ldr	r2, [r7, #32]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003550:	88f8      	ldrh	r0, [r7, #6]
 8003552:	893a      	ldrh	r2, [r7, #8]
 8003554:	8979      	ldrh	r1, [r7, #10]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	4603      	mov	r3, r0
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f913 	bl	800378c <I2C_RequestMemoryRead>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0ad      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	2bff      	cmp	r3, #255	; 0xff
 8003580:	d90e      	bls.n	80035a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	22ff      	movs	r2, #255	; 0xff
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	4b52      	ldr	r3, [pc, #328]	; (80036dc <HAL_I2C_Mem_Read+0x22c>)
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fb29 	bl	8003bf0 <I2C_TransferConfig>
 800359e:	e00f      	b.n	80035c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_I2C_Mem_Read+0x22c>)
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fb18 	bl	8003bf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2200      	movs	r2, #0
 80035c8:	2104      	movs	r1, #4
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f956 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e07c      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d034      	beq.n	8003680 <HAL_I2C_Mem_Read+0x1d0>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d130      	bne.n	8003680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2200      	movs	r2, #0
 8003626:	2180      	movs	r1, #128	; 0x80
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f927 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04d      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	2bff      	cmp	r3, #255	; 0xff
 8003640:	d90e      	bls.n	8003660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	b2da      	uxtb	r2, r3
 800364e:	8979      	ldrh	r1, [r7, #10]
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fac9 	bl	8003bf0 <I2C_TransferConfig>
 800365e:	e00f      	b.n	8003680 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	b2da      	uxtb	r2, r3
 8003670:	8979      	ldrh	r1, [r7, #10]
 8003672:	2300      	movs	r3, #0
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fab8 	bl	8003bf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d19a      	bne.n	80035c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f98a 	bl	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e01a      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2220      	movs	r2, #32
 80036a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_I2C_Mem_Read+0x230>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	80002400 	.word	0x80002400
 80036e0:	fe00e800 	.word	0xfe00e800

080036e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	460b      	mov	r3, r1
 80036f8:	813b      	strh	r3, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	4b20      	ldr	r3, [pc, #128]	; (8003788 <I2C_RequestMemoryWrite+0xa4>)
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fa6f 	bl	8003bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f8ff 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e02c      	b.n	8003780 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003726:	88fb      	ldrh	r3, [r7, #6]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800372c:	893b      	ldrh	r3, [r7, #8]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28
 8003736:	e015      	b.n	8003764 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003738:	893b      	ldrh	r3, [r7, #8]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	b29b      	uxth	r3, r3
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	69b9      	ldr	r1, [r7, #24]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8e5 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e012      	b.n	8003780 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2200      	movs	r2, #0
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f884 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	80002000 	.word	0x80002000

0800378c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	460b      	mov	r3, r1
 80037a0:	813b      	strh	r3, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	8979      	ldrh	r1, [r7, #10]
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <I2C_RequestMemoryRead+0xa4>)
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 fa1c 	bl	8003bf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f8ac 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e02c      	b.n	8003826 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d105      	bne.n	80037de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037d2:	893b      	ldrh	r3, [r7, #8]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
 80037dc:	e015      	b.n	800380a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037de:	893b      	ldrh	r3, [r7, #8]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f892 	bl	800391a <I2C_WaitOnTXISFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e012      	b.n	8003826 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f831 	bl	800387c <I2C_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	80002000 	.word	0x80002000

08003834 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d103      	bne.n	8003852 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d007      	beq.n	8003870 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	619a      	str	r2, [r3, #24]
  }
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	e031      	b.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003894:	d02d      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003896:	f7fe feeb 	bl	8002670 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d122      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d113      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	429a      	cmp	r2, r3
 800390e:	d0be      	beq.n	800388e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003926:	e033      	b.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f87f 	bl	8003a30 <I2C_IsErrorOccurred>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e031      	b.n	80039a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003942:	d025      	beq.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fe fe94 	bl	8002670 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11a      	bne.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d013      	beq.n	8003990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e007      	b.n	80039a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d1c4      	bne.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b4:	e02f      	b.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f838 	bl	8003a30 <I2C_IsErrorOccurred>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02d      	b.n	8003a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fe fe51 	bl	8002670 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d11a      	bne.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d013      	beq.n	8003a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e007      	b.n	8003a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d1c8      	bne.n	80039b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d068      	beq.n	8003b2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2210      	movs	r2, #16
 8003a62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a64:	e049      	b.n	8003afa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6c:	d045      	beq.n	8003afa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe fdff 	bl	8002670 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_IsErrorOccurred+0x54>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d13a      	bne.n	8003afa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa6:	d121      	bne.n	8003aec <I2C_IsErrorOccurred+0xbc>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aae:	d01d      	beq.n	8003aec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d01a      	beq.n	8003aec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ac6:	f7fe fdd3 	bl	8002670 <HAL_GetTick>
 8003aca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003acc:	e00e      	b.n	8003aec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ace:	f7fe fdcf 	bl	8002670 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b19      	cmp	r3, #25
 8003ada:	d907      	bls.n	8003aec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f043 0320 	orr.w	r3, r3, #32
 8003ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003aea:	e006      	b.n	8003afa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d1e9      	bne.n	8003ace <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d003      	beq.n	8003b10 <I2C_IsErrorOccurred+0xe0>
 8003b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0aa      	beq.n	8003a66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	f043 0308 	orr.w	r3, r3, #8
 8003b68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fe45 	bl	8003834 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <I2C_IsErrorOccurred+0x1bc>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	fe00e800 	.word	0xfe00e800

08003bf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607b      	str	r3, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	817b      	strh	r3, [r7, #10]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c08:	7a7b      	ldrb	r3, [r7, #9]
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	0d5b      	lsrs	r3, r3, #21
 8003c2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <I2C_TransferConfig+0x60>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	43db      	mvns	r3, r3
 8003c34:	ea02 0103 	and.w	r1, r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	03ff63ff 	.word	0x03ff63ff

08003c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d138      	bne.n	8003cdc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e032      	b.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2224      	movs	r2, #36	; 0x24
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d139      	bne.n	8003d74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d101      	bne.n	8003d0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e033      	b.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2224      	movs	r2, #36	; 0x24
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d84:	b08f      	sub	sp, #60	; 0x3c
 8003d86:	af0a      	add	r7, sp, #40	; 0x28
 8003d88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e116      	b.n	8003fc2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d106      	bne.n	8003db4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd ff48 	bl	8001c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2203      	movs	r2, #3
 8003db8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f002 fb9f 	bl	8006516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	687e      	ldr	r6, [r7, #4]
 8003de0:	466d      	mov	r5, sp
 8003de2:	f106 0410 	add.w	r4, r6, #16
 8003de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003df6:	1d33      	adds	r3, r6, #4
 8003df8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dfa:	6838      	ldr	r0, [r7, #0]
 8003dfc:	f002 fb5f 	bl	80064be <USB_CoreInit>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0d7      	b.n	8003fc2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f002 fb8d 	bl	8006538 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e04a      	b.n	8003eba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	333d      	adds	r3, #61	; 0x3d
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	b298      	uxth	r0, r3
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3356      	adds	r3, #86	; 0x56
 8003e60:	4602      	mov	r2, r0
 8003e62:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3340      	adds	r3, #64	; 0x40
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3344      	adds	r3, #68	; 0x44
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3348      	adds	r3, #72	; 0x48
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	334c      	adds	r3, #76	; 0x4c
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3af      	bcc.n	8003e24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e044      	b.n	8003f54 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f08:	2200      	movs	r2, #0
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	3301      	adds	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3b5      	bcc.n	8003eca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	687e      	ldr	r6, [r7, #4]
 8003f66:	466d      	mov	r5, sp
 8003f68:	f106 0410 	add.w	r4, r6, #16
 8003f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f78:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f7c:	1d33      	adds	r3, r6, #4
 8003f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f002 fb25 	bl	80065d0 <USB_DevInit>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e014      	b.n	8003fc2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f80a 	bl	8003fca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f002 fcc7 	bl	800694e <USB_DevDisconnect>

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	f043 0303 	orr.w	r3, r3, #3
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004018:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a04      	ldr	r2, [pc, #16]	; (8004030 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800401e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004022:	6013      	str	r3, [r2, #0]
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40007000 	.word	0x40007000

08004034 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <HAL_PWREx_GetVoltageRange+0x18>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004040:	4618      	mov	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40007000 	.word	0x40007000

08004050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405e:	d130      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004060:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406c:	d038      	beq.n	80040e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800407c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2232      	movs	r2, #50	; 0x32
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	0c9b      	lsrs	r3, r3, #18
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004094:	e002      	b.n	800409c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3b01      	subs	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a8:	d102      	bne.n	80040b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f2      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b0:	4b0f      	ldr	r3, [pc, #60]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d110      	bne.n	80040e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e00f      	b.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ce:	d007      	beq.n	80040e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d8:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40007000 	.word	0x40007000
 80040f4:	2000004c 	.word	0x2000004c
 80040f8:	431bde83 	.word	0x431bde83

080040fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800410a:	6053      	str	r3, [r2, #4]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40007000 	.word	0x40007000

0800411c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004124:	f7fe faa4 	bl	8002670 <HAL_GetTick>
 8004128:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e063      	b.n	80041fc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fd fc4f 	bl	80019ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800414e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f858 	bl	8004208 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	3b01      	subs	r3, #1
 8004168:	021a      	lsls	r2, r3, #8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	2120      	movs	r1, #32
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f850 	bl	8004224 <QSPI_WaitFlagStateUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d131      	bne.n	80041f2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004198:	f023 0310 	bic.w	r3, r3, #16
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6852      	ldr	r2, [r2, #4]
 80041a0:	0611      	lsls	r1, r2, #24
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <HAL_QSPI_Init+0xe8>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6912      	ldr	r2, [r2, #16]
 80041be:	0411      	lsls	r1, r2, #16
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6952      	ldr	r2, [r2, #20]
 80041c4:	4311      	orrs	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6992      	ldr	r2, [r2, #24]
 80041ca:	4311      	orrs	r1, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	430b      	orrs	r3, r1
 80041d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80041fa:	7afb      	ldrb	r3, [r7, #11]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	ffe0f8fe 	.word	0xffe0f8fe

08004208 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004234:	e01a      	b.n	800426c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423c:	d016      	beq.n	800426c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe fa17 	bl	8002670 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2204      	movs	r2, #4
 8004258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	f043 0201 	orr.w	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e00e      	b.n	800428a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	bf14      	ite	ne
 800427a:	2301      	movne	r3, #1
 800427c:	2300      	moveq	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	429a      	cmp	r2, r3
 8004286:	d1d6      	bne.n	8004236 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e3ca      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a6:	4b97      	ldr	r3, [pc, #604]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b0:	4b94      	ldr	r3, [pc, #592]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80e4 	beq.w	8004490 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_RCC_OscConfig+0x4a>
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b0c      	cmp	r3, #12
 80042d2:	f040 808b 	bne.w	80043ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f040 8087 	bne.w	80043ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042de:	4b89      	ldr	r3, [pc, #548]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_RCC_OscConfig+0x62>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e3a2      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	4b82      	ldr	r3, [pc, #520]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_RCC_OscConfig+0x7c>
 8004306:	4b7f      	ldr	r3, [pc, #508]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430e:	e005      	b.n	800431c <HAL_RCC_OscConfig+0x88>
 8004310:	4b7c      	ldr	r3, [pc, #496]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431c:	4293      	cmp	r3, r2
 800431e:	d223      	bcs.n	8004368 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fd55 	bl	8004dd4 <RCC_SetFlashLatencyFromMSIRange>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e383      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004334:	4b73      	ldr	r3, [pc, #460]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a72      	ldr	r2, [pc, #456]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800433a:	f043 0308 	orr.w	r3, r3, #8
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	496d      	ldr	r1, [pc, #436]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004352:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	4968      	ldr	r1, [pc, #416]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
 8004366:	e025      	b.n	80043b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004368:	4b66      	ldr	r3, [pc, #408]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a65      	ldr	r2, [pc, #404]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800436e:	f043 0308 	orr.w	r3, r3, #8
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b63      	ldr	r3, [pc, #396]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4960      	ldr	r1, [pc, #384]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004386:	4b5f      	ldr	r3, [pc, #380]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	021b      	lsls	r3, r3, #8
 8004394:	495b      	ldr	r1, [pc, #364]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd15 	bl	8004dd4 <RCC_SetFlashLatencyFromMSIRange>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e343      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b4:	f000 fc4a 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	4b52      	ldr	r3, [pc, #328]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	091b      	lsrs	r3, r3, #4
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	4950      	ldr	r1, [pc, #320]	; (8004508 <HAL_RCC_OscConfig+0x274>)
 80043c6:	5ccb      	ldrb	r3, [r1, r3]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	4a4e      	ldr	r2, [pc, #312]	; (800450c <HAL_RCC_OscConfig+0x278>)
 80043d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043d4:	4b4e      	ldr	r3, [pc, #312]	; (8004510 <HAL_RCC_OscConfig+0x27c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe f8f9 	bl	80025d0 <HAL_InitTick>
 80043de:	4603      	mov	r3, r0
 80043e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d052      	beq.n	800448e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	e327      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d032      	beq.n	800445a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a42      	ldr	r2, [pc, #264]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004400:	f7fe f936 	bl	8002670 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004408:	f7fe f932 	bl	8002670 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e310      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800441a:	4b3a      	ldr	r3, [pc, #232]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a36      	ldr	r2, [pc, #216]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800442c:	f043 0308 	orr.w	r3, r3, #8
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4931      	ldr	r1, [pc, #196]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004444:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	492c      	ldr	r1, [pc, #176]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
 8004458:	e01a      	b.n	8004490 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a29      	ldr	r2, [pc, #164]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004466:	f7fe f903 	bl	8002670 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800446e:	f7fe f8ff 	bl	8002670 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e2dd      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004480:	4b20      	ldr	r3, [pc, #128]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f0      	bne.n	800446e <HAL_RCC_OscConfig+0x1da>
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800448e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d074      	beq.n	8004586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d005      	beq.n	80044ae <HAL_RCC_OscConfig+0x21a>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b0c      	cmp	r3, #12
 80044a6:	d10e      	bne.n	80044c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d10b      	bne.n	80044c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d064      	beq.n	8004584 <HAL_RCC_OscConfig+0x2f0>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d160      	bne.n	8004584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e2ba      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x24a>
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0b      	ldr	r2, [pc, #44]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	e026      	b.n	800452c <HAL_RCC_OscConfig+0x298>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e6:	d115      	bne.n	8004514 <HAL_RCC_OscConfig+0x280>
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a05      	ldr	r2, [pc, #20]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a02      	ldr	r2, [pc, #8]	; (8004504 <HAL_RCC_OscConfig+0x270>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e014      	b.n	800452c <HAL_RCC_OscConfig+0x298>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	08009968 	.word	0x08009968
 800450c:	2000004c 	.word	0x2000004c
 8004510:	20000084 	.word	0x20000084
 8004514:	4ba0      	ldr	r3, [pc, #640]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a9f      	ldr	r2, [pc, #636]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800451a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b9d      	ldr	r3, [pc, #628]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a9c      	ldr	r2, [pc, #624]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe f89c 	bl	8002670 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fe f898 	bl	8002670 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e276      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454e:	4b92      	ldr	r3, [pc, #584]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x2a8>
 800455a:	e014      	b.n	8004586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fe f888 	bl	8002670 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fe f884 	bl	8002670 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	; 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e262      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004576:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x2d0>
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d060      	beq.n	8004654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_OscConfig+0x310>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d119      	bne.n	80045d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d116      	bne.n	80045d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a4:	4b7c      	ldr	r3, [pc, #496]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x328>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e23f      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045bc:	4b76      	ldr	r3, [pc, #472]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	4973      	ldr	r1, [pc, #460]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d0:	e040      	b.n	8004654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d023      	beq.n	8004622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045da:	4b6f      	ldr	r3, [pc, #444]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6e      	ldr	r2, [pc, #440]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fe f843 	bl	8002670 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fe f83f 	bl	8002670 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e21d      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004600:	4b65      	ldr	r3, [pc, #404]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b62      	ldr	r3, [pc, #392]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	495f      	ldr	r1, [pc, #380]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
 8004620:	e018      	b.n	8004654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004622:	4b5d      	ldr	r3, [pc, #372]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5c      	ldr	r2, [pc, #368]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800462c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fe f81f 	bl	8002670 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004636:	f7fe f81b 	bl	8002670 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e1f9      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004648:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d03c      	beq.n	80046da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01c      	beq.n	80046a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004668:	4b4b      	ldr	r3, [pc, #300]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800466a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800466e:	4a4a      	ldr	r2, [pc, #296]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd fffa 	bl	8002670 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004680:	f7fd fff6 	bl	8002670 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1d4      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004692:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ef      	beq.n	8004680 <HAL_RCC_OscConfig+0x3ec>
 80046a0:	e01b      	b.n	80046da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a8:	4a3b      	ldr	r2, [pc, #236]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fd ffdd 	bl	8002670 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ba:	f7fd ffd9 	bl	8002670 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e1b7      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046cc:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ef      	bne.n	80046ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a6 	beq.w	8004834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e8:	2300      	movs	r3, #0
 80046ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10d      	bne.n	8004714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f8:	4b27      	ldr	r3, [pc, #156]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	4a26      	ldr	r2, [pc, #152]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	6593      	str	r3, [r2, #88]	; 0x58
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004710:	2301      	movs	r3, #1
 8004712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x508>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d118      	bne.n	8004752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004720:	4b1e      	ldr	r3, [pc, #120]	; (800479c <HAL_RCC_OscConfig+0x508>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_RCC_OscConfig+0x508>)
 8004726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472c:	f7fd ffa0 	bl	8002670 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004734:	f7fd ff9c 	bl	8002670 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e17a      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_RCC_OscConfig+0x508>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <HAL_RCC_OscConfig+0x4d8>
 800475a:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	4a0d      	ldr	r2, [pc, #52]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800476a:	e029      	b.n	80047c0 <HAL_RCC_OscConfig+0x52c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d115      	bne.n	80047a0 <HAL_RCC_OscConfig+0x50c>
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800477c:	f043 0304 	orr.w	r3, r3, #4
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	4a03      	ldr	r2, [pc, #12]	; (8004798 <HAL_RCC_OscConfig+0x504>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004794:	e014      	b.n	80047c0 <HAL_RCC_OscConfig+0x52c>
 8004796:	bf00      	nop
 8004798:	40021000 	.word	0x40021000
 800479c:	40007000 	.word	0x40007000
 80047a0:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a9b      	ldr	r2, [pc, #620]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b0:	4b98      	ldr	r3, [pc, #608]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	4a97      	ldr	r2, [pc, #604]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd ff52 	bl	8002670 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fd ff4e 	bl	8002670 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	; 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e12a      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ed      	beq.n	80047d0 <HAL_RCC_OscConfig+0x53c>
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd ff3b 	bl	8002670 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd ff37 	bl	8002670 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e113      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004814:	4b7f      	ldr	r3, [pc, #508]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ed      	bne.n	80047fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482c:	4a79      	ldr	r2, [pc, #484]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004832:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80fe 	beq.w	8004a3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	2b02      	cmp	r3, #2
 8004844:	f040 80d0 	bne.w	80049e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004848:	4b72      	ldr	r3, [pc, #456]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	429a      	cmp	r2, r3
 800485a:	d130      	bne.n	80048be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	3b01      	subs	r3, #1
 8004868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d127      	bne.n	80048be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d11f      	bne.n	80048be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004888:	2a07      	cmp	r2, #7
 800488a:	bf14      	ite	ne
 800488c:	2201      	movne	r2, #1
 800488e:	2200      	moveq	r2, #0
 8004890:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004892:	4293      	cmp	r3, r2
 8004894:	d113      	bne.n	80048be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	3b01      	subs	r3, #1
 80048a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d109      	bne.n	80048be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d06e      	beq.n	800499c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d069      	beq.n	8004998 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0ad      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048e0:	4b4c      	ldr	r3, [pc, #304]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a4b      	ldr	r2, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80048e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048ec:	f7fd fec0 	bl	8002670 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f4:	f7fd febc 	bl	8002670 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e09a      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004906:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004912:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	4b40      	ldr	r3, [pc, #256]	; (8004a18 <HAL_RCC_OscConfig+0x784>)
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004922:	3a01      	subs	r2, #1
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800492c:	0212      	lsls	r2, r2, #8
 800492e:	4311      	orrs	r1, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004934:	0852      	lsrs	r2, r2, #1
 8004936:	3a01      	subs	r2, #1
 8004938:	0552      	lsls	r2, r2, #21
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	3a01      	subs	r2, #1
 8004944:	0652      	lsls	r2, r2, #25
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800494c:	0912      	lsrs	r2, r2, #4
 800494e:	0452      	lsls	r2, r2, #17
 8004950:	430a      	orrs	r2, r1
 8004952:	4930      	ldr	r1, [pc, #192]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 8004954:	4313      	orrs	r3, r2
 8004956:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004958:	4b2e      	ldr	r3, [pc, #184]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004962:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a2a      	ldr	r2, [pc, #168]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800496e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004970:	f7fd fe7e 	bl	8002670 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd fe7a 	bl	8002670 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e058      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004996:	e050      	b.n	8004a3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e04f      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d148      	bne.n	8004a3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049c0:	f7fd fe56 	bl	8002670 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fd fe52 	bl	8002670 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e030      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x734>
 80049e6:	e028      	b.n	8004a3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d023      	beq.n	8004a36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <HAL_RCC_OscConfig+0x780>)
 80049f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fd fe39 	bl	8002670 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a00:	e00c      	b.n	8004a1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a02:	f7fd fe35 	bl	8002670 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d905      	bls.n	8004a1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e013      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
 8004a14:	40021000 	.word	0x40021000
 8004a18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1c:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_OscConfig+0x7b0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ec      	bne.n	8004a02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCC_OscConfig+0x7b0>)
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	4905      	ldr	r1, [pc, #20]	; (8004a44 <HAL_RCC_OscConfig+0x7b0>)
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_OscConfig+0x7b4>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	60cb      	str	r3, [r1, #12]
 8004a34:	e001      	b.n	8004a3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	feeefffc 	.word	0xfeeefffc

08004a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0e7      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a60:	4b75      	ldr	r3, [pc, #468]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d910      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b72      	ldr	r3, [pc, #456]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 0207 	bic.w	r2, r3, #7
 8004a76:	4970      	ldr	r1, [pc, #448]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b6e      	ldr	r3, [pc, #440]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0cf      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d010      	beq.n	8004abe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	4b66      	ldr	r3, [pc, #408]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d908      	bls.n	8004abe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b63      	ldr	r3, [pc, #396]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4960      	ldr	r1, [pc, #384]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d04c      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad2:	4b5a      	ldr	r3, [pc, #360]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0a6      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aea:	4b54      	ldr	r3, [pc, #336]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d115      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e09a      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b02:	4b4e      	ldr	r3, [pc, #312]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e08e      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b12:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e086      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b22:	4b46      	ldr	r3, [pc, #280]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0203 	bic.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4943      	ldr	r1, [pc, #268]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b34:	f7fd fd9c 	bl	8002670 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3c:	f7fd fd98 	bl	8002670 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e06e      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	4b3a      	ldr	r3, [pc, #232]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 020c 	and.w	r2, r3, #12
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d1eb      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d010      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d208      	bcs.n	8004b92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	492b      	ldr	r1, [pc, #172]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d210      	bcs.n	8004bc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 0207 	bic.w	r2, r3, #7
 8004ba8:	4923      	ldr	r1, [pc, #140]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCC_ClockConfig+0x1ec>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e036      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bce:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4918      	ldr	r1, [pc, #96]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4910      	ldr	r1, [pc, #64]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c00:	f000 f824 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	490b      	ldr	r1, [pc, #44]	; (8004c40 <HAL_RCC_ClockConfig+0x1f4>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1f8>)
 8004c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_ClockConfig+0x1fc>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fcd3 	bl	80025d0 <HAL_InitTick>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	08009968 	.word	0x08009968
 8004c44:	2000004c 	.word	0x2000004c
 8004c48:	20000084 	.word	0x20000084

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x34>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d121      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d11e      	bne.n	8004cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c80:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e005      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c9c:	4b2d      	ldr	r3, [pc, #180]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10d      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d102      	bne.n	8004cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cc4:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cd0:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0c      	cmp	r3, #12
 8004cd8:	d134      	bne.n	8004d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d003      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8004cf0:	e005      	b.n	8004cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cf4:	617b      	str	r3, [r7, #20]
      break;
 8004cf6:	e005      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cfa:	617b      	str	r3, [r7, #20]
      break;
 8004cfc:	e002      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	617b      	str	r3, [r7, #20]
      break;
 8004d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	3301      	adds	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	fb03 f202 	mul.w	r2, r3, r2
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	0e5b      	lsrs	r3, r3, #25
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	3301      	adds	r3, #1
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d44:	69bb      	ldr	r3, [r7, #24]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3724      	adds	r7, #36	; 0x24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000
 8004d58:	08009980 	.word	0x08009980
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	007a1200 	.word	0x007a1200

08004d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	2000004c 	.word	0x2000004c

08004d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d80:	f7ff fff0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0a1b      	lsrs	r3, r3, #8
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4904      	ldr	r1, [pc, #16]	; (8004da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	08009978 	.word	0x08009978

08004da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dac:	f7ff ffda 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0adb      	lsrs	r3, r3, #11
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4904      	ldr	r1, [pc, #16]	; (8004dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	08009978 	.word	0x08009978

08004dd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dec:	f7ff f922 	bl	8004034 <HAL_PWREx_GetVoltageRange>
 8004df0:	6178      	str	r0, [r7, #20]
 8004df2:	e014      	b.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	4a24      	ldr	r2, [pc, #144]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8004e00:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e0c:	f7ff f912 	bl	8004034 <HAL_PWREx_GetVoltageRange>
 8004e10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e12:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e24:	d10b      	bne.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d919      	bls.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e30:	d902      	bls.n	8004e38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e32:	2302      	movs	r3, #2
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e013      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e38:	2301      	movs	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e010      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d902      	bls.n	8004e4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e44:	2303      	movs	r3, #3
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e00a      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d102      	bne.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e50:	2302      	movs	r3, #2
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e004      	b.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b70      	cmp	r3, #112	; 0x70
 8004e5a:	d101      	bne.n	8004e60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f023 0207 	bic.w	r2, r3, #7
 8004e68:	4909      	ldr	r1, [pc, #36]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d001      	beq.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3718      	adds	r7, #24
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40022000 	.word	0x40022000

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d041      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eb8:	d02a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004eba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ebe:	d824      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ec0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ec6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eca:	d81e      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed4:	d010      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ed6:	e018      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed8:	4b86      	ldr	r3, [pc, #536]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a85      	ldr	r2, [pc, #532]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee4:	e015      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 facb 	bl	8005488 <RCCEx_PLLSAI1_Config>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef6:	e00c      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3320      	adds	r3, #32
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fbb6 	bl	8005670 <RCCEx_PLLSAI2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f08:	e003      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f18:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f26:	4973      	ldr	r1, [pc, #460]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f2e:	e001      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d041      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f48:	d02a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f4e:	d824      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f64:	d010      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f66:	e018      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f74:	e015      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fa83 	bl	8005488 <RCCEx_PLLSAI1_Config>
 8004f82:	4603      	mov	r3, r0
 8004f84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f86:	e00c      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3320      	adds	r3, #32
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fb6e 	bl	8005670 <RCCEx_PLLSAI2_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f98:	e003      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fa8:	4b52      	ldr	r3, [pc, #328]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fb6:	494f      	ldr	r1, [pc, #316]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fbe:	e001      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	7cfb      	ldrb	r3, [r7, #19]
 8004fc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80a0 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fd6:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00d      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	4a40      	ldr	r2, [pc, #256]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff8:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005004:	2301      	movs	r3, #1
 8005006:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005008:	4b3b      	ldr	r3, [pc, #236]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a3a      	ldr	r2, [pc, #232]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005012:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005014:	f7fd fb2c 	bl	8002670 <HAL_GetTick>
 8005018:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800501a:	e009      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501c:	f7fd fb28 	bl	8002670 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d902      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	74fb      	strb	r3, [r7, #19]
        break;
 800502e:	e005      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005030:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ef      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d15c      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005042:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01f      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	d019      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005060:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800506c:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	4b1d      	ldr	r3, [pc, #116]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005082:	4a1c      	ldr	r2, [pc, #112]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fd fae7 	bl	8002670 <HAL_GetTick>
 80050a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a4:	e00b      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fae3 	bl	8002670 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d902      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	74fb      	strb	r3, [r7, #19]
            break;
 80050bc:	e006      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ec      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e2:	4904      	ldr	r1, [pc, #16]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050ea:	e009      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fc:	7cfb      	ldrb	r3, [r7, #19]
 80050fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005100:	7c7b      	ldrb	r3, [r7, #17]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d105      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005106:	4b9e      	ldr	r3, [pc, #632]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	4a9d      	ldr	r2, [pc, #628]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800511e:	4b98      	ldr	r3, [pc, #608]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f023 0203 	bic.w	r2, r3, #3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	4994      	ldr	r1, [pc, #592]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005140:	4b8f      	ldr	r3, [pc, #572]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 020c 	bic.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	498c      	ldr	r1, [pc, #560]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005162:	4b87      	ldr	r3, [pc, #540]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	4983      	ldr	r1, [pc, #524]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005184:	4b7e      	ldr	r3, [pc, #504]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	497b      	ldr	r1, [pc, #492]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051a6:	4b76      	ldr	r3, [pc, #472]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	4972      	ldr	r1, [pc, #456]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c8:	4b6d      	ldr	r3, [pc, #436]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	496a      	ldr	r1, [pc, #424]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ea:	4b65      	ldr	r3, [pc, #404]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	4961      	ldr	r1, [pc, #388]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800520c:	4b5c      	ldr	r3, [pc, #368]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	4959      	ldr	r1, [pc, #356]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800522e:	4b54      	ldr	r3, [pc, #336]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005234:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	4950      	ldr	r1, [pc, #320]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005250:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	4948      	ldr	r1, [pc, #288]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005272:	4b43      	ldr	r3, [pc, #268]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005280:	493f      	ldr	r1, [pc, #252]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d028      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005294:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a2:	4937      	ldr	r1, [pc, #220]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052b4:	4b32      	ldr	r3, [pc, #200]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a31      	ldr	r2, [pc, #196]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052be:	60d3      	str	r3, [r2, #12]
 80052c0:	e011      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ca:	d10c      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f8d8 	bl	8005488 <RCCEx_PLLSAI1_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052e2:	7cfb      	ldrb	r3, [r7, #19]
 80052e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d028      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	491f      	ldr	r1, [pc, #124]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005310:	d106      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005312:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800531c:	60d3      	str	r3, [r2, #12]
 800531e:	e011      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005328:	d10c      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f8a9 	bl	8005488 <RCCEx_PLLSAI1_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02b      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	4908      	ldr	r1, [pc, #32]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800536a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536e:	d109      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	4a02      	ldr	r2, [pc, #8]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800537a:	60d3      	str	r3, [r2, #12]
 800537c:	e014      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800538c:	d10c      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
 8005392:	2101      	movs	r1, #1
 8005394:	4618      	mov	r0, r3
 8005396:	f000 f877 	bl	8005488 <RCCEx_PLLSAI1_Config>
 800539a:	4603      	mov	r3, r0
 800539c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800539e:	7cfb      	ldrb	r3, [r7, #19]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02f      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c2:	4928      	ldr	r1, [pc, #160]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053d2:	d10d      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3304      	adds	r3, #4
 80053d8:	2102      	movs	r1, #2
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 f854 	bl	8005488 <RCCEx_PLLSAI1_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d014      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	74bb      	strb	r3, [r7, #18]
 80053ee:	e011      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3320      	adds	r3, #32
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f935 	bl	8005670 <RCCEx_PLLSAI2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800540a:	7cfb      	ldrb	r3, [r7, #19]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005420:	4b10      	ldr	r3, [pc, #64]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542e:	490d      	ldr	r1, [pc, #52]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005452:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800545a:	7cbb      	ldrb	r3, [r7, #18]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40021000 	.word	0x40021000

08005468 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000

08005488 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005496:	4b75      	ldr	r3, [pc, #468]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054a2:	4b72      	ldr	r3, [pc, #456]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0203 	and.w	r2, r3, #3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d10d      	bne.n	80054ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
       ||
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ba:	4b6c      	ldr	r3, [pc, #432]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
       ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d047      	beq.n	800555e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
 80054d2:	e044      	b.n	800555e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d018      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x86>
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d825      	bhi.n	800552c <RCCEx_PLLSAI1_Config+0xa4>
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d002      	beq.n	80054ea <RCCEx_PLLSAI1_Config+0x62>
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d009      	beq.n	80054fc <RCCEx_PLLSAI1_Config+0x74>
 80054e8:	e020      	b.n	800552c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ea:	4b60      	ldr	r3, [pc, #384]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11d      	bne.n	8005532 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054fa:	e01a      	b.n	8005532 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054fc:	4b5b      	ldr	r3, [pc, #364]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d116      	bne.n	8005536 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550c:	e013      	b.n	8005536 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800550e:	4b57      	ldr	r3, [pc, #348]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800551a:	4b54      	ldr	r3, [pc, #336]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800552a:	e006      	b.n	800553a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      break;
 8005530:	e004      	b.n	800553c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005532:	bf00      	nop
 8005534:	e002      	b.n	800553c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005536:	bf00      	nop
 8005538:	e000      	b.n	800553c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800553a:	bf00      	nop
    }

    if(status == HAL_OK)
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005542:	4b4a      	ldr	r3, [pc, #296]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	3b01      	subs	r3, #1
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	430b      	orrs	r3, r1
 8005558:	4944      	ldr	r1, [pc, #272]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d17d      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005564:	4b41      	ldr	r3, [pc, #260]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a40      	ldr	r2, [pc, #256]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800556e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005570:	f7fd f87e 	bl	8002670 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005576:	e009      	b.n	800558c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005578:	f7fd f87a 	bl	8002670 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	73fb      	strb	r3, [r7, #15]
        break;
 800558a:	e005      	b.n	8005598 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800558c:	4b37      	ldr	r3, [pc, #220]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ef      	bne.n	8005578 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d160      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d111      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6892      	ldr	r2, [r2, #8]
 80055b4:	0211      	lsls	r1, r2, #8
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68d2      	ldr	r2, [r2, #12]
 80055ba:	0912      	lsrs	r2, r2, #4
 80055bc:	0452      	lsls	r2, r2, #17
 80055be:	430a      	orrs	r2, r1
 80055c0:	492a      	ldr	r1, [pc, #168]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]
 80055c6:	e027      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d112      	bne.n	80055f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ce:	4b27      	ldr	r3, [pc, #156]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6892      	ldr	r2, [r2, #8]
 80055de:	0211      	lsls	r1, r2, #8
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6912      	ldr	r2, [r2, #16]
 80055e4:	0852      	lsrs	r2, r2, #1
 80055e6:	3a01      	subs	r2, #1
 80055e8:	0552      	lsls	r2, r2, #21
 80055ea:	430a      	orrs	r2, r1
 80055ec:	491f      	ldr	r1, [pc, #124]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	610b      	str	r3, [r1, #16]
 80055f2:	e011      	b.n	8005618 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055f4:	4b1d      	ldr	r3, [pc, #116]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6892      	ldr	r2, [r2, #8]
 8005604:	0211      	lsls	r1, r2, #8
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6952      	ldr	r2, [r2, #20]
 800560a:	0852      	lsrs	r2, r2, #1
 800560c:	3a01      	subs	r2, #1
 800560e:	0652      	lsls	r2, r2, #25
 8005610:	430a      	orrs	r2, r1
 8005612:	4916      	ldr	r1, [pc, #88]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005618:	4b14      	ldr	r3, [pc, #80]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a13      	ldr	r2, [pc, #76]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005622:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fd f824 	bl	8002670 <HAL_GetTick>
 8005628:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800562a:	e009      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800562c:	f7fd f820 	bl	8002670 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d902      	bls.n	8005640 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	73fb      	strb	r3, [r7, #15]
          break;
 800563e:	e005      	b.n	800564c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ef      	beq.n	800562c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800564c:	7bfb      	ldrb	r3, [r7, #15]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005654:	691a      	ldr	r2, [r3, #16]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4904      	ldr	r1, [pc, #16]	; (800566c <RCCEx_PLLSAI1_Config+0x1e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000

08005670 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800567e:	4b6a      	ldr	r3, [pc, #424]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800568a:	4b67      	ldr	r3, [pc, #412]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0203 	and.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d10d      	bne.n	80056b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
       ||
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056a2:	4b61      	ldr	r3, [pc, #388]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
       ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d047      	beq.n	8005746 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e044      	b.n	8005746 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d018      	beq.n	80056f6 <RCCEx_PLLSAI2_Config+0x86>
 80056c4:	2b03      	cmp	r3, #3
 80056c6:	d825      	bhi.n	8005714 <RCCEx_PLLSAI2_Config+0xa4>
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d002      	beq.n	80056d2 <RCCEx_PLLSAI2_Config+0x62>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d009      	beq.n	80056e4 <RCCEx_PLLSAI2_Config+0x74>
 80056d0:	e020      	b.n	8005714 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11d      	bne.n	800571a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e2:	e01a      	b.n	800571a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056e4:	4b50      	ldr	r3, [pc, #320]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d116      	bne.n	800571e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f4:	e013      	b.n	800571e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056f6:	4b4c      	ldr	r3, [pc, #304]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005702:	4b49      	ldr	r3, [pc, #292]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005712:	e006      	b.n	8005722 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e004      	b.n	8005724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005722:	bf00      	nop
    }

    if(status == HAL_OK)
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10d      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800572a:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6819      	ldr	r1, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	3b01      	subs	r3, #1
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	430b      	orrs	r3, r1
 8005740:	4939      	ldr	r1, [pc, #228]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	4313      	orrs	r3, r2
 8005744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d167      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005758:	f7fc ff8a 	bl	8002670 <HAL_GetTick>
 800575c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800575e:	e009      	b.n	8005774 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005760:	f7fc ff86 	bl	8002670 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d902      	bls.n	8005774 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	73fb      	strb	r3, [r7, #15]
        break;
 8005772:	e005      	b.n	8005780 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005774:	4b2c      	ldr	r3, [pc, #176]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ef      	bne.n	8005760 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d14a      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d111      	bne.n	80057b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800578c:	4b26      	ldr	r3, [pc, #152]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	0211      	lsls	r1, r2, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68d2      	ldr	r2, [r2, #12]
 80057a2:	0912      	lsrs	r2, r2, #4
 80057a4:	0452      	lsls	r2, r2, #17
 80057a6:	430a      	orrs	r2, r1
 80057a8:	491f      	ldr	r1, [pc, #124]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	614b      	str	r3, [r1, #20]
 80057ae:	e011      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6892      	ldr	r2, [r2, #8]
 80057c0:	0211      	lsls	r1, r2, #8
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6912      	ldr	r2, [r2, #16]
 80057c6:	0852      	lsrs	r2, r2, #1
 80057c8:	3a01      	subs	r2, #1
 80057ca:	0652      	lsls	r2, r2, #25
 80057cc:	430a      	orrs	r2, r1
 80057ce:	4916      	ldr	r1, [pc, #88]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e0:	f7fc ff46 	bl	8002670 <HAL_GetTick>
 80057e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057e6:	e009      	b.n	80057fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057e8:	f7fc ff42 	bl	8002670 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d902      	bls.n	80057fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	73fb      	strb	r3, [r7, #15]
          break;
 80057fa:	e005      	b.n	8005808 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057fc:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0ef      	beq.n	80057e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	4904      	ldr	r1, [pc, #16]	; (8005828 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005818:	4313      	orrs	r3, r2
 800581a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40021000 	.word	0x40021000

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e095      	b.n	800596a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fc f8f8 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a4:	d902      	bls.n	80058ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_Init+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 0204 	and.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e040      	b.n	8005a06 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fc f8b1 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2224      	movs	r2, #36	; 0x24
 800599e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb6b 	bl	8006094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8b0 	bl	8005b24 <UART_SetConfig>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e01b      	b.n	8005a06 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0201 	orr.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fbea 	bl	80061d8 <UART_CheckIdleState>
 8005a04:	4603      	mov	r3, r0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08a      	sub	sp, #40	; 0x28
 8005a12:	af02      	add	r7, sp, #8
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d178      	bne.n	8005b18 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_UART_Transmit+0x24>
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e071      	b.n	8005b1a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2221      	movs	r2, #33	; 0x21
 8005a42:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a44:	f7fc fe14 	bl	8002670 <HAL_GetTick>
 8005a48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	88fa      	ldrh	r2, [r7, #6]
 8005a4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	88fa      	ldrh	r2, [r7, #6]
 8005a56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	d108      	bne.n	8005a76 <HAL_UART_Transmit+0x68>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e003      	b.n	8005a7e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a7e:	e030      	b.n	8005ae2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 fc4c 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e03c      	b.n	8005b1a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	3302      	adds	r3, #2
 8005aba:	61bb      	str	r3, [r7, #24]
 8005abc:	e008      	b.n	8005ad0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	3301      	adds	r3, #1
 8005ace:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1c8      	bne.n	8005a80 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2200      	movs	r2, #0
 8005af6:	2140      	movs	r1, #64	; 0x40
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fc15 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d004      	beq.n	8005b0e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e005      	b.n	8005b1a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b28:	b08a      	sub	sp, #40	; 0x28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4ba4      	ldr	r3, [pc, #656]	; (8005de4 <UART_SetConfig+0x2c0>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a99      	ldr	r2, [pc, #612]	; (8005de8 <UART_SetConfig+0x2c4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d004      	beq.n	8005b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a90      	ldr	r2, [pc, #576]	; (8005dec <UART_SetConfig+0x2c8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d126      	bne.n	8005bfc <UART_SetConfig+0xd8>
 8005bae:	4b90      	ldr	r3, [pc, #576]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d81b      	bhi.n	8005bf4 <UART_SetConfig+0xd0>
 8005bbc:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0xa0>)
 8005bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc2:	bf00      	nop
 8005bc4:	08005bd5 	.word	0x08005bd5
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bdd 	.word	0x08005bdd
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bda:	e116      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e112      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005be4:	2304      	movs	r3, #4
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bea:	e10e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bec:	2308      	movs	r3, #8
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf2:	e10a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfa:	e106      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a7c      	ldr	r2, [pc, #496]	; (8005df4 <UART_SetConfig+0x2d0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d138      	bne.n	8005c78 <UART_SetConfig+0x154>
 8005c06:	4b7a      	ldr	r3, [pc, #488]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d82d      	bhi.n	8005c70 <UART_SetConfig+0x14c>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <UART_SetConfig+0xf8>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c51 	.word	0x08005c51
 8005c20:	08005c71 	.word	0x08005c71
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c71 	.word	0x08005c71
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08005c71 	.word	0x08005c71
 8005c34:	08005c71 	.word	0x08005c71
 8005c38:	08005c71 	.word	0x08005c71
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c71 	.word	0x08005c71
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e0d8      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e0d4      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c60:	2304      	movs	r3, #4
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e0d0      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6e:	e0cc      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c70:	2310      	movs	r3, #16
 8005c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c76:	e0c8      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5e      	ldr	r2, [pc, #376]	; (8005df8 <UART_SetConfig+0x2d4>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d125      	bne.n	8005cce <UART_SetConfig+0x1aa>
 8005c82:	4b5b      	ldr	r3, [pc, #364]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d016      	beq.n	8005cbe <UART_SetConfig+0x19a>
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	d818      	bhi.n	8005cc6 <UART_SetConfig+0x1a2>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d00a      	beq.n	8005cae <UART_SetConfig+0x18a>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d814      	bhi.n	8005cc6 <UART_SetConfig+0x1a2>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <UART_SetConfig+0x182>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d008      	beq.n	8005cb6 <UART_SetConfig+0x192>
 8005ca4:	e00f      	b.n	8005cc6 <UART_SetConfig+0x1a2>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cac:	e0ad      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb4:	e0a9      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cbc:	e0a5      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc4:	e0a1      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cc6:	2310      	movs	r3, #16
 8005cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ccc:	e09d      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a4a      	ldr	r2, [pc, #296]	; (8005dfc <UART_SetConfig+0x2d8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d125      	bne.n	8005d24 <UART_SetConfig+0x200>
 8005cd8:	4b45      	ldr	r3, [pc, #276]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ce4:	d016      	beq.n	8005d14 <UART_SetConfig+0x1f0>
 8005ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ce8:	d818      	bhi.n	8005d1c <UART_SetConfig+0x1f8>
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d00a      	beq.n	8005d04 <UART_SetConfig+0x1e0>
 8005cee:	2b80      	cmp	r3, #128	; 0x80
 8005cf0:	d814      	bhi.n	8005d1c <UART_SetConfig+0x1f8>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <UART_SetConfig+0x1d8>
 8005cf6:	2b40      	cmp	r3, #64	; 0x40
 8005cf8:	d008      	beq.n	8005d0c <UART_SetConfig+0x1e8>
 8005cfa:	e00f      	b.n	8005d1c <UART_SetConfig+0x1f8>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d02:	e082      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d04:	2302      	movs	r3, #2
 8005d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0a:	e07e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d12:	e07a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d14:	2308      	movs	r3, #8
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1a:	e076      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d22:	e072      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a35      	ldr	r2, [pc, #212]	; (8005e00 <UART_SetConfig+0x2dc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d12a      	bne.n	8005d84 <UART_SetConfig+0x260>
 8005d2e:	4b30      	ldr	r3, [pc, #192]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3c:	d01a      	beq.n	8005d74 <UART_SetConfig+0x250>
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d42:	d81b      	bhi.n	8005d7c <UART_SetConfig+0x258>
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d48:	d00c      	beq.n	8005d64 <UART_SetConfig+0x240>
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d815      	bhi.n	8005d7c <UART_SetConfig+0x258>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <UART_SetConfig+0x238>
 8005d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d58:	d008      	beq.n	8005d6c <UART_SetConfig+0x248>
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x258>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d62:	e052      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d64:	2302      	movs	r3, #2
 8005d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d6a:	e04e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d72:	e04a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d74:	2308      	movs	r3, #8
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7a:	e046      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d82:	e042      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <UART_SetConfig+0x2c4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d13a      	bne.n	8005e04 <UART_SetConfig+0x2e0>
 8005d8e:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <UART_SetConfig+0x2cc>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d9c:	d01a      	beq.n	8005dd4 <UART_SetConfig+0x2b0>
 8005d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da2:	d81b      	bhi.n	8005ddc <UART_SetConfig+0x2b8>
 8005da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da8:	d00c      	beq.n	8005dc4 <UART_SetConfig+0x2a0>
 8005daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dae:	d815      	bhi.n	8005ddc <UART_SetConfig+0x2b8>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <UART_SetConfig+0x298>
 8005db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db8:	d008      	beq.n	8005dcc <UART_SetConfig+0x2a8>
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x2b8>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc2:	e022      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dca:	e01e      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e01a      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e016      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e012      	b.n	8005e0a <UART_SetConfig+0x2e6>
 8005de4:	efff69f3 	.word	0xefff69f3
 8005de8:	40008000 	.word	0x40008000
 8005dec:	40013800 	.word	0x40013800
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40004400 	.word	0x40004400
 8005df8:	40004800 	.word	0x40004800
 8005dfc:	40004c00 	.word	0x40004c00
 8005e00:	40005000 	.word	0x40005000
 8005e04:	2310      	movs	r3, #16
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a9f      	ldr	r2, [pc, #636]	; (800608c <UART_SetConfig+0x568>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d17a      	bne.n	8005f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d824      	bhi.n	8005e66 <UART_SetConfig+0x342>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0x300>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e67 	.word	0x08005e67
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e67 	.word	0x08005e67
 8005e34:	08005e57 	.word	0x08005e57
 8005e38:	08005e67 	.word	0x08005e67
 8005e3c:	08005e67 	.word	0x08005e67
 8005e40:	08005e67 	.word	0x08005e67
 8005e44:	08005e5f 	.word	0x08005e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e48:	f7fe ff98 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8005e4c:	61f8      	str	r0, [r7, #28]
        break;
 8005e4e:	e010      	b.n	8005e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e50:	4b8f      	ldr	r3, [pc, #572]	; (8006090 <UART_SetConfig+0x56c>)
 8005e52:	61fb      	str	r3, [r7, #28]
        break;
 8005e54:	e00d      	b.n	8005e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e56:	f7fe fef9 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8005e5a:	61f8      	str	r0, [r7, #28]
        break;
 8005e5c:	e009      	b.n	8005e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e62:	61fb      	str	r3, [r7, #28]
        break;
 8005e64:	e005      	b.n	8005e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80fb 	beq.w	8006070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	4413      	add	r3, r2
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d305      	bcc.n	8005e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d903      	bls.n	8005e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e9c:	e0e8      	b.n	8006070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	461c      	mov	r4, r3
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	022b      	lsls	r3, r5, #8
 8005eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005eb4:	0222      	lsls	r2, r4, #8
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	6849      	ldr	r1, [r1, #4]
 8005eba:	0849      	lsrs	r1, r1, #1
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	4688      	mov	r8, r1
 8005ec0:	4681      	mov	r9, r0
 8005ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	f7fa feb4 	bl	8000c48 <__aeabi_uldivmod>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eee:	d308      	bcc.n	8005f02 <UART_SetConfig+0x3de>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ef6:	d204      	bcs.n	8005f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e0b6      	b.n	8006070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f08:	e0b2      	b.n	8006070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f12:	d15e      	bne.n	8005fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d828      	bhi.n	8005f6e <UART_SetConfig+0x44a>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x400>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fe ff18 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8005f4c:	61f8      	str	r0, [r7, #28]
        break;
 8005f4e:	e014      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fe ff2a 	bl	8004da8 <HAL_RCC_GetPCLK2Freq>
 8005f54:	61f8      	str	r0, [r7, #28]
        break;
 8005f56:	e010      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b4d      	ldr	r3, [pc, #308]	; (8006090 <UART_SetConfig+0x56c>)
 8005f5a:	61fb      	str	r3, [r7, #28]
        break;
 8005f5c:	e00d      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fe fe75 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8005f62:	61f8      	str	r0, [r7, #28]
        break;
 8005f64:	e009      	b.n	8005f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61fb      	str	r3, [r7, #28]
        break;
 8005f6c:	e005      	b.n	8005f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d077      	beq.n	8006070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005a      	lsls	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	441a      	add	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b0f      	cmp	r3, #15
 8005f9a:	d916      	bls.n	8005fca <UART_SetConfig+0x4a6>
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	d212      	bcs.n	8005fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f023 030f 	bic.w	r3, r3, #15
 8005fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	8afb      	ldrh	r3, [r7, #22]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	8afa      	ldrh	r2, [r7, #22]
 8005fc6:	60da      	str	r2, [r3, #12]
 8005fc8:	e052      	b.n	8006070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd0:	e04e      	b.n	8006070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d827      	bhi.n	800602a <UART_SetConfig+0x506>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x4bc>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800602b 	.word	0x0800602b
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800602b 	.word	0x0800602b
 8005ff8:	0800602b 	.word	0x0800602b
 8005ffc:	0800602b 	.word	0x0800602b
 8006000:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fe feba 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8006008:	61f8      	str	r0, [r7, #28]
        break;
 800600a:	e014      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fe fecc 	bl	8004da8 <HAL_RCC_GetPCLK2Freq>
 8006010:	61f8      	str	r0, [r7, #28]
        break;
 8006012:	e010      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b1e      	ldr	r3, [pc, #120]	; (8006090 <UART_SetConfig+0x56c>)
 8006016:	61fb      	str	r3, [r7, #28]
        break;
 8006018:	e00d      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe fe17 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 800601e:	61f8      	str	r0, [r7, #28]
        break;
 8006020:	e009      	b.n	8006036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006026:	61fb      	str	r3, [r7, #28]
        break;
 8006028:	e005      	b.n	8006036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006034:	bf00      	nop
    }

    if (pclk != 0U)
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d019      	beq.n	8006070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	085a      	lsrs	r2, r3, #1
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b0f      	cmp	r3, #15
 8006054:	d909      	bls.n	800606a <UART_SetConfig+0x546>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605c:	d205      	bcs.n	800606a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	e002      	b.n	8006070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800607c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006080:	4618      	mov	r0, r3
 8006082:	3728      	adds	r7, #40	; 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800608a:	bf00      	nop
 800608c:	40008000 	.word	0x40008000
 8006090:	00f42400 	.word	0x00f42400

08006094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01a      	beq.n	80061aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006192:	d10a      	bne.n	80061aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b098      	sub	sp, #96	; 0x60
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e8:	f7fc fa42 	bl	8002670 <HAL_GetTick>
 80061ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d12e      	bne.n	800625a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006204:	2200      	movs	r2, #0
 8006206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f88c 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d021      	beq.n	800625a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006234:	647b      	str	r3, [r7, #68]	; 0x44
 8006236:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800623a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e062      	b.n	8006320 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d149      	bne.n	80062fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f856 	bl	8006328 <UART_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d03c      	beq.n	80062fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	623b      	str	r3, [r7, #32]
   return(result);
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a0:	633b      	str	r3, [r7, #48]	; 0x30
 80062a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e6      	bne.n	8006282 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3308      	adds	r3, #8
 80062d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d4:	61fa      	str	r2, [r7, #28]
 80062d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	69b9      	ldr	r1, [r7, #24]
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	617b      	str	r3, [r7, #20]
   return(result);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e011      	b.n	8006320 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3758      	adds	r7, #88	; 0x58
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006338:	e049      	b.n	80063ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006340:	d045      	beq.n	80063ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fc f995 	bl	8002670 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <UART_WaitOnFlagUntilTimeout+0x30>
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e048      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d031      	beq.n	80063ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b08      	cmp	r3, #8
 8006376:	d110      	bne.n	800639a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2208      	movs	r2, #8
 800637e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f838 	bl	80063f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2208      	movs	r2, #8
 800638a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e029      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a8:	d111      	bne.n	80063ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f81e 	bl	80063f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e00f      	b.n	80063ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4013      	ands	r3, r2
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	bf0c      	ite	eq
 80063de:	2301      	moveq	r3, #1
 80063e0:	2300      	movne	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d0a6      	beq.n	800633a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b095      	sub	sp, #84	; 0x54
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800640c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641c:	643b      	str	r3, [r7, #64]	; 0x40
 800641e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e6      	bne.n	80063fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f023 0301 	bic.w	r3, r3, #1
 8006446:	64bb      	str	r3, [r7, #72]	; 0x48
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3308      	adds	r3, #8
 800644e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006468:	2b01      	cmp	r3, #1
 800646a:	d118      	bne.n	800649e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	60bb      	str	r3, [r7, #8]
   return(result);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0310 	bic.w	r3, r3, #16
 8006480:	647b      	str	r3, [r7, #68]	; 0x44
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	613b      	str	r3, [r7, #16]
   return(result);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e6      	bne.n	800646c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80064b2:	bf00      	nop
 80064b4:	3754      	adds	r7, #84	; 0x54
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064be:	b084      	sub	sp, #16
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	f107 001c 	add.w	r0, r7, #28
 80064cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa65 	bl	80069ac <USB_CoreReset>
 80064e2:	4603      	mov	r3, r0
 80064e4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
 80064f8:	e005      	b.n	8006506 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006512:	b004      	add	sp, #16
 8006514:	4770      	bx	lr

08006516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f023 0201 	bic.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d115      	bne.n	8006586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006566:	2001      	movs	r0, #1
 8006568:	f7fc f88e 	bl	8002688 <HAL_Delay>
      ms++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa0c 	bl	8006990 <USB_GetMode>
 8006578:	4603      	mov	r3, r0
 800657a:	2b01      	cmp	r3, #1
 800657c:	d01e      	beq.n	80065bc <USB_SetCurrentMode+0x84>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b31      	cmp	r3, #49	; 0x31
 8006582:	d9f0      	bls.n	8006566 <USB_SetCurrentMode+0x2e>
 8006584:	e01a      	b.n	80065bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d115      	bne.n	80065b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006598:	2001      	movs	r0, #1
 800659a:	f7fc f875 	bl	8002688 <HAL_Delay>
      ms++;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3301      	adds	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f9f3 	bl	8006990 <USB_GetMode>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <USB_SetCurrentMode+0x84>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b31      	cmp	r3, #49	; 0x31
 80065b4:	d9f0      	bls.n	8006598 <USB_SetCurrentMode+0x60>
 80065b6:	e001      	b.n	80065bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e005      	b.n	80065c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b32      	cmp	r3, #50	; 0x32
 80065c0:	d101      	bne.n	80065c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d0:	b084      	sub	sp, #16
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e009      	b.n	8006604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3340      	adds	r3, #64	; 0x40
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3301      	adds	r3, #1
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b0e      	cmp	r3, #14
 8006608:	d9f2      	bls.n	80065f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11c      	bne.n	800664a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800661e:	f043 0302 	orr.w	r3, r3, #2
 8006622:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006628:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	e005      	b.n	8006656 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800665c:	461a      	mov	r2, r3
 800665e:	2300      	movs	r3, #0
 8006660:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006662:	2103      	movs	r1, #3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f959 	bl	800691c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800666a:	2110      	movs	r1, #16
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f8f1 	bl	8006854 <USB_FlushTxFifo>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f91d 	bl	80068bc <USB_FlushRxFifo>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800669e:	461a      	mov	r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	461a      	mov	r2, r3
 80066ac:	2300      	movs	r3, #0
 80066ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	e043      	b.n	800673e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066cc:	d118      	bne.n	8006700 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e0:	461a      	mov	r2, r3
 80066e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	e013      	b.n	8006712 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	461a      	mov	r2, r3
 80066f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	e008      	b.n	8006712 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	461a      	mov	r2, r3
 800670e:	2300      	movs	r3, #0
 8006710:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	461a      	mov	r2, r3
 8006732:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006736:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	3301      	adds	r3, #1
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d3b7      	bcc.n	80066b6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	e043      	b.n	80067d4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006762:	d118      	bne.n	8006796 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	461a      	mov	r2, r3
 8006778:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e013      	b.n	80067a8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	e008      	b.n	80067a8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	461a      	mov	r2, r3
 80067a4:	2300      	movs	r3, #0
 80067a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	461a      	mov	r2, r3
 80067b6:	2300      	movs	r3, #0
 80067b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	3301      	adds	r3, #1
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d3b7      	bcc.n	800674c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80067fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f043 0210 	orr.w	r2, r3, #16
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	4b10      	ldr	r3, [pc, #64]	; (8006850 <USB_DevInit+0x280>)
 8006810:	4313      	orrs	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f043 0208 	orr.w	r2, r3, #8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d107      	bne.n	800683e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006836:	f043 0304 	orr.w	r3, r3, #4
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800684a:	b004      	add	sp, #16
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	803c3800 	.word	0x803c3800

08006854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a13      	ldr	r2, [pc, #76]	; (80068b8 <USB_FlushTxFifo+0x64>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d901      	bls.n	8006874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e01b      	b.n	80068ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	daf2      	bge.n	8006862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	019b      	lsls	r3, r3, #6
 8006884:	f043 0220 	orr.w	r2, r3, #32
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <USB_FlushTxFifo+0x64>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d901      	bls.n	800689e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e006      	b.n	80068ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d0f0      	beq.n	800688c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	00030d40 	.word	0x00030d40

080068bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a11      	ldr	r2, [pc, #68]	; (8006918 <USB_FlushRxFifo+0x5c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e018      	b.n	800690c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	daf2      	bge.n	80068c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2210      	movs	r2, #16
 80068ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a08      	ldr	r2, [pc, #32]	; (8006918 <USB_FlushRxFifo+0x5c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e006      	b.n	800690c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b10      	cmp	r3, #16
 8006908:	d0f0      	beq.n	80068ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	00030d40 	.word	0x00030d40

0800691c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800693c:	4313      	orrs	r3, r2
 800693e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b085      	sub	sp, #20
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f003 0301 	and.w	r3, r3, #1
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3301      	adds	r3, #1
 80069bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <USB_CoreReset+0x64>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e01b      	b.n	8006a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	daf2      	bge.n	80069b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f043 0201 	orr.w	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3301      	adds	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <USB_CoreReset+0x64>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e006      	b.n	8006a02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d0f0      	beq.n	80069e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3714      	adds	r7, #20
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	00030d40 	.word	0x00030d40

08006a14 <__cvt>:
 8006a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	ec55 4b10 	vmov	r4, r5, d0
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	460e      	mov	r6, r1
 8006a20:	4619      	mov	r1, r3
 8006a22:	462b      	mov	r3, r5
 8006a24:	bfbb      	ittet	lt
 8006a26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a2a:	461d      	movlt	r5, r3
 8006a2c:	2300      	movge	r3, #0
 8006a2e:	232d      	movlt	r3, #45	; 0x2d
 8006a30:	700b      	strb	r3, [r1, #0]
 8006a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a38:	4691      	mov	r9, r2
 8006a3a:	f023 0820 	bic.w	r8, r3, #32
 8006a3e:	bfbc      	itt	lt
 8006a40:	4622      	movlt	r2, r4
 8006a42:	4614      	movlt	r4, r2
 8006a44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a48:	d005      	beq.n	8006a56 <__cvt+0x42>
 8006a4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a4e:	d100      	bne.n	8006a52 <__cvt+0x3e>
 8006a50:	3601      	adds	r6, #1
 8006a52:	2102      	movs	r1, #2
 8006a54:	e000      	b.n	8006a58 <__cvt+0x44>
 8006a56:	2103      	movs	r1, #3
 8006a58:	ab03      	add	r3, sp, #12
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	ab02      	add	r3, sp, #8
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	ec45 4b10 	vmov	d0, r4, r5
 8006a64:	4653      	mov	r3, sl
 8006a66:	4632      	mov	r2, r6
 8006a68:	f000 feb2 	bl	80077d0 <_dtoa_r>
 8006a6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a70:	4607      	mov	r7, r0
 8006a72:	d102      	bne.n	8006a7a <__cvt+0x66>
 8006a74:	f019 0f01 	tst.w	r9, #1
 8006a78:	d022      	beq.n	8006ac0 <__cvt+0xac>
 8006a7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a7e:	eb07 0906 	add.w	r9, r7, r6
 8006a82:	d110      	bne.n	8006aa6 <__cvt+0x92>
 8006a84:	783b      	ldrb	r3, [r7, #0]
 8006a86:	2b30      	cmp	r3, #48	; 0x30
 8006a88:	d10a      	bne.n	8006aa0 <__cvt+0x8c>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7fa f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a96:	b918      	cbnz	r0, 8006aa0 <__cvt+0x8c>
 8006a98:	f1c6 0601 	rsb	r6, r6, #1
 8006a9c:	f8ca 6000 	str.w	r6, [sl]
 8006aa0:	f8da 3000 	ldr.w	r3, [sl]
 8006aa4:	4499      	add	r9, r3
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7fa f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab2:	b108      	cbz	r0, 8006ab8 <__cvt+0xa4>
 8006ab4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ab8:	2230      	movs	r2, #48	; 0x30
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	454b      	cmp	r3, r9
 8006abe:	d307      	bcc.n	8006ad0 <__cvt+0xbc>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ac4:	1bdb      	subs	r3, r3, r7
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	b004      	add	sp, #16
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	1c59      	adds	r1, r3, #1
 8006ad2:	9103      	str	r1, [sp, #12]
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e7f0      	b.n	8006aba <__cvt+0xa6>

08006ad8 <__exponent>:
 8006ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ada:	4603      	mov	r3, r0
 8006adc:	2900      	cmp	r1, #0
 8006ade:	bfb8      	it	lt
 8006ae0:	4249      	neglt	r1, r1
 8006ae2:	f803 2b02 	strb.w	r2, [r3], #2
 8006ae6:	bfb4      	ite	lt
 8006ae8:	222d      	movlt	r2, #45	; 0x2d
 8006aea:	222b      	movge	r2, #43	; 0x2b
 8006aec:	2909      	cmp	r1, #9
 8006aee:	7042      	strb	r2, [r0, #1]
 8006af0:	dd2a      	ble.n	8006b48 <__exponent+0x70>
 8006af2:	f10d 0207 	add.w	r2, sp, #7
 8006af6:	4617      	mov	r7, r2
 8006af8:	260a      	movs	r6, #10
 8006afa:	4694      	mov	ip, r2
 8006afc:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b00:	fb06 1415 	mls	r4, r6, r5, r1
 8006b04:	3430      	adds	r4, #48	; 0x30
 8006b06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	2c63      	cmp	r4, #99	; 0x63
 8006b0e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006b12:	4629      	mov	r1, r5
 8006b14:	dcf1      	bgt.n	8006afa <__exponent+0x22>
 8006b16:	3130      	adds	r1, #48	; 0x30
 8006b18:	f1ac 0402 	sub.w	r4, ip, #2
 8006b1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b20:	1c41      	adds	r1, r0, #1
 8006b22:	4622      	mov	r2, r4
 8006b24:	42ba      	cmp	r2, r7
 8006b26:	d30a      	bcc.n	8006b3e <__exponent+0x66>
 8006b28:	f10d 0209 	add.w	r2, sp, #9
 8006b2c:	eba2 020c 	sub.w	r2, r2, ip
 8006b30:	42bc      	cmp	r4, r7
 8006b32:	bf88      	it	hi
 8006b34:	2200      	movhi	r2, #0
 8006b36:	4413      	add	r3, r2
 8006b38:	1a18      	subs	r0, r3, r0
 8006b3a:	b003      	add	sp, #12
 8006b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006b42:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006b46:	e7ed      	b.n	8006b24 <__exponent+0x4c>
 8006b48:	2330      	movs	r3, #48	; 0x30
 8006b4a:	3130      	adds	r1, #48	; 0x30
 8006b4c:	7083      	strb	r3, [r0, #2]
 8006b4e:	70c1      	strb	r1, [r0, #3]
 8006b50:	1d03      	adds	r3, r0, #4
 8006b52:	e7f1      	b.n	8006b38 <__exponent+0x60>

08006b54 <_printf_float>:
 8006b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b58:	ed2d 8b02 	vpush	{d8}
 8006b5c:	b08d      	sub	sp, #52	; 0x34
 8006b5e:	460c      	mov	r4, r1
 8006b60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b64:	4616      	mov	r6, r2
 8006b66:	461f      	mov	r7, r3
 8006b68:	4605      	mov	r5, r0
 8006b6a:	f000 fd59 	bl	8007620 <_localeconv_r>
 8006b6e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b72:	4650      	mov	r0, sl
 8006b74:	f7f9 fb7c 	bl	8000270 <strlen>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	f8d8 3000 	ldr.w	r3, [r8]
 8006b84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b88:	3307      	adds	r3, #7
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	f103 0208 	add.w	r2, r3, #8
 8006b92:	f8c8 2000 	str.w	r2, [r8]
 8006b96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b9e:	9307      	str	r3, [sp, #28]
 8006ba0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ba4:	ee08 0a10 	vmov	s16, r0
 8006ba8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb0:	4b9e      	ldr	r3, [pc, #632]	; (8006e2c <_printf_float+0x2d8>)
 8006bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb6:	f7f9 ffb9 	bl	8000b2c <__aeabi_dcmpun>
 8006bba:	bb88      	cbnz	r0, 8006c20 <_printf_float+0xcc>
 8006bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc0:	4b9a      	ldr	r3, [pc, #616]	; (8006e2c <_printf_float+0x2d8>)
 8006bc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc6:	f7f9 ff93 	bl	8000af0 <__aeabi_dcmple>
 8006bca:	bb48      	cbnz	r0, 8006c20 <_printf_float+0xcc>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2300      	movs	r3, #0
 8006bd0:	4640      	mov	r0, r8
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	f7f9 ff82 	bl	8000adc <__aeabi_dcmplt>
 8006bd8:	b110      	cbz	r0, 8006be0 <_printf_float+0x8c>
 8006bda:	232d      	movs	r3, #45	; 0x2d
 8006bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be0:	4a93      	ldr	r2, [pc, #588]	; (8006e30 <_printf_float+0x2dc>)
 8006be2:	4b94      	ldr	r3, [pc, #592]	; (8006e34 <_printf_float+0x2e0>)
 8006be4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006be8:	bf94      	ite	ls
 8006bea:	4690      	movls	r8, r2
 8006bec:	4698      	movhi	r8, r3
 8006bee:	2303      	movs	r3, #3
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	9b05      	ldr	r3, [sp, #20]
 8006bf4:	f023 0304 	bic.w	r3, r3, #4
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	f04f 0900 	mov.w	r9, #0
 8006bfe:	9700      	str	r7, [sp, #0]
 8006c00:	4633      	mov	r3, r6
 8006c02:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c04:	4621      	mov	r1, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 fa82 	bl	8007110 <_printf_common>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	f040 8090 	bne.w	8006d32 <_printf_float+0x1de>
 8006c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c16:	b00d      	add	sp, #52	; 0x34
 8006c18:	ecbd 8b02 	vpop	{d8}
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 ff80 	bl	8000b2c <__aeabi_dcmpun>
 8006c2c:	b140      	cbz	r0, 8006c40 <_printf_float+0xec>
 8006c2e:	464b      	mov	r3, r9
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfbc      	itt	lt
 8006c34:	232d      	movlt	r3, #45	; 0x2d
 8006c36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c3a:	4a7f      	ldr	r2, [pc, #508]	; (8006e38 <_printf_float+0x2e4>)
 8006c3c:	4b7f      	ldr	r3, [pc, #508]	; (8006e3c <_printf_float+0x2e8>)
 8006c3e:	e7d1      	b.n	8006be4 <_printf_float+0x90>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c46:	9206      	str	r2, [sp, #24]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	d13f      	bne.n	8006ccc <_printf_float+0x178>
 8006c4c:	2306      	movs	r3, #6
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	9b05      	ldr	r3, [sp, #20]
 8006c52:	6861      	ldr	r1, [r4, #4]
 8006c54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9303      	str	r3, [sp, #12]
 8006c5c:	ab0a      	add	r3, sp, #40	; 0x28
 8006c5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c62:	ab09      	add	r3, sp, #36	; 0x24
 8006c64:	ec49 8b10 	vmov	d0, r8, r9
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c70:	4628      	mov	r0, r5
 8006c72:	f7ff fecf 	bl	8006a14 <__cvt>
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c7a:	2b47      	cmp	r3, #71	; 0x47
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	d108      	bne.n	8006c92 <_printf_float+0x13e>
 8006c80:	1cc8      	adds	r0, r1, #3
 8006c82:	db02      	blt.n	8006c8a <_printf_float+0x136>
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	4299      	cmp	r1, r3
 8006c88:	dd41      	ble.n	8006d0e <_printf_float+0x1ba>
 8006c8a:	f1ab 0302 	sub.w	r3, fp, #2
 8006c8e:	fa5f fb83 	uxtb.w	fp, r3
 8006c92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c96:	d820      	bhi.n	8006cda <_printf_float+0x186>
 8006c98:	3901      	subs	r1, #1
 8006c9a:	465a      	mov	r2, fp
 8006c9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ca0:	9109      	str	r1, [sp, #36]	; 0x24
 8006ca2:	f7ff ff19 	bl	8006ad8 <__exponent>
 8006ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ca8:	1813      	adds	r3, r2, r0
 8006caa:	2a01      	cmp	r2, #1
 8006cac:	4681      	mov	r9, r0
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	dc02      	bgt.n	8006cb8 <_printf_float+0x164>
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	07d2      	lsls	r2, r2, #31
 8006cb6:	d501      	bpl.n	8006cbc <_printf_float+0x168>
 8006cb8:	3301      	adds	r3, #1
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d09c      	beq.n	8006bfe <_printf_float+0xaa>
 8006cc4:	232d      	movs	r3, #45	; 0x2d
 8006cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cca:	e798      	b.n	8006bfe <_printf_float+0xaa>
 8006ccc:	9a06      	ldr	r2, [sp, #24]
 8006cce:	2a47      	cmp	r2, #71	; 0x47
 8006cd0:	d1be      	bne.n	8006c50 <_printf_float+0xfc>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1bc      	bne.n	8006c50 <_printf_float+0xfc>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e7b9      	b.n	8006c4e <_printf_float+0xfa>
 8006cda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cde:	d118      	bne.n	8006d12 <_printf_float+0x1be>
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	dd0b      	ble.n	8006cfe <_printf_float+0x1aa>
 8006ce6:	6121      	str	r1, [r4, #16]
 8006ce8:	b913      	cbnz	r3, 8006cf0 <_printf_float+0x19c>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	07d0      	lsls	r0, r2, #31
 8006cee:	d502      	bpl.n	8006cf6 <_printf_float+0x1a2>
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	440b      	add	r3, r1
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cf8:	f04f 0900 	mov.w	r9, #0
 8006cfc:	e7de      	b.n	8006cbc <_printf_float+0x168>
 8006cfe:	b913      	cbnz	r3, 8006d06 <_printf_float+0x1b2>
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	07d2      	lsls	r2, r2, #31
 8006d04:	d501      	bpl.n	8006d0a <_printf_float+0x1b6>
 8006d06:	3302      	adds	r3, #2
 8006d08:	e7f4      	b.n	8006cf4 <_printf_float+0x1a0>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e7f2      	b.n	8006cf4 <_printf_float+0x1a0>
 8006d0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d14:	4299      	cmp	r1, r3
 8006d16:	db05      	blt.n	8006d24 <_printf_float+0x1d0>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	6121      	str	r1, [r4, #16]
 8006d1c:	07d8      	lsls	r0, r3, #31
 8006d1e:	d5ea      	bpl.n	8006cf6 <_printf_float+0x1a2>
 8006d20:	1c4b      	adds	r3, r1, #1
 8006d22:	e7e7      	b.n	8006cf4 <_printf_float+0x1a0>
 8006d24:	2900      	cmp	r1, #0
 8006d26:	bfd4      	ite	le
 8006d28:	f1c1 0202 	rsble	r2, r1, #2
 8006d2c:	2201      	movgt	r2, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	e7e0      	b.n	8006cf4 <_printf_float+0x1a0>
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	055a      	lsls	r2, r3, #21
 8006d36:	d407      	bmi.n	8006d48 <_printf_float+0x1f4>
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	4642      	mov	r2, r8
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4628      	mov	r0, r5
 8006d40:	47b8      	blx	r7
 8006d42:	3001      	adds	r0, #1
 8006d44:	d12c      	bne.n	8006da0 <_printf_float+0x24c>
 8006d46:	e764      	b.n	8006c12 <_printf_float+0xbe>
 8006d48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d4c:	f240 80e0 	bls.w	8006f10 <_printf_float+0x3bc>
 8006d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d54:	2200      	movs	r2, #0
 8006d56:	2300      	movs	r3, #0
 8006d58:	f7f9 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d034      	beq.n	8006dca <_printf_float+0x276>
 8006d60:	4a37      	ldr	r2, [pc, #220]	; (8006e40 <_printf_float+0x2ec>)
 8006d62:	2301      	movs	r3, #1
 8006d64:	4631      	mov	r1, r6
 8006d66:	4628      	mov	r0, r5
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f43f af51 	beq.w	8006c12 <_printf_float+0xbe>
 8006d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d74:	429a      	cmp	r2, r3
 8006d76:	db02      	blt.n	8006d7e <_printf_float+0x22a>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	07d8      	lsls	r0, r3, #31
 8006d7c:	d510      	bpl.n	8006da0 <_printf_float+0x24c>
 8006d7e:	ee18 3a10 	vmov	r3, s16
 8006d82:	4652      	mov	r2, sl
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f43f af41 	beq.w	8006c12 <_printf_float+0xbe>
 8006d90:	f04f 0800 	mov.w	r8, #0
 8006d94:	f104 091a 	add.w	r9, r4, #26
 8006d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4543      	cmp	r3, r8
 8006d9e:	dc09      	bgt.n	8006db4 <_printf_float+0x260>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	079b      	lsls	r3, r3, #30
 8006da4:	f100 8107 	bmi.w	8006fb6 <_printf_float+0x462>
 8006da8:	68e0      	ldr	r0, [r4, #12]
 8006daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dac:	4298      	cmp	r0, r3
 8006dae:	bfb8      	it	lt
 8006db0:	4618      	movlt	r0, r3
 8006db2:	e730      	b.n	8006c16 <_printf_float+0xc2>
 8006db4:	2301      	movs	r3, #1
 8006db6:	464a      	mov	r2, r9
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af27 	beq.w	8006c12 <_printf_float+0xbe>
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	e7e6      	b.n	8006d98 <_printf_float+0x244>
 8006dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dc39      	bgt.n	8006e44 <_printf_float+0x2f0>
 8006dd0:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <_printf_float+0x2ec>)
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f af19 	beq.w	8006c12 <_printf_float+0xbe>
 8006de0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d102      	bne.n	8006dee <_printf_float+0x29a>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	d5d8      	bpl.n	8006da0 <_printf_float+0x24c>
 8006dee:	ee18 3a10 	vmov	r3, s16
 8006df2:	4652      	mov	r2, sl
 8006df4:	4631      	mov	r1, r6
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b8      	blx	r7
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	f43f af09 	beq.w	8006c12 <_printf_float+0xbe>
 8006e00:	f04f 0900 	mov.w	r9, #0
 8006e04:	f104 0a1a 	add.w	sl, r4, #26
 8006e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0a:	425b      	negs	r3, r3
 8006e0c:	454b      	cmp	r3, r9
 8006e0e:	dc01      	bgt.n	8006e14 <_printf_float+0x2c0>
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	e792      	b.n	8006d3a <_printf_float+0x1e6>
 8006e14:	2301      	movs	r3, #1
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f aef7 	beq.w	8006c12 <_printf_float+0xbe>
 8006e24:	f109 0901 	add.w	r9, r9, #1
 8006e28:	e7ee      	b.n	8006e08 <_printf_float+0x2b4>
 8006e2a:	bf00      	nop
 8006e2c:	7fefffff 	.word	0x7fefffff
 8006e30:	080099b0 	.word	0x080099b0
 8006e34:	080099b4 	.word	0x080099b4
 8006e38:	080099b8 	.word	0x080099b8
 8006e3c:	080099bc 	.word	0x080099bc
 8006e40:	080099c0 	.word	0x080099c0
 8006e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	bfa8      	it	ge
 8006e4c:	461a      	movge	r2, r3
 8006e4e:	2a00      	cmp	r2, #0
 8006e50:	4691      	mov	r9, r2
 8006e52:	dc37      	bgt.n	8006ec4 <_printf_float+0x370>
 8006e54:	f04f 0b00 	mov.w	fp, #0
 8006e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e5c:	f104 021a 	add.w	r2, r4, #26
 8006e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e62:	9305      	str	r3, [sp, #20]
 8006e64:	eba3 0309 	sub.w	r3, r3, r9
 8006e68:	455b      	cmp	r3, fp
 8006e6a:	dc33      	bgt.n	8006ed4 <_printf_float+0x380>
 8006e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e70:	429a      	cmp	r2, r3
 8006e72:	db3b      	blt.n	8006eec <_printf_float+0x398>
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	07da      	lsls	r2, r3, #31
 8006e78:	d438      	bmi.n	8006eec <_printf_float+0x398>
 8006e7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006e7e:	eba2 0903 	sub.w	r9, r2, r3
 8006e82:	9b05      	ldr	r3, [sp, #20]
 8006e84:	1ad2      	subs	r2, r2, r3
 8006e86:	4591      	cmp	r9, r2
 8006e88:	bfa8      	it	ge
 8006e8a:	4691      	movge	r9, r2
 8006e8c:	f1b9 0f00 	cmp.w	r9, #0
 8006e90:	dc35      	bgt.n	8006efe <_printf_float+0x3aa>
 8006e92:	f04f 0800 	mov.w	r8, #0
 8006e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e9a:	f104 0a1a 	add.w	sl, r4, #26
 8006e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	eba3 0309 	sub.w	r3, r3, r9
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	f77f af79 	ble.w	8006da0 <_printf_float+0x24c>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4652      	mov	r2, sl
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f aeaa 	beq.w	8006c12 <_printf_float+0xbe>
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	e7ec      	b.n	8006e9e <_printf_float+0x34a>
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4642      	mov	r2, r8
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d1c0      	bne.n	8006e54 <_printf_float+0x300>
 8006ed2:	e69e      	b.n	8006c12 <_printf_float+0xbe>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	9205      	str	r2, [sp, #20]
 8006edc:	47b8      	blx	r7
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f43f ae97 	beq.w	8006c12 <_printf_float+0xbe>
 8006ee4:	9a05      	ldr	r2, [sp, #20]
 8006ee6:	f10b 0b01 	add.w	fp, fp, #1
 8006eea:	e7b9      	b.n	8006e60 <_printf_float+0x30c>
 8006eec:	ee18 3a10 	vmov	r3, s16
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	47b8      	blx	r7
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d1be      	bne.n	8006e7a <_printf_float+0x326>
 8006efc:	e689      	b.n	8006c12 <_printf_float+0xbe>
 8006efe:	9a05      	ldr	r2, [sp, #20]
 8006f00:	464b      	mov	r3, r9
 8006f02:	4442      	add	r2, r8
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	d1c1      	bne.n	8006e92 <_printf_float+0x33e>
 8006f0e:	e680      	b.n	8006c12 <_printf_float+0xbe>
 8006f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f12:	2a01      	cmp	r2, #1
 8006f14:	dc01      	bgt.n	8006f1a <_printf_float+0x3c6>
 8006f16:	07db      	lsls	r3, r3, #31
 8006f18:	d53a      	bpl.n	8006f90 <_printf_float+0x43c>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f ae74 	beq.w	8006c12 <_printf_float+0xbe>
 8006f2a:	ee18 3a10 	vmov	r3, s16
 8006f2e:	4652      	mov	r2, sl
 8006f30:	4631      	mov	r1, r6
 8006f32:	4628      	mov	r0, r5
 8006f34:	47b8      	blx	r7
 8006f36:	3001      	adds	r0, #1
 8006f38:	f43f ae6b 	beq.w	8006c12 <_printf_float+0xbe>
 8006f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f40:	2200      	movs	r2, #0
 8006f42:	2300      	movs	r3, #0
 8006f44:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006f48:	f7f9 fdbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f4c:	b9d8      	cbnz	r0, 8006f86 <_printf_float+0x432>
 8006f4e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006f52:	f108 0201 	add.w	r2, r8, #1
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d10e      	bne.n	8006f7e <_printf_float+0x42a>
 8006f60:	e657      	b.n	8006c12 <_printf_float+0xbe>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4652      	mov	r2, sl
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f ae50 	beq.w	8006c12 <_printf_float+0xbe>
 8006f72:	f108 0801 	add.w	r8, r8, #1
 8006f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	4543      	cmp	r3, r8
 8006f7c:	dcf1      	bgt.n	8006f62 <_printf_float+0x40e>
 8006f7e:	464b      	mov	r3, r9
 8006f80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f84:	e6da      	b.n	8006d3c <_printf_float+0x1e8>
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	f104 0a1a 	add.w	sl, r4, #26
 8006f8e:	e7f2      	b.n	8006f76 <_printf_float+0x422>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4642      	mov	r2, r8
 8006f94:	e7df      	b.n	8006f56 <_printf_float+0x402>
 8006f96:	2301      	movs	r3, #1
 8006f98:	464a      	mov	r2, r9
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae36 	beq.w	8006c12 <_printf_float+0xbe>
 8006fa6:	f108 0801 	add.w	r8, r8, #1
 8006faa:	68e3      	ldr	r3, [r4, #12]
 8006fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fae:	1a5b      	subs	r3, r3, r1
 8006fb0:	4543      	cmp	r3, r8
 8006fb2:	dcf0      	bgt.n	8006f96 <_printf_float+0x442>
 8006fb4:	e6f8      	b.n	8006da8 <_printf_float+0x254>
 8006fb6:	f04f 0800 	mov.w	r8, #0
 8006fba:	f104 0919 	add.w	r9, r4, #25
 8006fbe:	e7f4      	b.n	8006faa <_printf_float+0x456>

08006fc0 <malloc>:
 8006fc0:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <malloc+0xc>)
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f000 b823 	b.w	8007010 <_malloc_r>
 8006fca:	bf00      	nop
 8006fcc:	200000e4 	.word	0x200000e4

08006fd0 <sbrk_aligned>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4e0e      	ldr	r6, [pc, #56]	; (800700c <sbrk_aligned+0x3c>)
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	6831      	ldr	r1, [r6, #0]
 8006fd8:	4605      	mov	r5, r0
 8006fda:	b911      	cbnz	r1, 8006fe2 <sbrk_aligned+0x12>
 8006fdc:	f000 fb24 	bl	8007628 <_sbrk_r>
 8006fe0:	6030      	str	r0, [r6, #0]
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 fb1f 	bl	8007628 <_sbrk_r>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d00a      	beq.n	8007004 <sbrk_aligned+0x34>
 8006fee:	1cc4      	adds	r4, r0, #3
 8006ff0:	f024 0403 	bic.w	r4, r4, #3
 8006ff4:	42a0      	cmp	r0, r4
 8006ff6:	d007      	beq.n	8007008 <sbrk_aligned+0x38>
 8006ff8:	1a21      	subs	r1, r4, r0
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f000 fb14 	bl	8007628 <_sbrk_r>
 8007000:	3001      	adds	r0, #1
 8007002:	d101      	bne.n	8007008 <sbrk_aligned+0x38>
 8007004:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007008:	4620      	mov	r0, r4
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	20000ac8 	.word	0x20000ac8

08007010 <_malloc_r>:
 8007010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007014:	1ccd      	adds	r5, r1, #3
 8007016:	f025 0503 	bic.w	r5, r5, #3
 800701a:	3508      	adds	r5, #8
 800701c:	2d0c      	cmp	r5, #12
 800701e:	bf38      	it	cc
 8007020:	250c      	movcc	r5, #12
 8007022:	2d00      	cmp	r5, #0
 8007024:	4607      	mov	r7, r0
 8007026:	db01      	blt.n	800702c <_malloc_r+0x1c>
 8007028:	42a9      	cmp	r1, r5
 800702a:	d905      	bls.n	8007038 <_malloc_r+0x28>
 800702c:	230c      	movs	r3, #12
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	2600      	movs	r6, #0
 8007032:	4630      	mov	r0, r6
 8007034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007038:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800710c <_malloc_r+0xfc>
 800703c:	f000 fa2c 	bl	8007498 <__malloc_lock>
 8007040:	f8d8 3000 	ldr.w	r3, [r8]
 8007044:	461c      	mov	r4, r3
 8007046:	bb5c      	cbnz	r4, 80070a0 <_malloc_r+0x90>
 8007048:	4629      	mov	r1, r5
 800704a:	4638      	mov	r0, r7
 800704c:	f7ff ffc0 	bl	8006fd0 <sbrk_aligned>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	4604      	mov	r4, r0
 8007054:	d155      	bne.n	8007102 <_malloc_r+0xf2>
 8007056:	f8d8 4000 	ldr.w	r4, [r8]
 800705a:	4626      	mov	r6, r4
 800705c:	2e00      	cmp	r6, #0
 800705e:	d145      	bne.n	80070ec <_malloc_r+0xdc>
 8007060:	2c00      	cmp	r4, #0
 8007062:	d048      	beq.n	80070f6 <_malloc_r+0xe6>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	4631      	mov	r1, r6
 8007068:	4638      	mov	r0, r7
 800706a:	eb04 0903 	add.w	r9, r4, r3
 800706e:	f000 fadb 	bl	8007628 <_sbrk_r>
 8007072:	4581      	cmp	r9, r0
 8007074:	d13f      	bne.n	80070f6 <_malloc_r+0xe6>
 8007076:	6821      	ldr	r1, [r4, #0]
 8007078:	1a6d      	subs	r5, r5, r1
 800707a:	4629      	mov	r1, r5
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff ffa7 	bl	8006fd0 <sbrk_aligned>
 8007082:	3001      	adds	r0, #1
 8007084:	d037      	beq.n	80070f6 <_malloc_r+0xe6>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	442b      	add	r3, r5
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	f8d8 3000 	ldr.w	r3, [r8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d038      	beq.n	8007106 <_malloc_r+0xf6>
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	42a2      	cmp	r2, r4
 8007098:	d12b      	bne.n	80070f2 <_malloc_r+0xe2>
 800709a:	2200      	movs	r2, #0
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	e00f      	b.n	80070c0 <_malloc_r+0xb0>
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	1b52      	subs	r2, r2, r5
 80070a4:	d41f      	bmi.n	80070e6 <_malloc_r+0xd6>
 80070a6:	2a0b      	cmp	r2, #11
 80070a8:	d917      	bls.n	80070da <_malloc_r+0xca>
 80070aa:	1961      	adds	r1, r4, r5
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	6025      	str	r5, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	6059      	strne	r1, [r3, #4]
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	bf08      	it	eq
 80070b8:	f8c8 1000 	streq.w	r1, [r8]
 80070bc:	5162      	str	r2, [r4, r5]
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	4638      	mov	r0, r7
 80070c2:	f104 060b 	add.w	r6, r4, #11
 80070c6:	f000 f9ed 	bl	80074a4 <__malloc_unlock>
 80070ca:	f026 0607 	bic.w	r6, r6, #7
 80070ce:	1d23      	adds	r3, r4, #4
 80070d0:	1af2      	subs	r2, r6, r3
 80070d2:	d0ae      	beq.n	8007032 <_malloc_r+0x22>
 80070d4:	1b9b      	subs	r3, r3, r6
 80070d6:	50a3      	str	r3, [r4, r2]
 80070d8:	e7ab      	b.n	8007032 <_malloc_r+0x22>
 80070da:	42a3      	cmp	r3, r4
 80070dc:	6862      	ldr	r2, [r4, #4]
 80070de:	d1dd      	bne.n	800709c <_malloc_r+0x8c>
 80070e0:	f8c8 2000 	str.w	r2, [r8]
 80070e4:	e7ec      	b.n	80070c0 <_malloc_r+0xb0>
 80070e6:	4623      	mov	r3, r4
 80070e8:	6864      	ldr	r4, [r4, #4]
 80070ea:	e7ac      	b.n	8007046 <_malloc_r+0x36>
 80070ec:	4634      	mov	r4, r6
 80070ee:	6876      	ldr	r6, [r6, #4]
 80070f0:	e7b4      	b.n	800705c <_malloc_r+0x4c>
 80070f2:	4613      	mov	r3, r2
 80070f4:	e7cc      	b.n	8007090 <_malloc_r+0x80>
 80070f6:	230c      	movs	r3, #12
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4638      	mov	r0, r7
 80070fc:	f000 f9d2 	bl	80074a4 <__malloc_unlock>
 8007100:	e797      	b.n	8007032 <_malloc_r+0x22>
 8007102:	6025      	str	r5, [r4, #0]
 8007104:	e7dc      	b.n	80070c0 <_malloc_r+0xb0>
 8007106:	605b      	str	r3, [r3, #4]
 8007108:	deff      	udf	#255	; 0xff
 800710a:	bf00      	nop
 800710c:	20000ac4 	.word	0x20000ac4

08007110 <_printf_common>:
 8007110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	4616      	mov	r6, r2
 8007116:	4699      	mov	r9, r3
 8007118:	688a      	ldr	r2, [r1, #8]
 800711a:	690b      	ldr	r3, [r1, #16]
 800711c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007120:	4293      	cmp	r3, r2
 8007122:	bfb8      	it	lt
 8007124:	4613      	movlt	r3, r2
 8007126:	6033      	str	r3, [r6, #0]
 8007128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800712c:	4607      	mov	r7, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b10a      	cbz	r2, 8007136 <_printf_common+0x26>
 8007132:	3301      	adds	r3, #1
 8007134:	6033      	str	r3, [r6, #0]
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	0699      	lsls	r1, r3, #26
 800713a:	bf42      	ittt	mi
 800713c:	6833      	ldrmi	r3, [r6, #0]
 800713e:	3302      	addmi	r3, #2
 8007140:	6033      	strmi	r3, [r6, #0]
 8007142:	6825      	ldr	r5, [r4, #0]
 8007144:	f015 0506 	ands.w	r5, r5, #6
 8007148:	d106      	bne.n	8007158 <_printf_common+0x48>
 800714a:	f104 0a19 	add.w	sl, r4, #25
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	6832      	ldr	r2, [r6, #0]
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	42ab      	cmp	r3, r5
 8007156:	dc26      	bgt.n	80071a6 <_printf_common+0x96>
 8007158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800715c:	1e13      	subs	r3, r2, #0
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	bf18      	it	ne
 8007162:	2301      	movne	r3, #1
 8007164:	0692      	lsls	r2, r2, #26
 8007166:	d42b      	bmi.n	80071c0 <_printf_common+0xb0>
 8007168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800716c:	4649      	mov	r1, r9
 800716e:	4638      	mov	r0, r7
 8007170:	47c0      	blx	r8
 8007172:	3001      	adds	r0, #1
 8007174:	d01e      	beq.n	80071b4 <_printf_common+0xa4>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	6922      	ldr	r2, [r4, #16]
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	2b04      	cmp	r3, #4
 8007180:	bf02      	ittt	eq
 8007182:	68e5      	ldreq	r5, [r4, #12]
 8007184:	6833      	ldreq	r3, [r6, #0]
 8007186:	1aed      	subeq	r5, r5, r3
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	bf0c      	ite	eq
 800718c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007190:	2500      	movne	r5, #0
 8007192:	4293      	cmp	r3, r2
 8007194:	bfc4      	itt	gt
 8007196:	1a9b      	subgt	r3, r3, r2
 8007198:	18ed      	addgt	r5, r5, r3
 800719a:	2600      	movs	r6, #0
 800719c:	341a      	adds	r4, #26
 800719e:	42b5      	cmp	r5, r6
 80071a0:	d11a      	bne.n	80071d8 <_printf_common+0xc8>
 80071a2:	2000      	movs	r0, #0
 80071a4:	e008      	b.n	80071b8 <_printf_common+0xa8>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4652      	mov	r2, sl
 80071aa:	4649      	mov	r1, r9
 80071ac:	4638      	mov	r0, r7
 80071ae:	47c0      	blx	r8
 80071b0:	3001      	adds	r0, #1
 80071b2:	d103      	bne.n	80071bc <_printf_common+0xac>
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071bc:	3501      	adds	r5, #1
 80071be:	e7c6      	b.n	800714e <_printf_common+0x3e>
 80071c0:	18e1      	adds	r1, r4, r3
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	2030      	movs	r0, #48	; 0x30
 80071c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071ca:	4422      	add	r2, r4
 80071cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071d4:	3302      	adds	r3, #2
 80071d6:	e7c7      	b.n	8007168 <_printf_common+0x58>
 80071d8:	2301      	movs	r3, #1
 80071da:	4622      	mov	r2, r4
 80071dc:	4649      	mov	r1, r9
 80071de:	4638      	mov	r0, r7
 80071e0:	47c0      	blx	r8
 80071e2:	3001      	adds	r0, #1
 80071e4:	d0e6      	beq.n	80071b4 <_printf_common+0xa4>
 80071e6:	3601      	adds	r6, #1
 80071e8:	e7d9      	b.n	800719e <_printf_common+0x8e>
	...

080071ec <_printf_i>:
 80071ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	7e0f      	ldrb	r7, [r1, #24]
 80071f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071f4:	2f78      	cmp	r7, #120	; 0x78
 80071f6:	4691      	mov	r9, r2
 80071f8:	4680      	mov	r8, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	469a      	mov	sl, r3
 80071fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007202:	d807      	bhi.n	8007214 <_printf_i+0x28>
 8007204:	2f62      	cmp	r7, #98	; 0x62
 8007206:	d80a      	bhi.n	800721e <_printf_i+0x32>
 8007208:	2f00      	cmp	r7, #0
 800720a:	f000 80d4 	beq.w	80073b6 <_printf_i+0x1ca>
 800720e:	2f58      	cmp	r7, #88	; 0x58
 8007210:	f000 80c0 	beq.w	8007394 <_printf_i+0x1a8>
 8007214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800721c:	e03a      	b.n	8007294 <_printf_i+0xa8>
 800721e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007222:	2b15      	cmp	r3, #21
 8007224:	d8f6      	bhi.n	8007214 <_printf_i+0x28>
 8007226:	a101      	add	r1, pc, #4	; (adr r1, 800722c <_printf_i+0x40>)
 8007228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800722c:	08007285 	.word	0x08007285
 8007230:	08007299 	.word	0x08007299
 8007234:	08007215 	.word	0x08007215
 8007238:	08007215 	.word	0x08007215
 800723c:	08007215 	.word	0x08007215
 8007240:	08007215 	.word	0x08007215
 8007244:	08007299 	.word	0x08007299
 8007248:	08007215 	.word	0x08007215
 800724c:	08007215 	.word	0x08007215
 8007250:	08007215 	.word	0x08007215
 8007254:	08007215 	.word	0x08007215
 8007258:	0800739d 	.word	0x0800739d
 800725c:	080072c5 	.word	0x080072c5
 8007260:	08007357 	.word	0x08007357
 8007264:	08007215 	.word	0x08007215
 8007268:	08007215 	.word	0x08007215
 800726c:	080073bf 	.word	0x080073bf
 8007270:	08007215 	.word	0x08007215
 8007274:	080072c5 	.word	0x080072c5
 8007278:	08007215 	.word	0x08007215
 800727c:	08007215 	.word	0x08007215
 8007280:	0800735f 	.word	0x0800735f
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	1d1a      	adds	r2, r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	602a      	str	r2, [r5, #0]
 800728c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007294:	2301      	movs	r3, #1
 8007296:	e09f      	b.n	80073d8 <_printf_i+0x1ec>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	682b      	ldr	r3, [r5, #0]
 800729c:	0607      	lsls	r7, r0, #24
 800729e:	f103 0104 	add.w	r1, r3, #4
 80072a2:	6029      	str	r1, [r5, #0]
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0xbe>
 80072a6:	681e      	ldr	r6, [r3, #0]
 80072a8:	e003      	b.n	80072b2 <_printf_i+0xc6>
 80072aa:	0646      	lsls	r6, r0, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0xba>
 80072ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072b2:	2e00      	cmp	r6, #0
 80072b4:	da03      	bge.n	80072be <_printf_i+0xd2>
 80072b6:	232d      	movs	r3, #45	; 0x2d
 80072b8:	4276      	negs	r6, r6
 80072ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072be:	485a      	ldr	r0, [pc, #360]	; (8007428 <_printf_i+0x23c>)
 80072c0:	230a      	movs	r3, #10
 80072c2:	e012      	b.n	80072ea <_printf_i+0xfe>
 80072c4:	682b      	ldr	r3, [r5, #0]
 80072c6:	6820      	ldr	r0, [r4, #0]
 80072c8:	1d19      	adds	r1, r3, #4
 80072ca:	6029      	str	r1, [r5, #0]
 80072cc:	0605      	lsls	r5, r0, #24
 80072ce:	d501      	bpl.n	80072d4 <_printf_i+0xe8>
 80072d0:	681e      	ldr	r6, [r3, #0]
 80072d2:	e002      	b.n	80072da <_printf_i+0xee>
 80072d4:	0641      	lsls	r1, r0, #25
 80072d6:	d5fb      	bpl.n	80072d0 <_printf_i+0xe4>
 80072d8:	881e      	ldrh	r6, [r3, #0]
 80072da:	4853      	ldr	r0, [pc, #332]	; (8007428 <_printf_i+0x23c>)
 80072dc:	2f6f      	cmp	r7, #111	; 0x6f
 80072de:	bf0c      	ite	eq
 80072e0:	2308      	moveq	r3, #8
 80072e2:	230a      	movne	r3, #10
 80072e4:	2100      	movs	r1, #0
 80072e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072ea:	6865      	ldr	r5, [r4, #4]
 80072ec:	60a5      	str	r5, [r4, #8]
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	bfa2      	ittt	ge
 80072f2:	6821      	ldrge	r1, [r4, #0]
 80072f4:	f021 0104 	bicge.w	r1, r1, #4
 80072f8:	6021      	strge	r1, [r4, #0]
 80072fa:	b90e      	cbnz	r6, 8007300 <_printf_i+0x114>
 80072fc:	2d00      	cmp	r5, #0
 80072fe:	d04b      	beq.n	8007398 <_printf_i+0x1ac>
 8007300:	4615      	mov	r5, r2
 8007302:	fbb6 f1f3 	udiv	r1, r6, r3
 8007306:	fb03 6711 	mls	r7, r3, r1, r6
 800730a:	5dc7      	ldrb	r7, [r0, r7]
 800730c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007310:	4637      	mov	r7, r6
 8007312:	42bb      	cmp	r3, r7
 8007314:	460e      	mov	r6, r1
 8007316:	d9f4      	bls.n	8007302 <_printf_i+0x116>
 8007318:	2b08      	cmp	r3, #8
 800731a:	d10b      	bne.n	8007334 <_printf_i+0x148>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	07de      	lsls	r6, r3, #31
 8007320:	d508      	bpl.n	8007334 <_printf_i+0x148>
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6861      	ldr	r1, [r4, #4]
 8007326:	4299      	cmp	r1, r3
 8007328:	bfde      	ittt	le
 800732a:	2330      	movle	r3, #48	; 0x30
 800732c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007330:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007334:	1b52      	subs	r2, r2, r5
 8007336:	6122      	str	r2, [r4, #16]
 8007338:	f8cd a000 	str.w	sl, [sp]
 800733c:	464b      	mov	r3, r9
 800733e:	aa03      	add	r2, sp, #12
 8007340:	4621      	mov	r1, r4
 8007342:	4640      	mov	r0, r8
 8007344:	f7ff fee4 	bl	8007110 <_printf_common>
 8007348:	3001      	adds	r0, #1
 800734a:	d14a      	bne.n	80073e2 <_printf_i+0x1f6>
 800734c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007350:	b004      	add	sp, #16
 8007352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f043 0320 	orr.w	r3, r3, #32
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	4833      	ldr	r0, [pc, #204]	; (800742c <_printf_i+0x240>)
 8007360:	2778      	movs	r7, #120	; 0x78
 8007362:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	6829      	ldr	r1, [r5, #0]
 800736a:	061f      	lsls	r7, r3, #24
 800736c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007370:	d402      	bmi.n	8007378 <_printf_i+0x18c>
 8007372:	065f      	lsls	r7, r3, #25
 8007374:	bf48      	it	mi
 8007376:	b2b6      	uxthmi	r6, r6
 8007378:	07df      	lsls	r7, r3, #31
 800737a:	bf48      	it	mi
 800737c:	f043 0320 	orrmi.w	r3, r3, #32
 8007380:	6029      	str	r1, [r5, #0]
 8007382:	bf48      	it	mi
 8007384:	6023      	strmi	r3, [r4, #0]
 8007386:	b91e      	cbnz	r6, 8007390 <_printf_i+0x1a4>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	f023 0320 	bic.w	r3, r3, #32
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	2310      	movs	r3, #16
 8007392:	e7a7      	b.n	80072e4 <_printf_i+0xf8>
 8007394:	4824      	ldr	r0, [pc, #144]	; (8007428 <_printf_i+0x23c>)
 8007396:	e7e4      	b.n	8007362 <_printf_i+0x176>
 8007398:	4615      	mov	r5, r2
 800739a:	e7bd      	b.n	8007318 <_printf_i+0x12c>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	6826      	ldr	r6, [r4, #0]
 80073a0:	6961      	ldr	r1, [r4, #20]
 80073a2:	1d18      	adds	r0, r3, #4
 80073a4:	6028      	str	r0, [r5, #0]
 80073a6:	0635      	lsls	r5, r6, #24
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	d501      	bpl.n	80073b0 <_printf_i+0x1c4>
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <_printf_i+0x1ca>
 80073b0:	0670      	lsls	r0, r6, #25
 80073b2:	d5fb      	bpl.n	80073ac <_printf_i+0x1c0>
 80073b4:	8019      	strh	r1, [r3, #0]
 80073b6:	2300      	movs	r3, #0
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	4615      	mov	r5, r2
 80073bc:	e7bc      	b.n	8007338 <_printf_i+0x14c>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	681d      	ldr	r5, [r3, #0]
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7f8 ff00 	bl	80001d0 <memchr>
 80073d0:	b108      	cbz	r0, 80073d6 <_printf_i+0x1ea>
 80073d2:	1b40      	subs	r0, r0, r5
 80073d4:	6060      	str	r0, [r4, #4]
 80073d6:	6863      	ldr	r3, [r4, #4]
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	2300      	movs	r3, #0
 80073dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e0:	e7aa      	b.n	8007338 <_printf_i+0x14c>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4649      	mov	r1, r9
 80073e8:	4640      	mov	r0, r8
 80073ea:	47d0      	blx	sl
 80073ec:	3001      	adds	r0, #1
 80073ee:	d0ad      	beq.n	800734c <_printf_i+0x160>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	079b      	lsls	r3, r3, #30
 80073f4:	d413      	bmi.n	800741e <_printf_i+0x232>
 80073f6:	68e0      	ldr	r0, [r4, #12]
 80073f8:	9b03      	ldr	r3, [sp, #12]
 80073fa:	4298      	cmp	r0, r3
 80073fc:	bfb8      	it	lt
 80073fe:	4618      	movlt	r0, r3
 8007400:	e7a6      	b.n	8007350 <_printf_i+0x164>
 8007402:	2301      	movs	r3, #1
 8007404:	4632      	mov	r2, r6
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	d09d      	beq.n	800734c <_printf_i+0x160>
 8007410:	3501      	adds	r5, #1
 8007412:	68e3      	ldr	r3, [r4, #12]
 8007414:	9903      	ldr	r1, [sp, #12]
 8007416:	1a5b      	subs	r3, r3, r1
 8007418:	42ab      	cmp	r3, r5
 800741a:	dcf2      	bgt.n	8007402 <_printf_i+0x216>
 800741c:	e7eb      	b.n	80073f6 <_printf_i+0x20a>
 800741e:	2500      	movs	r5, #0
 8007420:	f104 0619 	add.w	r6, r4, #25
 8007424:	e7f5      	b.n	8007412 <_printf_i+0x226>
 8007426:	bf00      	nop
 8007428:	080099c2 	.word	0x080099c2
 800742c:	080099d3 	.word	0x080099d3

08007430 <sniprintf>:
 8007430:	b40c      	push	{r2, r3}
 8007432:	b530      	push	{r4, r5, lr}
 8007434:	4b17      	ldr	r3, [pc, #92]	; (8007494 <sniprintf+0x64>)
 8007436:	1e0c      	subs	r4, r1, #0
 8007438:	681d      	ldr	r5, [r3, #0]
 800743a:	b09d      	sub	sp, #116	; 0x74
 800743c:	da08      	bge.n	8007450 <sniprintf+0x20>
 800743e:	238b      	movs	r3, #139	; 0x8b
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007446:	b01d      	add	sp, #116	; 0x74
 8007448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800744c:	b002      	add	sp, #8
 800744e:	4770      	bx	lr
 8007450:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007454:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007458:	bf14      	ite	ne
 800745a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800745e:	4623      	moveq	r3, r4
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	9307      	str	r3, [sp, #28]
 8007464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007468:	9002      	str	r0, [sp, #8]
 800746a:	9006      	str	r0, [sp, #24]
 800746c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007472:	ab21      	add	r3, sp, #132	; 0x84
 8007474:	a902      	add	r1, sp, #8
 8007476:	4628      	mov	r0, r5
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	f001 f841 	bl	8008500 <_svfiprintf_r>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	bfbc      	itt	lt
 8007482:	238b      	movlt	r3, #139	; 0x8b
 8007484:	602b      	strlt	r3, [r5, #0]
 8007486:	2c00      	cmp	r4, #0
 8007488:	d0dd      	beq.n	8007446 <sniprintf+0x16>
 800748a:	9b02      	ldr	r3, [sp, #8]
 800748c:	2200      	movs	r2, #0
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	e7d9      	b.n	8007446 <sniprintf+0x16>
 8007492:	bf00      	nop
 8007494:	200000e4 	.word	0x200000e4

08007498 <__malloc_lock>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__malloc_lock+0x8>)
 800749a:	f000 b8ff 	b.w	800769c <__retarget_lock_acquire_recursive>
 800749e:	bf00      	nop
 80074a0:	20000c08 	.word	0x20000c08

080074a4 <__malloc_unlock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__malloc_unlock+0x8>)
 80074a6:	f000 b8fa 	b.w	800769e <__retarget_lock_release_recursive>
 80074aa:	bf00      	nop
 80074ac:	20000c08 	.word	0x20000c08

080074b0 <std>:
 80074b0:	2300      	movs	r3, #0
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	e9c0 3300 	strd	r3, r3, [r0]
 80074ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074be:	6083      	str	r3, [r0, #8]
 80074c0:	8181      	strh	r1, [r0, #12]
 80074c2:	6643      	str	r3, [r0, #100]	; 0x64
 80074c4:	81c2      	strh	r2, [r0, #14]
 80074c6:	6183      	str	r3, [r0, #24]
 80074c8:	4619      	mov	r1, r3
 80074ca:	2208      	movs	r2, #8
 80074cc:	305c      	adds	r0, #92	; 0x5c
 80074ce:	f000 f89f 	bl	8007610 <memset>
 80074d2:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <std+0x38>)
 80074d4:	6263      	str	r3, [r4, #36]	; 0x24
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <std+0x3c>)
 80074d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <std+0x40>)
 80074dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074de:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <std+0x44>)
 80074e0:	6224      	str	r4, [r4, #32]
 80074e2:	6323      	str	r3, [r4, #48]	; 0x30
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	08008f51 	.word	0x08008f51
 80074ec:	08008f73 	.word	0x08008f73
 80074f0:	08008fab 	.word	0x08008fab
 80074f4:	08008fcf 	.word	0x08008fcf

080074f8 <stdio_exit_handler>:
 80074f8:	4a02      	ldr	r2, [pc, #8]	; (8007504 <stdio_exit_handler+0xc>)
 80074fa:	4903      	ldr	r1, [pc, #12]	; (8007508 <stdio_exit_handler+0x10>)
 80074fc:	4803      	ldr	r0, [pc, #12]	; (800750c <stdio_exit_handler+0x14>)
 80074fe:	f000 b869 	b.w	80075d4 <_fwalk_sglue>
 8007502:	bf00      	nop
 8007504:	2000008c 	.word	0x2000008c
 8007508:	08008809 	.word	0x08008809
 800750c:	20000098 	.word	0x20000098

08007510 <cleanup_stdio>:
 8007510:	6841      	ldr	r1, [r0, #4]
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <cleanup_stdio+0x34>)
 8007514:	4299      	cmp	r1, r3
 8007516:	b510      	push	{r4, lr}
 8007518:	4604      	mov	r4, r0
 800751a:	d001      	beq.n	8007520 <cleanup_stdio+0x10>
 800751c:	f001 f974 	bl	8008808 <_fflush_r>
 8007520:	68a1      	ldr	r1, [r4, #8]
 8007522:	4b09      	ldr	r3, [pc, #36]	; (8007548 <cleanup_stdio+0x38>)
 8007524:	4299      	cmp	r1, r3
 8007526:	d002      	beq.n	800752e <cleanup_stdio+0x1e>
 8007528:	4620      	mov	r0, r4
 800752a:	f001 f96d 	bl	8008808 <_fflush_r>
 800752e:	68e1      	ldr	r1, [r4, #12]
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <cleanup_stdio+0x3c>)
 8007532:	4299      	cmp	r1, r3
 8007534:	d004      	beq.n	8007540 <cleanup_stdio+0x30>
 8007536:	4620      	mov	r0, r4
 8007538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800753c:	f001 b964 	b.w	8008808 <_fflush_r>
 8007540:	bd10      	pop	{r4, pc}
 8007542:	bf00      	nop
 8007544:	20000acc 	.word	0x20000acc
 8007548:	20000b34 	.word	0x20000b34
 800754c:	20000b9c 	.word	0x20000b9c

08007550 <global_stdio_init.part.0>:
 8007550:	b510      	push	{r4, lr}
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <global_stdio_init.part.0+0x30>)
 8007554:	4c0b      	ldr	r4, [pc, #44]	; (8007584 <global_stdio_init.part.0+0x34>)
 8007556:	4a0c      	ldr	r2, [pc, #48]	; (8007588 <global_stdio_init.part.0+0x38>)
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	4620      	mov	r0, r4
 800755c:	2200      	movs	r2, #0
 800755e:	2104      	movs	r1, #4
 8007560:	f7ff ffa6 	bl	80074b0 <std>
 8007564:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007568:	2201      	movs	r2, #1
 800756a:	2109      	movs	r1, #9
 800756c:	f7ff ffa0 	bl	80074b0 <std>
 8007570:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007574:	2202      	movs	r2, #2
 8007576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757a:	2112      	movs	r1, #18
 800757c:	f7ff bf98 	b.w	80074b0 <std>
 8007580:	20000c04 	.word	0x20000c04
 8007584:	20000acc 	.word	0x20000acc
 8007588:	080074f9 	.word	0x080074f9

0800758c <__sfp_lock_acquire>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__sfp_lock_acquire+0x8>)
 800758e:	f000 b885 	b.w	800769c <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	20000c09 	.word	0x20000c09

08007598 <__sfp_lock_release>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__sfp_lock_release+0x8>)
 800759a:	f000 b880 	b.w	800769e <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	20000c09 	.word	0x20000c09

080075a4 <__sinit>:
 80075a4:	b510      	push	{r4, lr}
 80075a6:	4604      	mov	r4, r0
 80075a8:	f7ff fff0 	bl	800758c <__sfp_lock_acquire>
 80075ac:	6a23      	ldr	r3, [r4, #32]
 80075ae:	b11b      	cbz	r3, 80075b8 <__sinit+0x14>
 80075b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b4:	f7ff bff0 	b.w	8007598 <__sfp_lock_release>
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <__sinit+0x28>)
 80075ba:	6223      	str	r3, [r4, #32]
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <__sinit+0x2c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1f5      	bne.n	80075b0 <__sinit+0xc>
 80075c4:	f7ff ffc4 	bl	8007550 <global_stdio_init.part.0>
 80075c8:	e7f2      	b.n	80075b0 <__sinit+0xc>
 80075ca:	bf00      	nop
 80075cc:	08007511 	.word	0x08007511
 80075d0:	20000c04 	.word	0x20000c04

080075d4 <_fwalk_sglue>:
 80075d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d8:	4607      	mov	r7, r0
 80075da:	4688      	mov	r8, r1
 80075dc:	4614      	mov	r4, r2
 80075de:	2600      	movs	r6, #0
 80075e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075e4:	f1b9 0901 	subs.w	r9, r9, #1
 80075e8:	d505      	bpl.n	80075f6 <_fwalk_sglue+0x22>
 80075ea:	6824      	ldr	r4, [r4, #0]
 80075ec:	2c00      	cmp	r4, #0
 80075ee:	d1f7      	bne.n	80075e0 <_fwalk_sglue+0xc>
 80075f0:	4630      	mov	r0, r6
 80075f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d907      	bls.n	800760c <_fwalk_sglue+0x38>
 80075fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007600:	3301      	adds	r3, #1
 8007602:	d003      	beq.n	800760c <_fwalk_sglue+0x38>
 8007604:	4629      	mov	r1, r5
 8007606:	4638      	mov	r0, r7
 8007608:	47c0      	blx	r8
 800760a:	4306      	orrs	r6, r0
 800760c:	3568      	adds	r5, #104	; 0x68
 800760e:	e7e9      	b.n	80075e4 <_fwalk_sglue+0x10>

08007610 <memset>:
 8007610:	4402      	add	r2, r0
 8007612:	4603      	mov	r3, r0
 8007614:	4293      	cmp	r3, r2
 8007616:	d100      	bne.n	800761a <memset+0xa>
 8007618:	4770      	bx	lr
 800761a:	f803 1b01 	strb.w	r1, [r3], #1
 800761e:	e7f9      	b.n	8007614 <memset+0x4>

08007620 <_localeconv_r>:
 8007620:	4800      	ldr	r0, [pc, #0]	; (8007624 <_localeconv_r+0x4>)
 8007622:	4770      	bx	lr
 8007624:	200001d8 	.word	0x200001d8

08007628 <_sbrk_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d06      	ldr	r5, [pc, #24]	; (8007644 <_sbrk_r+0x1c>)
 800762c:	2300      	movs	r3, #0
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	f7fa fc84 	bl	8001f40 <_sbrk>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_sbrk_r+0x1a>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_sbrk_r+0x1a>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	20000c0c 	.word	0x20000c0c

08007648 <__errno>:
 8007648:	4b01      	ldr	r3, [pc, #4]	; (8007650 <__errno+0x8>)
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	200000e4 	.word	0x200000e4

08007654 <__libc_init_array>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	4d0d      	ldr	r5, [pc, #52]	; (800768c <__libc_init_array+0x38>)
 8007658:	4c0d      	ldr	r4, [pc, #52]	; (8007690 <__libc_init_array+0x3c>)
 800765a:	1b64      	subs	r4, r4, r5
 800765c:	10a4      	asrs	r4, r4, #2
 800765e:	2600      	movs	r6, #0
 8007660:	42a6      	cmp	r6, r4
 8007662:	d109      	bne.n	8007678 <__libc_init_array+0x24>
 8007664:	4d0b      	ldr	r5, [pc, #44]	; (8007694 <__libc_init_array+0x40>)
 8007666:	4c0c      	ldr	r4, [pc, #48]	; (8007698 <__libc_init_array+0x44>)
 8007668:	f002 f960 	bl	800992c <_init>
 800766c:	1b64      	subs	r4, r4, r5
 800766e:	10a4      	asrs	r4, r4, #2
 8007670:	2600      	movs	r6, #0
 8007672:	42a6      	cmp	r6, r4
 8007674:	d105      	bne.n	8007682 <__libc_init_array+0x2e>
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	f855 3b04 	ldr.w	r3, [r5], #4
 800767c:	4798      	blx	r3
 800767e:	3601      	adds	r6, #1
 8007680:	e7ee      	b.n	8007660 <__libc_init_array+0xc>
 8007682:	f855 3b04 	ldr.w	r3, [r5], #4
 8007686:	4798      	blx	r3
 8007688:	3601      	adds	r6, #1
 800768a:	e7f2      	b.n	8007672 <__libc_init_array+0x1e>
 800768c:	08009d2c 	.word	0x08009d2c
 8007690:	08009d2c 	.word	0x08009d2c
 8007694:	08009d2c 	.word	0x08009d2c
 8007698:	08009d30 	.word	0x08009d30

0800769c <__retarget_lock_acquire_recursive>:
 800769c:	4770      	bx	lr

0800769e <__retarget_lock_release_recursive>:
 800769e:	4770      	bx	lr

080076a0 <memcpy>:
 80076a0:	440a      	add	r2, r1
 80076a2:	4291      	cmp	r1, r2
 80076a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076a8:	d100      	bne.n	80076ac <memcpy+0xc>
 80076aa:	4770      	bx	lr
 80076ac:	b510      	push	{r4, lr}
 80076ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b6:	4291      	cmp	r1, r2
 80076b8:	d1f9      	bne.n	80076ae <memcpy+0xe>
 80076ba:	bd10      	pop	{r4, pc}

080076bc <quorem>:
 80076bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	6903      	ldr	r3, [r0, #16]
 80076c2:	690c      	ldr	r4, [r1, #16]
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	4607      	mov	r7, r0
 80076c8:	db7e      	blt.n	80077c8 <quorem+0x10c>
 80076ca:	3c01      	subs	r4, #1
 80076cc:	f101 0814 	add.w	r8, r1, #20
 80076d0:	f100 0514 	add.w	r5, r0, #20
 80076d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e2:	3301      	adds	r3, #1
 80076e4:	429a      	cmp	r2, r3
 80076e6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80076f2:	d331      	bcc.n	8007758 <quorem+0x9c>
 80076f4:	f04f 0e00 	mov.w	lr, #0
 80076f8:	4640      	mov	r0, r8
 80076fa:	46ac      	mov	ip, r5
 80076fc:	46f2      	mov	sl, lr
 80076fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8007702:	b293      	uxth	r3, r2
 8007704:	fb06 e303 	mla	r3, r6, r3, lr
 8007708:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800770c:	0c1a      	lsrs	r2, r3, #16
 800770e:	b29b      	uxth	r3, r3
 8007710:	ebaa 0303 	sub.w	r3, sl, r3
 8007714:	f8dc a000 	ldr.w	sl, [ip]
 8007718:	fa13 f38a 	uxtah	r3, r3, sl
 800771c:	fb06 220e 	mla	r2, r6, lr, r2
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007728:	b292      	uxth	r2, r2
 800772a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800772e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007732:	f8bd 3000 	ldrh.w	r3, [sp]
 8007736:	4581      	cmp	r9, r0
 8007738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800773c:	f84c 3b04 	str.w	r3, [ip], #4
 8007740:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007744:	d2db      	bcs.n	80076fe <quorem+0x42>
 8007746:	f855 300b 	ldr.w	r3, [r5, fp]
 800774a:	b92b      	cbnz	r3, 8007758 <quorem+0x9c>
 800774c:	9b01      	ldr	r3, [sp, #4]
 800774e:	3b04      	subs	r3, #4
 8007750:	429d      	cmp	r5, r3
 8007752:	461a      	mov	r2, r3
 8007754:	d32c      	bcc.n	80077b0 <quorem+0xf4>
 8007756:	613c      	str	r4, [r7, #16]
 8007758:	4638      	mov	r0, r7
 800775a:	f001 faf9 	bl	8008d50 <__mcmp>
 800775e:	2800      	cmp	r0, #0
 8007760:	db22      	blt.n	80077a8 <quorem+0xec>
 8007762:	3601      	adds	r6, #1
 8007764:	4629      	mov	r1, r5
 8007766:	2000      	movs	r0, #0
 8007768:	f858 2b04 	ldr.w	r2, [r8], #4
 800776c:	f8d1 c000 	ldr.w	ip, [r1]
 8007770:	b293      	uxth	r3, r2
 8007772:	1ac3      	subs	r3, r0, r3
 8007774:	0c12      	lsrs	r2, r2, #16
 8007776:	fa13 f38c 	uxtah	r3, r3, ip
 800777a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800777e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007782:	b29b      	uxth	r3, r3
 8007784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007788:	45c1      	cmp	r9, r8
 800778a:	f841 3b04 	str.w	r3, [r1], #4
 800778e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007792:	d2e9      	bcs.n	8007768 <quorem+0xac>
 8007794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007798:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779c:	b922      	cbnz	r2, 80077a8 <quorem+0xec>
 800779e:	3b04      	subs	r3, #4
 80077a0:	429d      	cmp	r5, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	d30a      	bcc.n	80077bc <quorem+0x100>
 80077a6:	613c      	str	r4, [r7, #16]
 80077a8:	4630      	mov	r0, r6
 80077aa:	b003      	add	sp, #12
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	3b04      	subs	r3, #4
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	d1ce      	bne.n	8007756 <quorem+0x9a>
 80077b8:	3c01      	subs	r4, #1
 80077ba:	e7c9      	b.n	8007750 <quorem+0x94>
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	3b04      	subs	r3, #4
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	d1f0      	bne.n	80077a6 <quorem+0xea>
 80077c4:	3c01      	subs	r4, #1
 80077c6:	e7eb      	b.n	80077a0 <quorem+0xe4>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e7ee      	b.n	80077aa <quorem+0xee>
 80077cc:	0000      	movs	r0, r0
	...

080077d0 <_dtoa_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	ed2d 8b04 	vpush	{d8-d9}
 80077d8:	69c5      	ldr	r5, [r0, #28]
 80077da:	b093      	sub	sp, #76	; 0x4c
 80077dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077e0:	ec57 6b10 	vmov	r6, r7, d0
 80077e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077e8:	9107      	str	r1, [sp, #28]
 80077ea:	4604      	mov	r4, r0
 80077ec:	920a      	str	r2, [sp, #40]	; 0x28
 80077ee:	930d      	str	r3, [sp, #52]	; 0x34
 80077f0:	b975      	cbnz	r5, 8007810 <_dtoa_r+0x40>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f7ff fbe4 	bl	8006fc0 <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	61e0      	str	r0, [r4, #28]
 80077fc:	b920      	cbnz	r0, 8007808 <_dtoa_r+0x38>
 80077fe:	4bae      	ldr	r3, [pc, #696]	; (8007ab8 <_dtoa_r+0x2e8>)
 8007800:	21ef      	movs	r1, #239	; 0xef
 8007802:	48ae      	ldr	r0, [pc, #696]	; (8007abc <_dtoa_r+0x2ec>)
 8007804:	f001 fc76 	bl	80090f4 <__assert_func>
 8007808:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800780c:	6005      	str	r5, [r0, #0]
 800780e:	60c5      	str	r5, [r0, #12]
 8007810:	69e3      	ldr	r3, [r4, #28]
 8007812:	6819      	ldr	r1, [r3, #0]
 8007814:	b151      	cbz	r1, 800782c <_dtoa_r+0x5c>
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	604a      	str	r2, [r1, #4]
 800781a:	2301      	movs	r3, #1
 800781c:	4093      	lsls	r3, r2
 800781e:	608b      	str	r3, [r1, #8]
 8007820:	4620      	mov	r0, r4
 8007822:	f001 f859 	bl	80088d8 <_Bfree>
 8007826:	69e3      	ldr	r3, [r4, #28]
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	1e3b      	subs	r3, r7, #0
 800782e:	bfbb      	ittet	lt
 8007830:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007834:	9303      	strlt	r3, [sp, #12]
 8007836:	2300      	movge	r3, #0
 8007838:	2201      	movlt	r2, #1
 800783a:	bfac      	ite	ge
 800783c:	f8c8 3000 	strge.w	r3, [r8]
 8007840:	f8c8 2000 	strlt.w	r2, [r8]
 8007844:	4b9e      	ldr	r3, [pc, #632]	; (8007ac0 <_dtoa_r+0x2f0>)
 8007846:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800784a:	ea33 0308 	bics.w	r3, r3, r8
 800784e:	d11b      	bne.n	8007888 <_dtoa_r+0xb8>
 8007850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007852:	f242 730f 	movw	r3, #9999	; 0x270f
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800785c:	4333      	orrs	r3, r6
 800785e:	f000 8593 	beq.w	8008388 <_dtoa_r+0xbb8>
 8007862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007864:	b963      	cbnz	r3, 8007880 <_dtoa_r+0xb0>
 8007866:	4b97      	ldr	r3, [pc, #604]	; (8007ac4 <_dtoa_r+0x2f4>)
 8007868:	e027      	b.n	80078ba <_dtoa_r+0xea>
 800786a:	4b97      	ldr	r3, [pc, #604]	; (8007ac8 <_dtoa_r+0x2f8>)
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	9800      	ldr	r0, [sp, #0]
 8007876:	b013      	add	sp, #76	; 0x4c
 8007878:	ecbd 8b04 	vpop	{d8-d9}
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	4b90      	ldr	r3, [pc, #576]	; (8007ac4 <_dtoa_r+0x2f4>)
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	3303      	adds	r3, #3
 8007886:	e7f3      	b.n	8007870 <_dtoa_r+0xa0>
 8007888:	ed9d 7b02 	vldr	d7, [sp, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	ec51 0b17 	vmov	r0, r1, d7
 8007892:	eeb0 8a47 	vmov.f32	s16, s14
 8007896:	eef0 8a67 	vmov.f32	s17, s15
 800789a:	2300      	movs	r3, #0
 800789c:	f7f9 f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a0:	4681      	mov	r9, r0
 80078a2:	b160      	cbz	r0, 80078be <_dtoa_r+0xee>
 80078a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a6:	2301      	movs	r3, #1
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8568 	beq.w	8008382 <_dtoa_r+0xbb2>
 80078b2:	4b86      	ldr	r3, [pc, #536]	; (8007acc <_dtoa_r+0x2fc>)
 80078b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	e7da      	b.n	8007874 <_dtoa_r+0xa4>
 80078be:	aa10      	add	r2, sp, #64	; 0x40
 80078c0:	a911      	add	r1, sp, #68	; 0x44
 80078c2:	4620      	mov	r0, r4
 80078c4:	eeb0 0a48 	vmov.f32	s0, s16
 80078c8:	eef0 0a68 	vmov.f32	s1, s17
 80078cc:	f001 fae6 	bl	8008e9c <__d2b>
 80078d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80078d4:	4682      	mov	sl, r0
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	d07f      	beq.n	80079da <_dtoa_r+0x20a>
 80078da:	ee18 3a90 	vmov	r3, s17
 80078de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80078e6:	ec51 0b18 	vmov	r0, r1, d8
 80078ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80078ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80078f6:	4619      	mov	r1, r3
 80078f8:	2200      	movs	r2, #0
 80078fa:	4b75      	ldr	r3, [pc, #468]	; (8007ad0 <_dtoa_r+0x300>)
 80078fc:	f7f8 fcc4 	bl	8000288 <__aeabi_dsub>
 8007900:	a367      	add	r3, pc, #412	; (adr r3, 8007aa0 <_dtoa_r+0x2d0>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f7f8 fe77 	bl	80005f8 <__aeabi_dmul>
 800790a:	a367      	add	r3, pc, #412	; (adr r3, 8007aa8 <_dtoa_r+0x2d8>)
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f7f8 fcbc 	bl	800028c <__adddf3>
 8007914:	4606      	mov	r6, r0
 8007916:	4628      	mov	r0, r5
 8007918:	460f      	mov	r7, r1
 800791a:	f7f8 fe03 	bl	8000524 <__aeabi_i2d>
 800791e:	a364      	add	r3, pc, #400	; (adr r3, 8007ab0 <_dtoa_r+0x2e0>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fe68 	bl	80005f8 <__aeabi_dmul>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f8 fcac 	bl	800028c <__adddf3>
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	f7f9 f90e 	bl	8000b58 <__aeabi_d2iz>
 800793c:	2200      	movs	r2, #0
 800793e:	4683      	mov	fp, r0
 8007940:	2300      	movs	r3, #0
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	f7f9 f8c9 	bl	8000adc <__aeabi_dcmplt>
 800794a:	b148      	cbz	r0, 8007960 <_dtoa_r+0x190>
 800794c:	4658      	mov	r0, fp
 800794e:	f7f8 fde9 	bl	8000524 <__aeabi_i2d>
 8007952:	4632      	mov	r2, r6
 8007954:	463b      	mov	r3, r7
 8007956:	f7f9 f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800795a:	b908      	cbnz	r0, 8007960 <_dtoa_r+0x190>
 800795c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007960:	f1bb 0f16 	cmp.w	fp, #22
 8007964:	d857      	bhi.n	8007a16 <_dtoa_r+0x246>
 8007966:	4b5b      	ldr	r3, [pc, #364]	; (8007ad4 <_dtoa_r+0x304>)
 8007968:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	ec51 0b18 	vmov	r0, r1, d8
 8007974:	f7f9 f8b2 	bl	8000adc <__aeabi_dcmplt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d04e      	beq.n	8007a1a <_dtoa_r+0x24a>
 800797c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007980:	2300      	movs	r3, #0
 8007982:	930c      	str	r3, [sp, #48]	; 0x30
 8007984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007986:	1b5b      	subs	r3, r3, r5
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	bf45      	ittet	mi
 800798c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007990:	9305      	strmi	r3, [sp, #20]
 8007992:	2300      	movpl	r3, #0
 8007994:	2300      	movmi	r3, #0
 8007996:	9206      	str	r2, [sp, #24]
 8007998:	bf54      	ite	pl
 800799a:	9305      	strpl	r3, [sp, #20]
 800799c:	9306      	strmi	r3, [sp, #24]
 800799e:	f1bb 0f00 	cmp.w	fp, #0
 80079a2:	db3c      	blt.n	8007a1e <_dtoa_r+0x24e>
 80079a4:	9b06      	ldr	r3, [sp, #24]
 80079a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80079aa:	445b      	add	r3, fp
 80079ac:	9306      	str	r3, [sp, #24]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9308      	str	r3, [sp, #32]
 80079b2:	9b07      	ldr	r3, [sp, #28]
 80079b4:	2b09      	cmp	r3, #9
 80079b6:	d868      	bhi.n	8007a8a <_dtoa_r+0x2ba>
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	bfc4      	itt	gt
 80079bc:	3b04      	subgt	r3, #4
 80079be:	9307      	strgt	r3, [sp, #28]
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	f1a3 0302 	sub.w	r3, r3, #2
 80079c6:	bfcc      	ite	gt
 80079c8:	2500      	movgt	r5, #0
 80079ca:	2501      	movle	r5, #1
 80079cc:	2b03      	cmp	r3, #3
 80079ce:	f200 8085 	bhi.w	8007adc <_dtoa_r+0x30c>
 80079d2:	e8df f003 	tbb	[pc, r3]
 80079d6:	3b2e      	.short	0x3b2e
 80079d8:	5839      	.short	0x5839
 80079da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079de:	441d      	add	r5, r3
 80079e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	bfc1      	itttt	gt
 80079e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80079f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80079f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80079f8:	bfd6      	itet	le
 80079fa:	f1c3 0320 	rsble	r3, r3, #32
 80079fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007a02:	fa06 f003 	lslle.w	r0, r6, r3
 8007a06:	f7f8 fd7d 	bl	8000504 <__aeabi_ui2d>
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007a10:	3d01      	subs	r5, #1
 8007a12:	920e      	str	r2, [sp, #56]	; 0x38
 8007a14:	e76f      	b.n	80078f6 <_dtoa_r+0x126>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e7b3      	b.n	8007982 <_dtoa_r+0x1b2>
 8007a1a:	900c      	str	r0, [sp, #48]	; 0x30
 8007a1c:	e7b2      	b.n	8007984 <_dtoa_r+0x1b4>
 8007a1e:	9b05      	ldr	r3, [sp, #20]
 8007a20:	eba3 030b 	sub.w	r3, r3, fp
 8007a24:	9305      	str	r3, [sp, #20]
 8007a26:	f1cb 0300 	rsb	r3, fp, #0
 8007a2a:	9308      	str	r3, [sp, #32]
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a30:	e7bf      	b.n	80079b2 <_dtoa_r+0x1e2>
 8007a32:	2300      	movs	r3, #0
 8007a34:	9309      	str	r3, [sp, #36]	; 0x24
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dc52      	bgt.n	8007ae2 <_dtoa_r+0x312>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	461a      	mov	r2, r3
 8007a44:	920a      	str	r2, [sp, #40]	; 0x28
 8007a46:	e00b      	b.n	8007a60 <_dtoa_r+0x290>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e7f3      	b.n	8007a34 <_dtoa_r+0x264>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a52:	445b      	add	r3, fp
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	3301      	adds	r3, #1
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	9304      	str	r3, [sp, #16]
 8007a5c:	bfb8      	it	lt
 8007a5e:	2301      	movlt	r3, #1
 8007a60:	69e0      	ldr	r0, [r4, #28]
 8007a62:	2100      	movs	r1, #0
 8007a64:	2204      	movs	r2, #4
 8007a66:	f102 0614 	add.w	r6, r2, #20
 8007a6a:	429e      	cmp	r6, r3
 8007a6c:	d93d      	bls.n	8007aea <_dtoa_r+0x31a>
 8007a6e:	6041      	str	r1, [r0, #4]
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fef1 	bl	8008858 <_Balloc>
 8007a76:	9000      	str	r0, [sp, #0]
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d139      	bne.n	8007af0 <_dtoa_r+0x320>
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <_dtoa_r+0x308>)
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f240 11af 	movw	r1, #431	; 0x1af
 8007a84:	e6bd      	b.n	8007802 <_dtoa_r+0x32>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7e1      	b.n	8007a4e <_dtoa_r+0x27e>
 8007a8a:	2501      	movs	r5, #1
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	9509      	str	r5, [sp, #36]	; 0x24
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2312      	movs	r3, #18
 8007a9e:	e7d1      	b.n	8007a44 <_dtoa_r+0x274>
 8007aa0:	636f4361 	.word	0x636f4361
 8007aa4:	3fd287a7 	.word	0x3fd287a7
 8007aa8:	8b60c8b3 	.word	0x8b60c8b3
 8007aac:	3fc68a28 	.word	0x3fc68a28
 8007ab0:	509f79fb 	.word	0x509f79fb
 8007ab4:	3fd34413 	.word	0x3fd34413
 8007ab8:	080099f1 	.word	0x080099f1
 8007abc:	08009a08 	.word	0x08009a08
 8007ac0:	7ff00000 	.word	0x7ff00000
 8007ac4:	080099ed 	.word	0x080099ed
 8007ac8:	080099e4 	.word	0x080099e4
 8007acc:	080099c1 	.word	0x080099c1
 8007ad0:	3ff80000 	.word	0x3ff80000
 8007ad4:	08009b08 	.word	0x08009b08
 8007ad8:	08009a60 	.word	0x08009a60
 8007adc:	2301      	movs	r3, #1
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	e7d7      	b.n	8007a92 <_dtoa_r+0x2c2>
 8007ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	9304      	str	r3, [sp, #16]
 8007ae8:	e7ba      	b.n	8007a60 <_dtoa_r+0x290>
 8007aea:	3101      	adds	r1, #1
 8007aec:	0052      	lsls	r2, r2, #1
 8007aee:	e7ba      	b.n	8007a66 <_dtoa_r+0x296>
 8007af0:	69e3      	ldr	r3, [r4, #28]
 8007af2:	9a00      	ldr	r2, [sp, #0]
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	2b0e      	cmp	r3, #14
 8007afa:	f200 80a8 	bhi.w	8007c4e <_dtoa_r+0x47e>
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	f000 80a5 	beq.w	8007c4e <_dtoa_r+0x47e>
 8007b04:	f1bb 0f00 	cmp.w	fp, #0
 8007b08:	dd38      	ble.n	8007b7c <_dtoa_r+0x3ac>
 8007b0a:	4bc0      	ldr	r3, [pc, #768]	; (8007e0c <_dtoa_r+0x63c>)
 8007b0c:	f00b 020f 	and.w	r2, fp, #15
 8007b10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007b18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007b1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007b20:	d019      	beq.n	8007b56 <_dtoa_r+0x386>
 8007b22:	4bbb      	ldr	r3, [pc, #748]	; (8007e10 <_dtoa_r+0x640>)
 8007b24:	ec51 0b18 	vmov	r0, r1, d8
 8007b28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b2c:	f7f8 fe8e 	bl	800084c <__aeabi_ddiv>
 8007b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b34:	f008 080f 	and.w	r8, r8, #15
 8007b38:	2503      	movs	r5, #3
 8007b3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007e10 <_dtoa_r+0x640>
 8007b3e:	f1b8 0f00 	cmp.w	r8, #0
 8007b42:	d10a      	bne.n	8007b5a <_dtoa_r+0x38a>
 8007b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b48:	4632      	mov	r2, r6
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	f7f8 fe7e 	bl	800084c <__aeabi_ddiv>
 8007b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b54:	e02b      	b.n	8007bae <_dtoa_r+0x3de>
 8007b56:	2502      	movs	r5, #2
 8007b58:	e7ef      	b.n	8007b3a <_dtoa_r+0x36a>
 8007b5a:	f018 0f01 	tst.w	r8, #1
 8007b5e:	d008      	beq.n	8007b72 <_dtoa_r+0x3a2>
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007b68:	f7f8 fd46 	bl	80005f8 <__aeabi_dmul>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007b76:	f109 0908 	add.w	r9, r9, #8
 8007b7a:	e7e0      	b.n	8007b3e <_dtoa_r+0x36e>
 8007b7c:	f000 809f 	beq.w	8007cbe <_dtoa_r+0x4ee>
 8007b80:	f1cb 0600 	rsb	r6, fp, #0
 8007b84:	4ba1      	ldr	r3, [pc, #644]	; (8007e0c <_dtoa_r+0x63c>)
 8007b86:	4fa2      	ldr	r7, [pc, #648]	; (8007e10 <_dtoa_r+0x640>)
 8007b88:	f006 020f 	and.w	r2, r6, #15
 8007b8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	ec51 0b18 	vmov	r0, r1, d8
 8007b98:	f7f8 fd2e 	bl	80005f8 <__aeabi_dmul>
 8007b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ba0:	1136      	asrs	r6, r6, #4
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2502      	movs	r5, #2
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	d17e      	bne.n	8007ca8 <_dtoa_r+0x4d8>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1d0      	bne.n	8007b50 <_dtoa_r+0x380>
 8007bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8084 	beq.w	8007cc2 <_dtoa_r+0x4f2>
 8007bba:	4b96      	ldr	r3, [pc, #600]	; (8007e14 <_dtoa_r+0x644>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d07b      	beq.n	8007cc2 <_dtoa_r+0x4f2>
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d078      	beq.n	8007cc2 <_dtoa_r+0x4f2>
 8007bd0:	9b01      	ldr	r3, [sp, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dd39      	ble.n	8007c4a <_dtoa_r+0x47a>
 8007bd6:	4b90      	ldr	r3, [pc, #576]	; (8007e18 <_dtoa_r+0x648>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fd0b 	bl	80005f8 <__aeabi_dmul>
 8007be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be6:	9e01      	ldr	r6, [sp, #4]
 8007be8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007bec:	3501      	adds	r5, #1
 8007bee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f7f8 fc96 	bl	8000524 <__aeabi_i2d>
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	464b      	mov	r3, r9
 8007bfc:	f7f8 fcfc 	bl	80005f8 <__aeabi_dmul>
 8007c00:	4b86      	ldr	r3, [pc, #536]	; (8007e1c <_dtoa_r+0x64c>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f7f8 fb42 	bl	800028c <__adddf3>
 8007c08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	d158      	bne.n	8007cc8 <_dtoa_r+0x4f8>
 8007c16:	4b82      	ldr	r3, [pc, #520]	; (8007e20 <_dtoa_r+0x650>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb33 	bl	8000288 <__aeabi_dsub>
 8007c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c26:	4680      	mov	r8, r0
 8007c28:	4689      	mov	r9, r1
 8007c2a:	f7f8 ff75 	bl	8000b18 <__aeabi_dcmpgt>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	f040 8296 	bne.w	8008160 <_dtoa_r+0x990>
 8007c34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f040 8289 	bne.w	800815c <_dtoa_r+0x98c>
 8007c4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f2c0 814e 	blt.w	8007ef2 <_dtoa_r+0x722>
 8007c56:	f1bb 0f0e 	cmp.w	fp, #14
 8007c5a:	f300 814a 	bgt.w	8007ef2 <_dtoa_r+0x722>
 8007c5e:	4b6b      	ldr	r3, [pc, #428]	; (8007e0c <_dtoa_r+0x63c>)
 8007c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f280 80dc 	bge.w	8007e28 <_dtoa_r+0x658>
 8007c70:	9b04      	ldr	r3, [sp, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f300 80d8 	bgt.w	8007e28 <_dtoa_r+0x658>
 8007c78:	f040 826f 	bne.w	800815a <_dtoa_r+0x98a>
 8007c7c:	4b68      	ldr	r3, [pc, #416]	; (8007e20 <_dtoa_r+0x650>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4640      	mov	r0, r8
 8007c82:	4649      	mov	r1, r9
 8007c84:	f7f8 fcb8 	bl	80005f8 <__aeabi_dmul>
 8007c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c8c:	f7f8 ff3a 	bl	8000b04 <__aeabi_dcmpge>
 8007c90:	9e04      	ldr	r6, [sp, #16]
 8007c92:	4637      	mov	r7, r6
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f040 8245 	bne.w	8008124 <_dtoa_r+0x954>
 8007c9a:	9d00      	ldr	r5, [sp, #0]
 8007c9c:	2331      	movs	r3, #49	; 0x31
 8007c9e:	f805 3b01 	strb.w	r3, [r5], #1
 8007ca2:	f10b 0b01 	add.w	fp, fp, #1
 8007ca6:	e241      	b.n	800812c <_dtoa_r+0x95c>
 8007ca8:	07f2      	lsls	r2, r6, #31
 8007caa:	d505      	bpl.n	8007cb8 <_dtoa_r+0x4e8>
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	f7f8 fca2 	bl	80005f8 <__aeabi_dmul>
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	1076      	asrs	r6, r6, #1
 8007cba:	3708      	adds	r7, #8
 8007cbc:	e773      	b.n	8007ba6 <_dtoa_r+0x3d6>
 8007cbe:	2502      	movs	r5, #2
 8007cc0:	e775      	b.n	8007bae <_dtoa_r+0x3de>
 8007cc2:	9e04      	ldr	r6, [sp, #16]
 8007cc4:	465f      	mov	r7, fp
 8007cc6:	e792      	b.n	8007bee <_dtoa_r+0x41e>
 8007cc8:	9900      	ldr	r1, [sp, #0]
 8007cca:	4b50      	ldr	r3, [pc, #320]	; (8007e0c <_dtoa_r+0x63c>)
 8007ccc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007cd0:	4431      	add	r1, r6
 8007cd2:	9102      	str	r1, [sp, #8]
 8007cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cd6:	eeb0 9a47 	vmov.f32	s18, s14
 8007cda:	eef0 9a67 	vmov.f32	s19, s15
 8007cde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ce6:	2900      	cmp	r1, #0
 8007ce8:	d044      	beq.n	8007d74 <_dtoa_r+0x5a4>
 8007cea:	494e      	ldr	r1, [pc, #312]	; (8007e24 <_dtoa_r+0x654>)
 8007cec:	2000      	movs	r0, #0
 8007cee:	f7f8 fdad 	bl	800084c <__aeabi_ddiv>
 8007cf2:	ec53 2b19 	vmov	r2, r3, d9
 8007cf6:	f7f8 fac7 	bl	8000288 <__aeabi_dsub>
 8007cfa:	9d00      	ldr	r5, [sp, #0]
 8007cfc:	ec41 0b19 	vmov	d9, r0, r1
 8007d00:	4649      	mov	r1, r9
 8007d02:	4640      	mov	r0, r8
 8007d04:	f7f8 ff28 	bl	8000b58 <__aeabi_d2iz>
 8007d08:	4606      	mov	r6, r0
 8007d0a:	f7f8 fc0b 	bl	8000524 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fab7 	bl	8000288 <__aeabi_dsub>
 8007d1a:	3630      	adds	r6, #48	; 0x30
 8007d1c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d20:	ec53 2b19 	vmov	r2, r3, d9
 8007d24:	4680      	mov	r8, r0
 8007d26:	4689      	mov	r9, r1
 8007d28:	f7f8 fed8 	bl	8000adc <__aeabi_dcmplt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d164      	bne.n	8007dfa <_dtoa_r+0x62a>
 8007d30:	4642      	mov	r2, r8
 8007d32:	464b      	mov	r3, r9
 8007d34:	4937      	ldr	r1, [pc, #220]	; (8007e14 <_dtoa_r+0x644>)
 8007d36:	2000      	movs	r0, #0
 8007d38:	f7f8 faa6 	bl	8000288 <__aeabi_dsub>
 8007d3c:	ec53 2b19 	vmov	r2, r3, d9
 8007d40:	f7f8 fecc 	bl	8000adc <__aeabi_dcmplt>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f040 80b6 	bne.w	8007eb6 <_dtoa_r+0x6e6>
 8007d4a:	9b02      	ldr	r3, [sp, #8]
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	f43f af7c 	beq.w	8007c4a <_dtoa_r+0x47a>
 8007d52:	4b31      	ldr	r3, [pc, #196]	; (8007e18 <_dtoa_r+0x648>)
 8007d54:	ec51 0b19 	vmov	r0, r1, d9
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f7f8 fc4d 	bl	80005f8 <__aeabi_dmul>
 8007d5e:	4b2e      	ldr	r3, [pc, #184]	; (8007e18 <_dtoa_r+0x648>)
 8007d60:	ec41 0b19 	vmov	d9, r0, r1
 8007d64:	2200      	movs	r2, #0
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fc45 	bl	80005f8 <__aeabi_dmul>
 8007d6e:	4680      	mov	r8, r0
 8007d70:	4689      	mov	r9, r1
 8007d72:	e7c5      	b.n	8007d00 <_dtoa_r+0x530>
 8007d74:	ec51 0b17 	vmov	r0, r1, d7
 8007d78:	f7f8 fc3e 	bl	80005f8 <__aeabi_dmul>
 8007d7c:	9b02      	ldr	r3, [sp, #8]
 8007d7e:	9d00      	ldr	r5, [sp, #0]
 8007d80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d82:	ec41 0b19 	vmov	d9, r0, r1
 8007d86:	4649      	mov	r1, r9
 8007d88:	4640      	mov	r0, r8
 8007d8a:	f7f8 fee5 	bl	8000b58 <__aeabi_d2iz>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	f7f8 fbc8 	bl	8000524 <__aeabi_i2d>
 8007d94:	3630      	adds	r6, #48	; 0x30
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f7f8 fa73 	bl	8000288 <__aeabi_dsub>
 8007da2:	f805 6b01 	strb.w	r6, [r5], #1
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	429d      	cmp	r5, r3
 8007daa:	4680      	mov	r8, r0
 8007dac:	4689      	mov	r9, r1
 8007dae:	f04f 0200 	mov.w	r2, #0
 8007db2:	d124      	bne.n	8007dfe <_dtoa_r+0x62e>
 8007db4:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <_dtoa_r+0x654>)
 8007db6:	ec51 0b19 	vmov	r0, r1, d9
 8007dba:	f7f8 fa67 	bl	800028c <__adddf3>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	f7f8 fea7 	bl	8000b18 <__aeabi_dcmpgt>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d173      	bne.n	8007eb6 <_dtoa_r+0x6e6>
 8007dce:	ec53 2b19 	vmov	r2, r3, d9
 8007dd2:	4914      	ldr	r1, [pc, #80]	; (8007e24 <_dtoa_r+0x654>)
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f7f8 fa57 	bl	8000288 <__aeabi_dsub>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4640      	mov	r0, r8
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f af2f 	beq.w	8007c4a <_dtoa_r+0x47a>
 8007dec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dee:	1e6b      	subs	r3, r5, #1
 8007df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007df6:	2b30      	cmp	r3, #48	; 0x30
 8007df8:	d0f8      	beq.n	8007dec <_dtoa_r+0x61c>
 8007dfa:	46bb      	mov	fp, r7
 8007dfc:	e04a      	b.n	8007e94 <_dtoa_r+0x6c4>
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <_dtoa_r+0x648>)
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	e7bd      	b.n	8007d86 <_dtoa_r+0x5b6>
 8007e0a:	bf00      	nop
 8007e0c:	08009b08 	.word	0x08009b08
 8007e10:	08009ae0 	.word	0x08009ae0
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	40240000 	.word	0x40240000
 8007e1c:	401c0000 	.word	0x401c0000
 8007e20:	40140000 	.word	0x40140000
 8007e24:	3fe00000 	.word	0x3fe00000
 8007e28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e2c:	9d00      	ldr	r5, [sp, #0]
 8007e2e:	4642      	mov	r2, r8
 8007e30:	464b      	mov	r3, r9
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	f7f8 fd09 	bl	800084c <__aeabi_ddiv>
 8007e3a:	f7f8 fe8d 	bl	8000b58 <__aeabi_d2iz>
 8007e3e:	9001      	str	r0, [sp, #4]
 8007e40:	f7f8 fb70 	bl	8000524 <__aeabi_i2d>
 8007e44:	4642      	mov	r2, r8
 8007e46:	464b      	mov	r3, r9
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fa18 	bl	8000288 <__aeabi_dsub>
 8007e58:	9e01      	ldr	r6, [sp, #4]
 8007e5a:	9f04      	ldr	r7, [sp, #16]
 8007e5c:	3630      	adds	r6, #48	; 0x30
 8007e5e:	f805 6b01 	strb.w	r6, [r5], #1
 8007e62:	9e00      	ldr	r6, [sp, #0]
 8007e64:	1bae      	subs	r6, r5, r6
 8007e66:	42b7      	cmp	r7, r6
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	d134      	bne.n	8007ed8 <_dtoa_r+0x708>
 8007e6e:	f7f8 fa0d 	bl	800028c <__adddf3>
 8007e72:	4642      	mov	r2, r8
 8007e74:	464b      	mov	r3, r9
 8007e76:	4606      	mov	r6, r0
 8007e78:	460f      	mov	r7, r1
 8007e7a:	f7f8 fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 8007e7e:	b9c8      	cbnz	r0, 8007eb4 <_dtoa_r+0x6e4>
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e8c:	b110      	cbz	r0, 8007e94 <_dtoa_r+0x6c4>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	07db      	lsls	r3, r3, #31
 8007e92:	d40f      	bmi.n	8007eb4 <_dtoa_r+0x6e4>
 8007e94:	4651      	mov	r1, sl
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fd1e 	bl	80088d8 <_Bfree>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ea0:	702b      	strb	r3, [r5, #0]
 8007ea2:	f10b 0301 	add.w	r3, fp, #1
 8007ea6:	6013      	str	r3, [r2, #0]
 8007ea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f43f ace2 	beq.w	8007874 <_dtoa_r+0xa4>
 8007eb0:	601d      	str	r5, [r3, #0]
 8007eb2:	e4df      	b.n	8007874 <_dtoa_r+0xa4>
 8007eb4:	465f      	mov	r7, fp
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	461d      	mov	r5, r3
 8007eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ebe:	2a39      	cmp	r2, #57	; 0x39
 8007ec0:	d106      	bne.n	8007ed0 <_dtoa_r+0x700>
 8007ec2:	9a00      	ldr	r2, [sp, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d1f7      	bne.n	8007eb8 <_dtoa_r+0x6e8>
 8007ec8:	9900      	ldr	r1, [sp, #0]
 8007eca:	2230      	movs	r2, #48	; 0x30
 8007ecc:	3701      	adds	r7, #1
 8007ece:	700a      	strb	r2, [r1, #0]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e790      	b.n	8007dfa <_dtoa_r+0x62a>
 8007ed8:	4ba3      	ldr	r3, [pc, #652]	; (8008168 <_dtoa_r+0x998>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	f7f8 fb8c 	bl	80005f8 <__aeabi_dmul>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460f      	mov	r7, r1
 8007ee8:	f7f8 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d09e      	beq.n	8007e2e <_dtoa_r+0x65e>
 8007ef0:	e7d0      	b.n	8007e94 <_dtoa_r+0x6c4>
 8007ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	f000 80ca 	beq.w	800808e <_dtoa_r+0x8be>
 8007efa:	9a07      	ldr	r2, [sp, #28]
 8007efc:	2a01      	cmp	r2, #1
 8007efe:	f300 80ad 	bgt.w	800805c <_dtoa_r+0x88c>
 8007f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	f000 80a5 	beq.w	8008054 <_dtoa_r+0x884>
 8007f0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f0e:	9e08      	ldr	r6, [sp, #32]
 8007f10:	9d05      	ldr	r5, [sp, #20]
 8007f12:	9a05      	ldr	r2, [sp, #20]
 8007f14:	441a      	add	r2, r3
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	441a      	add	r2, r3
 8007f1e:	4620      	mov	r0, r4
 8007f20:	9206      	str	r2, [sp, #24]
 8007f22:	f000 fd8f 	bl	8008a44 <__i2b>
 8007f26:	4607      	mov	r7, r0
 8007f28:	b165      	cbz	r5, 8007f44 <_dtoa_r+0x774>
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dd09      	ble.n	8007f44 <_dtoa_r+0x774>
 8007f30:	42ab      	cmp	r3, r5
 8007f32:	9a05      	ldr	r2, [sp, #20]
 8007f34:	bfa8      	it	ge
 8007f36:	462b      	movge	r3, r5
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	9205      	str	r2, [sp, #20]
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	1aed      	subs	r5, r5, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9306      	str	r3, [sp, #24]
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	b1f3      	cbz	r3, 8007f86 <_dtoa_r+0x7b6>
 8007f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80a3 	beq.w	8008096 <_dtoa_r+0x8c6>
 8007f50:	2e00      	cmp	r6, #0
 8007f52:	dd10      	ble.n	8007f76 <_dtoa_r+0x7a6>
 8007f54:	4639      	mov	r1, r7
 8007f56:	4632      	mov	r2, r6
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fe33 	bl	8008bc4 <__pow5mult>
 8007f5e:	4652      	mov	r2, sl
 8007f60:	4601      	mov	r1, r0
 8007f62:	4607      	mov	r7, r0
 8007f64:	4620      	mov	r0, r4
 8007f66:	f000 fd83 	bl	8008a70 <__multiply>
 8007f6a:	4651      	mov	r1, sl
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fcb2 	bl	80088d8 <_Bfree>
 8007f74:	46c2      	mov	sl, r8
 8007f76:	9b08      	ldr	r3, [sp, #32]
 8007f78:	1b9a      	subs	r2, r3, r6
 8007f7a:	d004      	beq.n	8007f86 <_dtoa_r+0x7b6>
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fe20 	bl	8008bc4 <__pow5mult>
 8007f84:	4682      	mov	sl, r0
 8007f86:	2101      	movs	r1, #1
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fd5b 	bl	8008a44 <__i2b>
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	4606      	mov	r6, r0
 8007f94:	f340 8081 	ble.w	800809a <_dtoa_r+0x8ca>
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fe11 	bl	8008bc4 <__pow5mult>
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	dd7a      	ble.n	80080a0 <_dtoa_r+0x8d0>
 8007faa:	f04f 0800 	mov.w	r8, #0
 8007fae:	6933      	ldr	r3, [r6, #16]
 8007fb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fb4:	6918      	ldr	r0, [r3, #16]
 8007fb6:	f000 fcf7 	bl	80089a8 <__hi0bits>
 8007fba:	f1c0 0020 	rsb	r0, r0, #32
 8007fbe:	9b06      	ldr	r3, [sp, #24]
 8007fc0:	4418      	add	r0, r3
 8007fc2:	f010 001f 	ands.w	r0, r0, #31
 8007fc6:	f000 8094 	beq.w	80080f2 <_dtoa_r+0x922>
 8007fca:	f1c0 0320 	rsb	r3, r0, #32
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	f340 8085 	ble.w	80080de <_dtoa_r+0x90e>
 8007fd4:	9b05      	ldr	r3, [sp, #20]
 8007fd6:	f1c0 001c 	rsb	r0, r0, #28
 8007fda:	4403      	add	r3, r0
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	4403      	add	r3, r0
 8007fe2:	4405      	add	r5, r0
 8007fe4:	9306      	str	r3, [sp, #24]
 8007fe6:	9b05      	ldr	r3, [sp, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	dd05      	ble.n	8007ff8 <_dtoa_r+0x828>
 8007fec:	4651      	mov	r1, sl
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fe41 	bl	8008c78 <__lshift>
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	9b06      	ldr	r3, [sp, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dd05      	ble.n	800800a <_dtoa_r+0x83a>
 8007ffe:	4631      	mov	r1, r6
 8008000:	461a      	mov	r2, r3
 8008002:	4620      	mov	r0, r4
 8008004:	f000 fe38 	bl	8008c78 <__lshift>
 8008008:	4606      	mov	r6, r0
 800800a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d072      	beq.n	80080f6 <_dtoa_r+0x926>
 8008010:	4631      	mov	r1, r6
 8008012:	4650      	mov	r0, sl
 8008014:	f000 fe9c 	bl	8008d50 <__mcmp>
 8008018:	2800      	cmp	r0, #0
 800801a:	da6c      	bge.n	80080f6 <_dtoa_r+0x926>
 800801c:	2300      	movs	r3, #0
 800801e:	4651      	mov	r1, sl
 8008020:	220a      	movs	r2, #10
 8008022:	4620      	mov	r0, r4
 8008024:	f000 fc7a 	bl	800891c <__multadd>
 8008028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800802e:	4682      	mov	sl, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 81b0 	beq.w	8008396 <_dtoa_r+0xbc6>
 8008036:	2300      	movs	r3, #0
 8008038:	4639      	mov	r1, r7
 800803a:	220a      	movs	r2, #10
 800803c:	4620      	mov	r0, r4
 800803e:	f000 fc6d 	bl	800891c <__multadd>
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	4607      	mov	r7, r0
 8008048:	f300 8096 	bgt.w	8008178 <_dtoa_r+0x9a8>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b02      	cmp	r3, #2
 8008050:	dc59      	bgt.n	8008106 <_dtoa_r+0x936>
 8008052:	e091      	b.n	8008178 <_dtoa_r+0x9a8>
 8008054:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800805a:	e758      	b.n	8007f0e <_dtoa_r+0x73e>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	1e5e      	subs	r6, r3, #1
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	42b3      	cmp	r3, r6
 8008064:	bfbf      	itttt	lt
 8008066:	9b08      	ldrlt	r3, [sp, #32]
 8008068:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800806a:	9608      	strlt	r6, [sp, #32]
 800806c:	1af3      	sublt	r3, r6, r3
 800806e:	bfb4      	ite	lt
 8008070:	18d2      	addlt	r2, r2, r3
 8008072:	1b9e      	subge	r6, r3, r6
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	bfbc      	itt	lt
 8008078:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800807a:	2600      	movlt	r6, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfb7      	itett	lt
 8008080:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008084:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008088:	1a9d      	sublt	r5, r3, r2
 800808a:	2300      	movlt	r3, #0
 800808c:	e741      	b.n	8007f12 <_dtoa_r+0x742>
 800808e:	9e08      	ldr	r6, [sp, #32]
 8008090:	9d05      	ldr	r5, [sp, #20]
 8008092:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008094:	e748      	b.n	8007f28 <_dtoa_r+0x758>
 8008096:	9a08      	ldr	r2, [sp, #32]
 8008098:	e770      	b.n	8007f7c <_dtoa_r+0x7ac>
 800809a:	9b07      	ldr	r3, [sp, #28]
 800809c:	2b01      	cmp	r3, #1
 800809e:	dc19      	bgt.n	80080d4 <_dtoa_r+0x904>
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	b9bb      	cbnz	r3, 80080d4 <_dtoa_r+0x904>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080aa:	b99b      	cbnz	r3, 80080d4 <_dtoa_r+0x904>
 80080ac:	9b03      	ldr	r3, [sp, #12]
 80080ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080b2:	0d1b      	lsrs	r3, r3, #20
 80080b4:	051b      	lsls	r3, r3, #20
 80080b6:	b183      	cbz	r3, 80080da <_dtoa_r+0x90a>
 80080b8:	9b05      	ldr	r3, [sp, #20]
 80080ba:	3301      	adds	r3, #1
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	9b06      	ldr	r3, [sp, #24]
 80080c0:	3301      	adds	r3, #1
 80080c2:	9306      	str	r3, [sp, #24]
 80080c4:	f04f 0801 	mov.w	r8, #1
 80080c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f47f af6f 	bne.w	8007fae <_dtoa_r+0x7de>
 80080d0:	2001      	movs	r0, #1
 80080d2:	e774      	b.n	8007fbe <_dtoa_r+0x7ee>
 80080d4:	f04f 0800 	mov.w	r8, #0
 80080d8:	e7f6      	b.n	80080c8 <_dtoa_r+0x8f8>
 80080da:	4698      	mov	r8, r3
 80080dc:	e7f4      	b.n	80080c8 <_dtoa_r+0x8f8>
 80080de:	d082      	beq.n	8007fe6 <_dtoa_r+0x816>
 80080e0:	9a05      	ldr	r2, [sp, #20]
 80080e2:	331c      	adds	r3, #28
 80080e4:	441a      	add	r2, r3
 80080e6:	9205      	str	r2, [sp, #20]
 80080e8:	9a06      	ldr	r2, [sp, #24]
 80080ea:	441a      	add	r2, r3
 80080ec:	441d      	add	r5, r3
 80080ee:	9206      	str	r2, [sp, #24]
 80080f0:	e779      	b.n	8007fe6 <_dtoa_r+0x816>
 80080f2:	4603      	mov	r3, r0
 80080f4:	e7f4      	b.n	80080e0 <_dtoa_r+0x910>
 80080f6:	9b04      	ldr	r3, [sp, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dc37      	bgt.n	800816c <_dtoa_r+0x99c>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	dd34      	ble.n	800816c <_dtoa_r+0x99c>
 8008102:	9b04      	ldr	r3, [sp, #16]
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	9b01      	ldr	r3, [sp, #4]
 8008108:	b963      	cbnz	r3, 8008124 <_dtoa_r+0x954>
 800810a:	4631      	mov	r1, r6
 800810c:	2205      	movs	r2, #5
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fc04 	bl	800891c <__multadd>
 8008114:	4601      	mov	r1, r0
 8008116:	4606      	mov	r6, r0
 8008118:	4650      	mov	r0, sl
 800811a:	f000 fe19 	bl	8008d50 <__mcmp>
 800811e:	2800      	cmp	r0, #0
 8008120:	f73f adbb 	bgt.w	8007c9a <_dtoa_r+0x4ca>
 8008124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008126:	9d00      	ldr	r5, [sp, #0]
 8008128:	ea6f 0b03 	mvn.w	fp, r3
 800812c:	f04f 0800 	mov.w	r8, #0
 8008130:	4631      	mov	r1, r6
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fbd0 	bl	80088d8 <_Bfree>
 8008138:	2f00      	cmp	r7, #0
 800813a:	f43f aeab 	beq.w	8007e94 <_dtoa_r+0x6c4>
 800813e:	f1b8 0f00 	cmp.w	r8, #0
 8008142:	d005      	beq.n	8008150 <_dtoa_r+0x980>
 8008144:	45b8      	cmp	r8, r7
 8008146:	d003      	beq.n	8008150 <_dtoa_r+0x980>
 8008148:	4641      	mov	r1, r8
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fbc4 	bl	80088d8 <_Bfree>
 8008150:	4639      	mov	r1, r7
 8008152:	4620      	mov	r0, r4
 8008154:	f000 fbc0 	bl	80088d8 <_Bfree>
 8008158:	e69c      	b.n	8007e94 <_dtoa_r+0x6c4>
 800815a:	2600      	movs	r6, #0
 800815c:	4637      	mov	r7, r6
 800815e:	e7e1      	b.n	8008124 <_dtoa_r+0x954>
 8008160:	46bb      	mov	fp, r7
 8008162:	4637      	mov	r7, r6
 8008164:	e599      	b.n	8007c9a <_dtoa_r+0x4ca>
 8008166:	bf00      	nop
 8008168:	40240000 	.word	0x40240000
 800816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	f000 80c8 	beq.w	8008304 <_dtoa_r+0xb34>
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	9301      	str	r3, [sp, #4]
 8008178:	2d00      	cmp	r5, #0
 800817a:	dd05      	ble.n	8008188 <_dtoa_r+0x9b8>
 800817c:	4639      	mov	r1, r7
 800817e:	462a      	mov	r2, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fd79 	bl	8008c78 <__lshift>
 8008186:	4607      	mov	r7, r0
 8008188:	f1b8 0f00 	cmp.w	r8, #0
 800818c:	d05b      	beq.n	8008246 <_dtoa_r+0xa76>
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	4620      	mov	r0, r4
 8008192:	f000 fb61 	bl	8008858 <_Balloc>
 8008196:	4605      	mov	r5, r0
 8008198:	b928      	cbnz	r0, 80081a6 <_dtoa_r+0x9d6>
 800819a:	4b83      	ldr	r3, [pc, #524]	; (80083a8 <_dtoa_r+0xbd8>)
 800819c:	4602      	mov	r2, r0
 800819e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80081a2:	f7ff bb2e 	b.w	8007802 <_dtoa_r+0x32>
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	3202      	adds	r2, #2
 80081aa:	0092      	lsls	r2, r2, #2
 80081ac:	f107 010c 	add.w	r1, r7, #12
 80081b0:	300c      	adds	r0, #12
 80081b2:	f7ff fa75 	bl	80076a0 <memcpy>
 80081b6:	2201      	movs	r2, #1
 80081b8:	4629      	mov	r1, r5
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fd5c 	bl	8008c78 <__lshift>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ca:	4413      	add	r3, r2
 80081cc:	9308      	str	r3, [sp, #32]
 80081ce:	9b02      	ldr	r3, [sp, #8]
 80081d0:	f003 0301 	and.w	r3, r3, #1
 80081d4:	46b8      	mov	r8, r7
 80081d6:	9306      	str	r3, [sp, #24]
 80081d8:	4607      	mov	r7, r0
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	4631      	mov	r1, r6
 80081de:	3b01      	subs	r3, #1
 80081e0:	4650      	mov	r0, sl
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	f7ff fa6a 	bl	80076bc <quorem>
 80081e8:	4641      	mov	r1, r8
 80081ea:	9002      	str	r0, [sp, #8]
 80081ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081f0:	4650      	mov	r0, sl
 80081f2:	f000 fdad 	bl	8008d50 <__mcmp>
 80081f6:	463a      	mov	r2, r7
 80081f8:	9005      	str	r0, [sp, #20]
 80081fa:	4631      	mov	r1, r6
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fdc3 	bl	8008d88 <__mdiff>
 8008202:	68c2      	ldr	r2, [r0, #12]
 8008204:	4605      	mov	r5, r0
 8008206:	bb02      	cbnz	r2, 800824a <_dtoa_r+0xa7a>
 8008208:	4601      	mov	r1, r0
 800820a:	4650      	mov	r0, sl
 800820c:	f000 fda0 	bl	8008d50 <__mcmp>
 8008210:	4602      	mov	r2, r0
 8008212:	4629      	mov	r1, r5
 8008214:	4620      	mov	r0, r4
 8008216:	9209      	str	r2, [sp, #36]	; 0x24
 8008218:	f000 fb5e 	bl	80088d8 <_Bfree>
 800821c:	9b07      	ldr	r3, [sp, #28]
 800821e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008220:	9d04      	ldr	r5, [sp, #16]
 8008222:	ea43 0102 	orr.w	r1, r3, r2
 8008226:	9b06      	ldr	r3, [sp, #24]
 8008228:	4319      	orrs	r1, r3
 800822a:	d110      	bne.n	800824e <_dtoa_r+0xa7e>
 800822c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008230:	d029      	beq.n	8008286 <_dtoa_r+0xab6>
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd02      	ble.n	800823e <_dtoa_r+0xa6e>
 8008238:	9b02      	ldr	r3, [sp, #8]
 800823a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	f883 9000 	strb.w	r9, [r3]
 8008244:	e774      	b.n	8008130 <_dtoa_r+0x960>
 8008246:	4638      	mov	r0, r7
 8008248:	e7ba      	b.n	80081c0 <_dtoa_r+0x9f0>
 800824a:	2201      	movs	r2, #1
 800824c:	e7e1      	b.n	8008212 <_dtoa_r+0xa42>
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	db04      	blt.n	800825e <_dtoa_r+0xa8e>
 8008254:	9907      	ldr	r1, [sp, #28]
 8008256:	430b      	orrs	r3, r1
 8008258:	9906      	ldr	r1, [sp, #24]
 800825a:	430b      	orrs	r3, r1
 800825c:	d120      	bne.n	80082a0 <_dtoa_r+0xad0>
 800825e:	2a00      	cmp	r2, #0
 8008260:	dded      	ble.n	800823e <_dtoa_r+0xa6e>
 8008262:	4651      	mov	r1, sl
 8008264:	2201      	movs	r2, #1
 8008266:	4620      	mov	r0, r4
 8008268:	f000 fd06 	bl	8008c78 <__lshift>
 800826c:	4631      	mov	r1, r6
 800826e:	4682      	mov	sl, r0
 8008270:	f000 fd6e 	bl	8008d50 <__mcmp>
 8008274:	2800      	cmp	r0, #0
 8008276:	dc03      	bgt.n	8008280 <_dtoa_r+0xab0>
 8008278:	d1e1      	bne.n	800823e <_dtoa_r+0xa6e>
 800827a:	f019 0f01 	tst.w	r9, #1
 800827e:	d0de      	beq.n	800823e <_dtoa_r+0xa6e>
 8008280:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008284:	d1d8      	bne.n	8008238 <_dtoa_r+0xa68>
 8008286:	9a01      	ldr	r2, [sp, #4]
 8008288:	2339      	movs	r3, #57	; 0x39
 800828a:	7013      	strb	r3, [r2, #0]
 800828c:	462b      	mov	r3, r5
 800828e:	461d      	mov	r5, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008296:	2a39      	cmp	r2, #57	; 0x39
 8008298:	d06c      	beq.n	8008374 <_dtoa_r+0xba4>
 800829a:	3201      	adds	r2, #1
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e747      	b.n	8008130 <_dtoa_r+0x960>
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	dd07      	ble.n	80082b4 <_dtoa_r+0xae4>
 80082a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80082a8:	d0ed      	beq.n	8008286 <_dtoa_r+0xab6>
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	f109 0301 	add.w	r3, r9, #1
 80082b0:	7013      	strb	r3, [r2, #0]
 80082b2:	e73d      	b.n	8008130 <_dtoa_r+0x960>
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	9a08      	ldr	r2, [sp, #32]
 80082b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80082bc:	4293      	cmp	r3, r2
 80082be:	d043      	beq.n	8008348 <_dtoa_r+0xb78>
 80082c0:	4651      	mov	r1, sl
 80082c2:	2300      	movs	r3, #0
 80082c4:	220a      	movs	r2, #10
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 fb28 	bl	800891c <__multadd>
 80082cc:	45b8      	cmp	r8, r7
 80082ce:	4682      	mov	sl, r0
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	f04f 020a 	mov.w	r2, #10
 80082d8:	4641      	mov	r1, r8
 80082da:	4620      	mov	r0, r4
 80082dc:	d107      	bne.n	80082ee <_dtoa_r+0xb1e>
 80082de:	f000 fb1d 	bl	800891c <__multadd>
 80082e2:	4680      	mov	r8, r0
 80082e4:	4607      	mov	r7, r0
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	e775      	b.n	80081da <_dtoa_r+0xa0a>
 80082ee:	f000 fb15 	bl	800891c <__multadd>
 80082f2:	4639      	mov	r1, r7
 80082f4:	4680      	mov	r8, r0
 80082f6:	2300      	movs	r3, #0
 80082f8:	220a      	movs	r2, #10
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fb0e 	bl	800891c <__multadd>
 8008300:	4607      	mov	r7, r0
 8008302:	e7f0      	b.n	80082e6 <_dtoa_r+0xb16>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	9d00      	ldr	r5, [sp, #0]
 800830a:	4631      	mov	r1, r6
 800830c:	4650      	mov	r0, sl
 800830e:	f7ff f9d5 	bl	80076bc <quorem>
 8008312:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008316:	9b00      	ldr	r3, [sp, #0]
 8008318:	f805 9b01 	strb.w	r9, [r5], #1
 800831c:	1aea      	subs	r2, r5, r3
 800831e:	9b01      	ldr	r3, [sp, #4]
 8008320:	4293      	cmp	r3, r2
 8008322:	dd07      	ble.n	8008334 <_dtoa_r+0xb64>
 8008324:	4651      	mov	r1, sl
 8008326:	2300      	movs	r3, #0
 8008328:	220a      	movs	r2, #10
 800832a:	4620      	mov	r0, r4
 800832c:	f000 faf6 	bl	800891c <__multadd>
 8008330:	4682      	mov	sl, r0
 8008332:	e7ea      	b.n	800830a <_dtoa_r+0xb3a>
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfc8      	it	gt
 800833a:	461d      	movgt	r5, r3
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	bfd8      	it	le
 8008340:	2501      	movle	r5, #1
 8008342:	441d      	add	r5, r3
 8008344:	f04f 0800 	mov.w	r8, #0
 8008348:	4651      	mov	r1, sl
 800834a:	2201      	movs	r2, #1
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fc93 	bl	8008c78 <__lshift>
 8008352:	4631      	mov	r1, r6
 8008354:	4682      	mov	sl, r0
 8008356:	f000 fcfb 	bl	8008d50 <__mcmp>
 800835a:	2800      	cmp	r0, #0
 800835c:	dc96      	bgt.n	800828c <_dtoa_r+0xabc>
 800835e:	d102      	bne.n	8008366 <_dtoa_r+0xb96>
 8008360:	f019 0f01 	tst.w	r9, #1
 8008364:	d192      	bne.n	800828c <_dtoa_r+0xabc>
 8008366:	462b      	mov	r3, r5
 8008368:	461d      	mov	r5, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a30      	cmp	r2, #48	; 0x30
 8008370:	d0fa      	beq.n	8008368 <_dtoa_r+0xb98>
 8008372:	e6dd      	b.n	8008130 <_dtoa_r+0x960>
 8008374:	9a00      	ldr	r2, [sp, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d189      	bne.n	800828e <_dtoa_r+0xabe>
 800837a:	f10b 0b01 	add.w	fp, fp, #1
 800837e:	2331      	movs	r3, #49	; 0x31
 8008380:	e796      	b.n	80082b0 <_dtoa_r+0xae0>
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <_dtoa_r+0xbdc>)
 8008384:	f7ff ba99 	b.w	80078ba <_dtoa_r+0xea>
 8008388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800838a:	2b00      	cmp	r3, #0
 800838c:	f47f aa6d 	bne.w	800786a <_dtoa_r+0x9a>
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <_dtoa_r+0xbe0>)
 8008392:	f7ff ba92 	b.w	80078ba <_dtoa_r+0xea>
 8008396:	9b01      	ldr	r3, [sp, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	dcb5      	bgt.n	8008308 <_dtoa_r+0xb38>
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	f73f aeb1 	bgt.w	8008106 <_dtoa_r+0x936>
 80083a4:	e7b0      	b.n	8008308 <_dtoa_r+0xb38>
 80083a6:	bf00      	nop
 80083a8:	08009a60 	.word	0x08009a60
 80083ac:	080099c0 	.word	0x080099c0
 80083b0:	080099e4 	.word	0x080099e4

080083b4 <_free_r>:
 80083b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d044      	beq.n	8008444 <_free_r+0x90>
 80083ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083be:	9001      	str	r0, [sp, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f1a1 0404 	sub.w	r4, r1, #4
 80083c6:	bfb8      	it	lt
 80083c8:	18e4      	addlt	r4, r4, r3
 80083ca:	f7ff f865 	bl	8007498 <__malloc_lock>
 80083ce:	4a1e      	ldr	r2, [pc, #120]	; (8008448 <_free_r+0x94>)
 80083d0:	9801      	ldr	r0, [sp, #4]
 80083d2:	6813      	ldr	r3, [r2, #0]
 80083d4:	b933      	cbnz	r3, 80083e4 <_free_r+0x30>
 80083d6:	6063      	str	r3, [r4, #4]
 80083d8:	6014      	str	r4, [r2, #0]
 80083da:	b003      	add	sp, #12
 80083dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e0:	f7ff b860 	b.w	80074a4 <__malloc_unlock>
 80083e4:	42a3      	cmp	r3, r4
 80083e6:	d908      	bls.n	80083fa <_free_r+0x46>
 80083e8:	6825      	ldr	r5, [r4, #0]
 80083ea:	1961      	adds	r1, r4, r5
 80083ec:	428b      	cmp	r3, r1
 80083ee:	bf01      	itttt	eq
 80083f0:	6819      	ldreq	r1, [r3, #0]
 80083f2:	685b      	ldreq	r3, [r3, #4]
 80083f4:	1949      	addeq	r1, r1, r5
 80083f6:	6021      	streq	r1, [r4, #0]
 80083f8:	e7ed      	b.n	80083d6 <_free_r+0x22>
 80083fa:	461a      	mov	r2, r3
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	b10b      	cbz	r3, 8008404 <_free_r+0x50>
 8008400:	42a3      	cmp	r3, r4
 8008402:	d9fa      	bls.n	80083fa <_free_r+0x46>
 8008404:	6811      	ldr	r1, [r2, #0]
 8008406:	1855      	adds	r5, r2, r1
 8008408:	42a5      	cmp	r5, r4
 800840a:	d10b      	bne.n	8008424 <_free_r+0x70>
 800840c:	6824      	ldr	r4, [r4, #0]
 800840e:	4421      	add	r1, r4
 8008410:	1854      	adds	r4, r2, r1
 8008412:	42a3      	cmp	r3, r4
 8008414:	6011      	str	r1, [r2, #0]
 8008416:	d1e0      	bne.n	80083da <_free_r+0x26>
 8008418:	681c      	ldr	r4, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	6053      	str	r3, [r2, #4]
 800841e:	440c      	add	r4, r1
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	e7da      	b.n	80083da <_free_r+0x26>
 8008424:	d902      	bls.n	800842c <_free_r+0x78>
 8008426:	230c      	movs	r3, #12
 8008428:	6003      	str	r3, [r0, #0]
 800842a:	e7d6      	b.n	80083da <_free_r+0x26>
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	1961      	adds	r1, r4, r5
 8008430:	428b      	cmp	r3, r1
 8008432:	bf04      	itt	eq
 8008434:	6819      	ldreq	r1, [r3, #0]
 8008436:	685b      	ldreq	r3, [r3, #4]
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	bf04      	itt	eq
 800843c:	1949      	addeq	r1, r1, r5
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	6054      	str	r4, [r2, #4]
 8008442:	e7ca      	b.n	80083da <_free_r+0x26>
 8008444:	b003      	add	sp, #12
 8008446:	bd30      	pop	{r4, r5, pc}
 8008448:	20000ac4 	.word	0x20000ac4

0800844c <__ssputs_r>:
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	688e      	ldr	r6, [r1, #8]
 8008452:	461f      	mov	r7, r3
 8008454:	42be      	cmp	r6, r7
 8008456:	680b      	ldr	r3, [r1, #0]
 8008458:	4682      	mov	sl, r0
 800845a:	460c      	mov	r4, r1
 800845c:	4690      	mov	r8, r2
 800845e:	d82c      	bhi.n	80084ba <__ssputs_r+0x6e>
 8008460:	898a      	ldrh	r2, [r1, #12]
 8008462:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008466:	d026      	beq.n	80084b6 <__ssputs_r+0x6a>
 8008468:	6965      	ldr	r5, [r4, #20]
 800846a:	6909      	ldr	r1, [r1, #16]
 800846c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008470:	eba3 0901 	sub.w	r9, r3, r1
 8008474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008478:	1c7b      	adds	r3, r7, #1
 800847a:	444b      	add	r3, r9
 800847c:	106d      	asrs	r5, r5, #1
 800847e:	429d      	cmp	r5, r3
 8008480:	bf38      	it	cc
 8008482:	461d      	movcc	r5, r3
 8008484:	0553      	lsls	r3, r2, #21
 8008486:	d527      	bpl.n	80084d8 <__ssputs_r+0x8c>
 8008488:	4629      	mov	r1, r5
 800848a:	f7fe fdc1 	bl	8007010 <_malloc_r>
 800848e:	4606      	mov	r6, r0
 8008490:	b360      	cbz	r0, 80084ec <__ssputs_r+0xa0>
 8008492:	6921      	ldr	r1, [r4, #16]
 8008494:	464a      	mov	r2, r9
 8008496:	f7ff f903 	bl	80076a0 <memcpy>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	6126      	str	r6, [r4, #16]
 80084a8:	6165      	str	r5, [r4, #20]
 80084aa:	444e      	add	r6, r9
 80084ac:	eba5 0509 	sub.w	r5, r5, r9
 80084b0:	6026      	str	r6, [r4, #0]
 80084b2:	60a5      	str	r5, [r4, #8]
 80084b4:	463e      	mov	r6, r7
 80084b6:	42be      	cmp	r6, r7
 80084b8:	d900      	bls.n	80084bc <__ssputs_r+0x70>
 80084ba:	463e      	mov	r6, r7
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	4632      	mov	r2, r6
 80084c0:	4641      	mov	r1, r8
 80084c2:	f000 fdb7 	bl	8009034 <memmove>
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	1b9b      	subs	r3, r3, r6
 80084ca:	60a3      	str	r3, [r4, #8]
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	4433      	add	r3, r6
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	2000      	movs	r0, #0
 80084d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d8:	462a      	mov	r2, r5
 80084da:	f000 fd7c 	bl	8008fd6 <_realloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1e0      	bne.n	80084a6 <__ssputs_r+0x5a>
 80084e4:	6921      	ldr	r1, [r4, #16]
 80084e6:	4650      	mov	r0, sl
 80084e8:	f7ff ff64 	bl	80083b4 <_free_r>
 80084ec:	230c      	movs	r3, #12
 80084ee:	f8ca 3000 	str.w	r3, [sl]
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084fe:	e7e9      	b.n	80084d4 <__ssputs_r+0x88>

08008500 <_svfiprintf_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4698      	mov	r8, r3
 8008506:	898b      	ldrh	r3, [r1, #12]
 8008508:	061b      	lsls	r3, r3, #24
 800850a:	b09d      	sub	sp, #116	; 0x74
 800850c:	4607      	mov	r7, r0
 800850e:	460d      	mov	r5, r1
 8008510:	4614      	mov	r4, r2
 8008512:	d50e      	bpl.n	8008532 <_svfiprintf_r+0x32>
 8008514:	690b      	ldr	r3, [r1, #16]
 8008516:	b963      	cbnz	r3, 8008532 <_svfiprintf_r+0x32>
 8008518:	2140      	movs	r1, #64	; 0x40
 800851a:	f7fe fd79 	bl	8007010 <_malloc_r>
 800851e:	6028      	str	r0, [r5, #0]
 8008520:	6128      	str	r0, [r5, #16]
 8008522:	b920      	cbnz	r0, 800852e <_svfiprintf_r+0x2e>
 8008524:	230c      	movs	r3, #12
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800852c:	e0d0      	b.n	80086d0 <_svfiprintf_r+0x1d0>
 800852e:	2340      	movs	r3, #64	; 0x40
 8008530:	616b      	str	r3, [r5, #20]
 8008532:	2300      	movs	r3, #0
 8008534:	9309      	str	r3, [sp, #36]	; 0x24
 8008536:	2320      	movs	r3, #32
 8008538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800853c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008540:	2330      	movs	r3, #48	; 0x30
 8008542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086e8 <_svfiprintf_r+0x1e8>
 8008546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800854a:	f04f 0901 	mov.w	r9, #1
 800854e:	4623      	mov	r3, r4
 8008550:	469a      	mov	sl, r3
 8008552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008556:	b10a      	cbz	r2, 800855c <_svfiprintf_r+0x5c>
 8008558:	2a25      	cmp	r2, #37	; 0x25
 800855a:	d1f9      	bne.n	8008550 <_svfiprintf_r+0x50>
 800855c:	ebba 0b04 	subs.w	fp, sl, r4
 8008560:	d00b      	beq.n	800857a <_svfiprintf_r+0x7a>
 8008562:	465b      	mov	r3, fp
 8008564:	4622      	mov	r2, r4
 8008566:	4629      	mov	r1, r5
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff ff6f 	bl	800844c <__ssputs_r>
 800856e:	3001      	adds	r0, #1
 8008570:	f000 80a9 	beq.w	80086c6 <_svfiprintf_r+0x1c6>
 8008574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008576:	445a      	add	r2, fp
 8008578:	9209      	str	r2, [sp, #36]	; 0x24
 800857a:	f89a 3000 	ldrb.w	r3, [sl]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80a1 	beq.w	80086c6 <_svfiprintf_r+0x1c6>
 8008584:	2300      	movs	r3, #0
 8008586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800858a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858e:	f10a 0a01 	add.w	sl, sl, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859a:	931a      	str	r3, [sp, #104]	; 0x68
 800859c:	4654      	mov	r4, sl
 800859e:	2205      	movs	r2, #5
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	4850      	ldr	r0, [pc, #320]	; (80086e8 <_svfiprintf_r+0x1e8>)
 80085a6:	f7f7 fe13 	bl	80001d0 <memchr>
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	b9d8      	cbnz	r0, 80085e6 <_svfiprintf_r+0xe6>
 80085ae:	06d0      	lsls	r0, r2, #27
 80085b0:	bf44      	itt	mi
 80085b2:	2320      	movmi	r3, #32
 80085b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b8:	0711      	lsls	r1, r2, #28
 80085ba:	bf44      	itt	mi
 80085bc:	232b      	movmi	r3, #43	; 0x2b
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c2:	f89a 3000 	ldrb.w	r3, [sl]
 80085c6:	2b2a      	cmp	r3, #42	; 0x2a
 80085c8:	d015      	beq.n	80085f6 <_svfiprintf_r+0xf6>
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	4654      	mov	r4, sl
 80085ce:	2000      	movs	r0, #0
 80085d0:	f04f 0c0a 	mov.w	ip, #10
 80085d4:	4621      	mov	r1, r4
 80085d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085da:	3b30      	subs	r3, #48	; 0x30
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d94d      	bls.n	800867c <_svfiprintf_r+0x17c>
 80085e0:	b1b0      	cbz	r0, 8008610 <_svfiprintf_r+0x110>
 80085e2:	9207      	str	r2, [sp, #28]
 80085e4:	e014      	b.n	8008610 <_svfiprintf_r+0x110>
 80085e6:	eba0 0308 	sub.w	r3, r0, r8
 80085ea:	fa09 f303 	lsl.w	r3, r9, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	46a2      	mov	sl, r4
 80085f4:	e7d2      	b.n	800859c <_svfiprintf_r+0x9c>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	1d19      	adds	r1, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	9103      	str	r1, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbb      	ittet	lt
 8008602:	425b      	neglt	r3, r3
 8008604:	f042 0202 	orrlt.w	r2, r2, #2
 8008608:	9307      	strge	r3, [sp, #28]
 800860a:	9307      	strlt	r3, [sp, #28]
 800860c:	bfb8      	it	lt
 800860e:	9204      	strlt	r2, [sp, #16]
 8008610:	7823      	ldrb	r3, [r4, #0]
 8008612:	2b2e      	cmp	r3, #46	; 0x2e
 8008614:	d10c      	bne.n	8008630 <_svfiprintf_r+0x130>
 8008616:	7863      	ldrb	r3, [r4, #1]
 8008618:	2b2a      	cmp	r3, #42	; 0x2a
 800861a:	d134      	bne.n	8008686 <_svfiprintf_r+0x186>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfb8      	it	lt
 8008628:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800862c:	3402      	adds	r4, #2
 800862e:	9305      	str	r3, [sp, #20]
 8008630:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086f8 <_svfiprintf_r+0x1f8>
 8008634:	7821      	ldrb	r1, [r4, #0]
 8008636:	2203      	movs	r2, #3
 8008638:	4650      	mov	r0, sl
 800863a:	f7f7 fdc9 	bl	80001d0 <memchr>
 800863e:	b138      	cbz	r0, 8008650 <_svfiprintf_r+0x150>
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	eba0 000a 	sub.w	r0, r0, sl
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	4082      	lsls	r2, r0
 800864a:	4313      	orrs	r3, r2
 800864c:	3401      	adds	r4, #1
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008654:	4825      	ldr	r0, [pc, #148]	; (80086ec <_svfiprintf_r+0x1ec>)
 8008656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800865a:	2206      	movs	r2, #6
 800865c:	f7f7 fdb8 	bl	80001d0 <memchr>
 8008660:	2800      	cmp	r0, #0
 8008662:	d038      	beq.n	80086d6 <_svfiprintf_r+0x1d6>
 8008664:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <_svfiprintf_r+0x1f0>)
 8008666:	bb1b      	cbnz	r3, 80086b0 <_svfiprintf_r+0x1b0>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	3307      	adds	r3, #7
 800866c:	f023 0307 	bic.w	r3, r3, #7
 8008670:	3308      	adds	r3, #8
 8008672:	9303      	str	r3, [sp, #12]
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	4433      	add	r3, r6
 8008678:	9309      	str	r3, [sp, #36]	; 0x24
 800867a:	e768      	b.n	800854e <_svfiprintf_r+0x4e>
 800867c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008680:	460c      	mov	r4, r1
 8008682:	2001      	movs	r0, #1
 8008684:	e7a6      	b.n	80085d4 <_svfiprintf_r+0xd4>
 8008686:	2300      	movs	r3, #0
 8008688:	3401      	adds	r4, #1
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	4619      	mov	r1, r3
 800868e:	f04f 0c0a 	mov.w	ip, #10
 8008692:	4620      	mov	r0, r4
 8008694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008698:	3a30      	subs	r2, #48	; 0x30
 800869a:	2a09      	cmp	r2, #9
 800869c:	d903      	bls.n	80086a6 <_svfiprintf_r+0x1a6>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0c6      	beq.n	8008630 <_svfiprintf_r+0x130>
 80086a2:	9105      	str	r1, [sp, #20]
 80086a4:	e7c4      	b.n	8008630 <_svfiprintf_r+0x130>
 80086a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80086aa:	4604      	mov	r4, r0
 80086ac:	2301      	movs	r3, #1
 80086ae:	e7f0      	b.n	8008692 <_svfiprintf_r+0x192>
 80086b0:	ab03      	add	r3, sp, #12
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	462a      	mov	r2, r5
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <_svfiprintf_r+0x1f4>)
 80086b8:	a904      	add	r1, sp, #16
 80086ba:	4638      	mov	r0, r7
 80086bc:	f7fe fa4a 	bl	8006b54 <_printf_float>
 80086c0:	1c42      	adds	r2, r0, #1
 80086c2:	4606      	mov	r6, r0
 80086c4:	d1d6      	bne.n	8008674 <_svfiprintf_r+0x174>
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	065b      	lsls	r3, r3, #25
 80086ca:	f53f af2d 	bmi.w	8008528 <_svfiprintf_r+0x28>
 80086ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d0:	b01d      	add	sp, #116	; 0x74
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	462a      	mov	r2, r5
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <_svfiprintf_r+0x1f4>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7fe fd83 	bl	80071ec <_printf_i>
 80086e6:	e7eb      	b.n	80086c0 <_svfiprintf_r+0x1c0>
 80086e8:	08009a71 	.word	0x08009a71
 80086ec:	08009a7b 	.word	0x08009a7b
 80086f0:	08006b55 	.word	0x08006b55
 80086f4:	0800844d 	.word	0x0800844d
 80086f8:	08009a77 	.word	0x08009a77

080086fc <__sflush_r>:
 80086fc:	898a      	ldrh	r2, [r1, #12]
 80086fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	4605      	mov	r5, r0
 8008704:	0710      	lsls	r0, r2, #28
 8008706:	460c      	mov	r4, r1
 8008708:	d458      	bmi.n	80087bc <__sflush_r+0xc0>
 800870a:	684b      	ldr	r3, [r1, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	dc05      	bgt.n	800871c <__sflush_r+0x20>
 8008710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	dc02      	bgt.n	800871c <__sflush_r+0x20>
 8008716:	2000      	movs	r0, #0
 8008718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800871c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800871e:	2e00      	cmp	r6, #0
 8008720:	d0f9      	beq.n	8008716 <__sflush_r+0x1a>
 8008722:	2300      	movs	r3, #0
 8008724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008728:	682f      	ldr	r7, [r5, #0]
 800872a:	6a21      	ldr	r1, [r4, #32]
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	d032      	beq.n	8008796 <__sflush_r+0x9a>
 8008730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	075a      	lsls	r2, r3, #29
 8008736:	d505      	bpl.n	8008744 <__sflush_r+0x48>
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	1ac0      	subs	r0, r0, r3
 800873c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800873e:	b10b      	cbz	r3, 8008744 <__sflush_r+0x48>
 8008740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008742:	1ac0      	subs	r0, r0, r3
 8008744:	2300      	movs	r3, #0
 8008746:	4602      	mov	r2, r0
 8008748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874a:	6a21      	ldr	r1, [r4, #32]
 800874c:	4628      	mov	r0, r5
 800874e:	47b0      	blx	r6
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	d106      	bne.n	8008764 <__sflush_r+0x68>
 8008756:	6829      	ldr	r1, [r5, #0]
 8008758:	291d      	cmp	r1, #29
 800875a:	d82b      	bhi.n	80087b4 <__sflush_r+0xb8>
 800875c:	4a29      	ldr	r2, [pc, #164]	; (8008804 <__sflush_r+0x108>)
 800875e:	410a      	asrs	r2, r1
 8008760:	07d6      	lsls	r6, r2, #31
 8008762:	d427      	bmi.n	80087b4 <__sflush_r+0xb8>
 8008764:	2200      	movs	r2, #0
 8008766:	6062      	str	r2, [r4, #4]
 8008768:	04d9      	lsls	r1, r3, #19
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	6022      	str	r2, [r4, #0]
 800876e:	d504      	bpl.n	800877a <__sflush_r+0x7e>
 8008770:	1c42      	adds	r2, r0, #1
 8008772:	d101      	bne.n	8008778 <__sflush_r+0x7c>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b903      	cbnz	r3, 800877a <__sflush_r+0x7e>
 8008778:	6560      	str	r0, [r4, #84]	; 0x54
 800877a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800877c:	602f      	str	r7, [r5, #0]
 800877e:	2900      	cmp	r1, #0
 8008780:	d0c9      	beq.n	8008716 <__sflush_r+0x1a>
 8008782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008786:	4299      	cmp	r1, r3
 8008788:	d002      	beq.n	8008790 <__sflush_r+0x94>
 800878a:	4628      	mov	r0, r5
 800878c:	f7ff fe12 	bl	80083b4 <_free_r>
 8008790:	2000      	movs	r0, #0
 8008792:	6360      	str	r0, [r4, #52]	; 0x34
 8008794:	e7c0      	b.n	8008718 <__sflush_r+0x1c>
 8008796:	2301      	movs	r3, #1
 8008798:	4628      	mov	r0, r5
 800879a:	47b0      	blx	r6
 800879c:	1c41      	adds	r1, r0, #1
 800879e:	d1c8      	bne.n	8008732 <__sflush_r+0x36>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0c5      	beq.n	8008732 <__sflush_r+0x36>
 80087a6:	2b1d      	cmp	r3, #29
 80087a8:	d001      	beq.n	80087ae <__sflush_r+0xb2>
 80087aa:	2b16      	cmp	r3, #22
 80087ac:	d101      	bne.n	80087b2 <__sflush_r+0xb6>
 80087ae:	602f      	str	r7, [r5, #0]
 80087b0:	e7b1      	b.n	8008716 <__sflush_r+0x1a>
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	e7ad      	b.n	8008718 <__sflush_r+0x1c>
 80087bc:	690f      	ldr	r7, [r1, #16]
 80087be:	2f00      	cmp	r7, #0
 80087c0:	d0a9      	beq.n	8008716 <__sflush_r+0x1a>
 80087c2:	0793      	lsls	r3, r2, #30
 80087c4:	680e      	ldr	r6, [r1, #0]
 80087c6:	bf08      	it	eq
 80087c8:	694b      	ldreq	r3, [r1, #20]
 80087ca:	600f      	str	r7, [r1, #0]
 80087cc:	bf18      	it	ne
 80087ce:	2300      	movne	r3, #0
 80087d0:	eba6 0807 	sub.w	r8, r6, r7
 80087d4:	608b      	str	r3, [r1, #8]
 80087d6:	f1b8 0f00 	cmp.w	r8, #0
 80087da:	dd9c      	ble.n	8008716 <__sflush_r+0x1a>
 80087dc:	6a21      	ldr	r1, [r4, #32]
 80087de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087e0:	4643      	mov	r3, r8
 80087e2:	463a      	mov	r2, r7
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b0      	blx	r6
 80087e8:	2800      	cmp	r0, #0
 80087ea:	dc06      	bgt.n	80087fa <__sflush_r+0xfe>
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087f8:	e78e      	b.n	8008718 <__sflush_r+0x1c>
 80087fa:	4407      	add	r7, r0
 80087fc:	eba8 0800 	sub.w	r8, r8, r0
 8008800:	e7e9      	b.n	80087d6 <__sflush_r+0xda>
 8008802:	bf00      	nop
 8008804:	dfbffffe 	.word	0xdfbffffe

08008808 <_fflush_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	690b      	ldr	r3, [r1, #16]
 800880c:	4605      	mov	r5, r0
 800880e:	460c      	mov	r4, r1
 8008810:	b913      	cbnz	r3, 8008818 <_fflush_r+0x10>
 8008812:	2500      	movs	r5, #0
 8008814:	4628      	mov	r0, r5
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	b118      	cbz	r0, 8008822 <_fflush_r+0x1a>
 800881a:	6a03      	ldr	r3, [r0, #32]
 800881c:	b90b      	cbnz	r3, 8008822 <_fflush_r+0x1a>
 800881e:	f7fe fec1 	bl	80075a4 <__sinit>
 8008822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f3      	beq.n	8008812 <_fflush_r+0xa>
 800882a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800882c:	07d0      	lsls	r0, r2, #31
 800882e:	d404      	bmi.n	800883a <_fflush_r+0x32>
 8008830:	0599      	lsls	r1, r3, #22
 8008832:	d402      	bmi.n	800883a <_fflush_r+0x32>
 8008834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008836:	f7fe ff31 	bl	800769c <__retarget_lock_acquire_recursive>
 800883a:	4628      	mov	r0, r5
 800883c:	4621      	mov	r1, r4
 800883e:	f7ff ff5d 	bl	80086fc <__sflush_r>
 8008842:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008844:	07da      	lsls	r2, r3, #31
 8008846:	4605      	mov	r5, r0
 8008848:	d4e4      	bmi.n	8008814 <_fflush_r+0xc>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	059b      	lsls	r3, r3, #22
 800884e:	d4e1      	bmi.n	8008814 <_fflush_r+0xc>
 8008850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008852:	f7fe ff24 	bl	800769e <__retarget_lock_release_recursive>
 8008856:	e7dd      	b.n	8008814 <_fflush_r+0xc>

08008858 <_Balloc>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	69c6      	ldr	r6, [r0, #28]
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	b976      	cbnz	r6, 8008880 <_Balloc+0x28>
 8008862:	2010      	movs	r0, #16
 8008864:	f7fe fbac 	bl	8006fc0 <malloc>
 8008868:	4602      	mov	r2, r0
 800886a:	61e0      	str	r0, [r4, #28]
 800886c:	b920      	cbnz	r0, 8008878 <_Balloc+0x20>
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <_Balloc+0x78>)
 8008870:	4818      	ldr	r0, [pc, #96]	; (80088d4 <_Balloc+0x7c>)
 8008872:	216b      	movs	r1, #107	; 0x6b
 8008874:	f000 fc3e 	bl	80090f4 <__assert_func>
 8008878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800887c:	6006      	str	r6, [r0, #0]
 800887e:	60c6      	str	r6, [r0, #12]
 8008880:	69e6      	ldr	r6, [r4, #28]
 8008882:	68f3      	ldr	r3, [r6, #12]
 8008884:	b183      	cbz	r3, 80088a8 <_Balloc+0x50>
 8008886:	69e3      	ldr	r3, [r4, #28]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800888e:	b9b8      	cbnz	r0, 80088c0 <_Balloc+0x68>
 8008890:	2101      	movs	r1, #1
 8008892:	fa01 f605 	lsl.w	r6, r1, r5
 8008896:	1d72      	adds	r2, r6, #5
 8008898:	0092      	lsls	r2, r2, #2
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fc48 	bl	8009130 <_calloc_r>
 80088a0:	b160      	cbz	r0, 80088bc <_Balloc+0x64>
 80088a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088a6:	e00e      	b.n	80088c6 <_Balloc+0x6e>
 80088a8:	2221      	movs	r2, #33	; 0x21
 80088aa:	2104      	movs	r1, #4
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fc3f 	bl	8009130 <_calloc_r>
 80088b2:	69e3      	ldr	r3, [r4, #28]
 80088b4:	60f0      	str	r0, [r6, #12]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e4      	bne.n	8008886 <_Balloc+0x2e>
 80088bc:	2000      	movs	r0, #0
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	6802      	ldr	r2, [r0, #0]
 80088c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088c6:	2300      	movs	r3, #0
 80088c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088cc:	e7f7      	b.n	80088be <_Balloc+0x66>
 80088ce:	bf00      	nop
 80088d0:	080099f1 	.word	0x080099f1
 80088d4:	08009a82 	.word	0x08009a82

080088d8 <_Bfree>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	69c6      	ldr	r6, [r0, #28]
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	b976      	cbnz	r6, 8008900 <_Bfree+0x28>
 80088e2:	2010      	movs	r0, #16
 80088e4:	f7fe fb6c 	bl	8006fc0 <malloc>
 80088e8:	4602      	mov	r2, r0
 80088ea:	61e8      	str	r0, [r5, #28]
 80088ec:	b920      	cbnz	r0, 80088f8 <_Bfree+0x20>
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <_Bfree+0x3c>)
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <_Bfree+0x40>)
 80088f2:	218f      	movs	r1, #143	; 0x8f
 80088f4:	f000 fbfe 	bl	80090f4 <__assert_func>
 80088f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088fc:	6006      	str	r6, [r0, #0]
 80088fe:	60c6      	str	r6, [r0, #12]
 8008900:	b13c      	cbz	r4, 8008912 <_Bfree+0x3a>
 8008902:	69eb      	ldr	r3, [r5, #28]
 8008904:	6862      	ldr	r2, [r4, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800890c:	6021      	str	r1, [r4, #0]
 800890e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	080099f1 	.word	0x080099f1
 8008918:	08009a82 	.word	0x08009a82

0800891c <__multadd>:
 800891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	690d      	ldr	r5, [r1, #16]
 8008922:	4607      	mov	r7, r0
 8008924:	460c      	mov	r4, r1
 8008926:	461e      	mov	r6, r3
 8008928:	f101 0c14 	add.w	ip, r1, #20
 800892c:	2000      	movs	r0, #0
 800892e:	f8dc 3000 	ldr.w	r3, [ip]
 8008932:	b299      	uxth	r1, r3
 8008934:	fb02 6101 	mla	r1, r2, r1, r6
 8008938:	0c1e      	lsrs	r6, r3, #16
 800893a:	0c0b      	lsrs	r3, r1, #16
 800893c:	fb02 3306 	mla	r3, r2, r6, r3
 8008940:	b289      	uxth	r1, r1
 8008942:	3001      	adds	r0, #1
 8008944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008948:	4285      	cmp	r5, r0
 800894a:	f84c 1b04 	str.w	r1, [ip], #4
 800894e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008952:	dcec      	bgt.n	800892e <__multadd+0x12>
 8008954:	b30e      	cbz	r6, 800899a <__multadd+0x7e>
 8008956:	68a3      	ldr	r3, [r4, #8]
 8008958:	42ab      	cmp	r3, r5
 800895a:	dc19      	bgt.n	8008990 <__multadd+0x74>
 800895c:	6861      	ldr	r1, [r4, #4]
 800895e:	4638      	mov	r0, r7
 8008960:	3101      	adds	r1, #1
 8008962:	f7ff ff79 	bl	8008858 <_Balloc>
 8008966:	4680      	mov	r8, r0
 8008968:	b928      	cbnz	r0, 8008976 <__multadd+0x5a>
 800896a:	4602      	mov	r2, r0
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <__multadd+0x84>)
 800896e:	480d      	ldr	r0, [pc, #52]	; (80089a4 <__multadd+0x88>)
 8008970:	21ba      	movs	r1, #186	; 0xba
 8008972:	f000 fbbf 	bl	80090f4 <__assert_func>
 8008976:	6922      	ldr	r2, [r4, #16]
 8008978:	3202      	adds	r2, #2
 800897a:	f104 010c 	add.w	r1, r4, #12
 800897e:	0092      	lsls	r2, r2, #2
 8008980:	300c      	adds	r0, #12
 8008982:	f7fe fe8d 	bl	80076a0 <memcpy>
 8008986:	4621      	mov	r1, r4
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff ffa5 	bl	80088d8 <_Bfree>
 800898e:	4644      	mov	r4, r8
 8008990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008994:	3501      	adds	r5, #1
 8008996:	615e      	str	r6, [r3, #20]
 8008998:	6125      	str	r5, [r4, #16]
 800899a:	4620      	mov	r0, r4
 800899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a0:	08009a60 	.word	0x08009a60
 80089a4:	08009a82 	.word	0x08009a82

080089a8 <__hi0bits>:
 80089a8:	0c03      	lsrs	r3, r0, #16
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	b9d3      	cbnz	r3, 80089e4 <__hi0bits+0x3c>
 80089ae:	0400      	lsls	r0, r0, #16
 80089b0:	2310      	movs	r3, #16
 80089b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089b6:	bf04      	itt	eq
 80089b8:	0200      	lsleq	r0, r0, #8
 80089ba:	3308      	addeq	r3, #8
 80089bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089c0:	bf04      	itt	eq
 80089c2:	0100      	lsleq	r0, r0, #4
 80089c4:	3304      	addeq	r3, #4
 80089c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089ca:	bf04      	itt	eq
 80089cc:	0080      	lsleq	r0, r0, #2
 80089ce:	3302      	addeq	r3, #2
 80089d0:	2800      	cmp	r0, #0
 80089d2:	db05      	blt.n	80089e0 <__hi0bits+0x38>
 80089d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089d8:	f103 0301 	add.w	r3, r3, #1
 80089dc:	bf08      	it	eq
 80089de:	2320      	moveq	r3, #32
 80089e0:	4618      	mov	r0, r3
 80089e2:	4770      	bx	lr
 80089e4:	2300      	movs	r3, #0
 80089e6:	e7e4      	b.n	80089b2 <__hi0bits+0xa>

080089e8 <__lo0bits>:
 80089e8:	6803      	ldr	r3, [r0, #0]
 80089ea:	f013 0207 	ands.w	r2, r3, #7
 80089ee:	d00c      	beq.n	8008a0a <__lo0bits+0x22>
 80089f0:	07d9      	lsls	r1, r3, #31
 80089f2:	d422      	bmi.n	8008a3a <__lo0bits+0x52>
 80089f4:	079a      	lsls	r2, r3, #30
 80089f6:	bf49      	itett	mi
 80089f8:	085b      	lsrmi	r3, r3, #1
 80089fa:	089b      	lsrpl	r3, r3, #2
 80089fc:	6003      	strmi	r3, [r0, #0]
 80089fe:	2201      	movmi	r2, #1
 8008a00:	bf5c      	itt	pl
 8008a02:	6003      	strpl	r3, [r0, #0]
 8008a04:	2202      	movpl	r2, #2
 8008a06:	4610      	mov	r0, r2
 8008a08:	4770      	bx	lr
 8008a0a:	b299      	uxth	r1, r3
 8008a0c:	b909      	cbnz	r1, 8008a12 <__lo0bits+0x2a>
 8008a0e:	0c1b      	lsrs	r3, r3, #16
 8008a10:	2210      	movs	r2, #16
 8008a12:	b2d9      	uxtb	r1, r3
 8008a14:	b909      	cbnz	r1, 8008a1a <__lo0bits+0x32>
 8008a16:	3208      	adds	r2, #8
 8008a18:	0a1b      	lsrs	r3, r3, #8
 8008a1a:	0719      	lsls	r1, r3, #28
 8008a1c:	bf04      	itt	eq
 8008a1e:	091b      	lsreq	r3, r3, #4
 8008a20:	3204      	addeq	r2, #4
 8008a22:	0799      	lsls	r1, r3, #30
 8008a24:	bf04      	itt	eq
 8008a26:	089b      	lsreq	r3, r3, #2
 8008a28:	3202      	addeq	r2, #2
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d403      	bmi.n	8008a36 <__lo0bits+0x4e>
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	f102 0201 	add.w	r2, r2, #1
 8008a34:	d003      	beq.n	8008a3e <__lo0bits+0x56>
 8008a36:	6003      	str	r3, [r0, #0]
 8008a38:	e7e5      	b.n	8008a06 <__lo0bits+0x1e>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	e7e3      	b.n	8008a06 <__lo0bits+0x1e>
 8008a3e:	2220      	movs	r2, #32
 8008a40:	e7e1      	b.n	8008a06 <__lo0bits+0x1e>
	...

08008a44 <__i2b>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	460c      	mov	r4, r1
 8008a48:	2101      	movs	r1, #1
 8008a4a:	f7ff ff05 	bl	8008858 <_Balloc>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	b928      	cbnz	r0, 8008a5e <__i2b+0x1a>
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <__i2b+0x24>)
 8008a54:	4805      	ldr	r0, [pc, #20]	; (8008a6c <__i2b+0x28>)
 8008a56:	f240 1145 	movw	r1, #325	; 0x145
 8008a5a:	f000 fb4b 	bl	80090f4 <__assert_func>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	6144      	str	r4, [r0, #20]
 8008a62:	6103      	str	r3, [r0, #16]
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	08009a60 	.word	0x08009a60
 8008a6c:	08009a82 	.word	0x08009a82

08008a70 <__multiply>:
 8008a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a74:	4691      	mov	r9, r2
 8008a76:	690a      	ldr	r2, [r1, #16]
 8008a78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	bfb8      	it	lt
 8008a80:	460b      	movlt	r3, r1
 8008a82:	460c      	mov	r4, r1
 8008a84:	bfbc      	itt	lt
 8008a86:	464c      	movlt	r4, r9
 8008a88:	4699      	movlt	r9, r3
 8008a8a:	6927      	ldr	r7, [r4, #16]
 8008a8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a90:	68a3      	ldr	r3, [r4, #8]
 8008a92:	6861      	ldr	r1, [r4, #4]
 8008a94:	eb07 060a 	add.w	r6, r7, sl
 8008a98:	42b3      	cmp	r3, r6
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	bfb8      	it	lt
 8008a9e:	3101      	addlt	r1, #1
 8008aa0:	f7ff feda 	bl	8008858 <_Balloc>
 8008aa4:	b930      	cbnz	r0, 8008ab4 <__multiply+0x44>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4b44      	ldr	r3, [pc, #272]	; (8008bbc <__multiply+0x14c>)
 8008aaa:	4845      	ldr	r0, [pc, #276]	; (8008bc0 <__multiply+0x150>)
 8008aac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008ab0:	f000 fb20 	bl	80090f4 <__assert_func>
 8008ab4:	f100 0514 	add.w	r5, r0, #20
 8008ab8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008abc:	462b      	mov	r3, r5
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4543      	cmp	r3, r8
 8008ac2:	d321      	bcc.n	8008b08 <__multiply+0x98>
 8008ac4:	f104 0314 	add.w	r3, r4, #20
 8008ac8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008acc:	f109 0314 	add.w	r3, r9, #20
 8008ad0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ad4:	9202      	str	r2, [sp, #8]
 8008ad6:	1b3a      	subs	r2, r7, r4
 8008ad8:	3a15      	subs	r2, #21
 8008ada:	f022 0203 	bic.w	r2, r2, #3
 8008ade:	3204      	adds	r2, #4
 8008ae0:	f104 0115 	add.w	r1, r4, #21
 8008ae4:	428f      	cmp	r7, r1
 8008ae6:	bf38      	it	cc
 8008ae8:	2204      	movcc	r2, #4
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	9a02      	ldr	r2, [sp, #8]
 8008aee:	9303      	str	r3, [sp, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d80c      	bhi.n	8008b0e <__multiply+0x9e>
 8008af4:	2e00      	cmp	r6, #0
 8008af6:	dd03      	ble.n	8008b00 <__multiply+0x90>
 8008af8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d05b      	beq.n	8008bb8 <__multiply+0x148>
 8008b00:	6106      	str	r6, [r0, #16]
 8008b02:	b005      	add	sp, #20
 8008b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b08:	f843 2b04 	str.w	r2, [r3], #4
 8008b0c:	e7d8      	b.n	8008ac0 <__multiply+0x50>
 8008b0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b12:	f1ba 0f00 	cmp.w	sl, #0
 8008b16:	d024      	beq.n	8008b62 <__multiply+0xf2>
 8008b18:	f104 0e14 	add.w	lr, r4, #20
 8008b1c:	46a9      	mov	r9, r5
 8008b1e:	f04f 0c00 	mov.w	ip, #0
 8008b22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b26:	f8d9 1000 	ldr.w	r1, [r9]
 8008b2a:	fa1f fb82 	uxth.w	fp, r2
 8008b2e:	b289      	uxth	r1, r1
 8008b30:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b38:	f8d9 2000 	ldr.w	r2, [r9]
 8008b3c:	4461      	add	r1, ip
 8008b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b42:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b4a:	b289      	uxth	r1, r1
 8008b4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b50:	4577      	cmp	r7, lr
 8008b52:	f849 1b04 	str.w	r1, [r9], #4
 8008b56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b5a:	d8e2      	bhi.n	8008b22 <__multiply+0xb2>
 8008b5c:	9a01      	ldr	r2, [sp, #4]
 8008b5e:	f845 c002 	str.w	ip, [r5, r2]
 8008b62:	9a03      	ldr	r2, [sp, #12]
 8008b64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	f1b9 0f00 	cmp.w	r9, #0
 8008b6e:	d021      	beq.n	8008bb4 <__multiply+0x144>
 8008b70:	6829      	ldr	r1, [r5, #0]
 8008b72:	f104 0c14 	add.w	ip, r4, #20
 8008b76:	46ae      	mov	lr, r5
 8008b78:	f04f 0a00 	mov.w	sl, #0
 8008b7c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b84:	fb09 220b 	mla	r2, r9, fp, r2
 8008b88:	4452      	add	r2, sl
 8008b8a:	b289      	uxth	r1, r1
 8008b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b90:	f84e 1b04 	str.w	r1, [lr], #4
 8008b94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b9c:	f8be 1000 	ldrh.w	r1, [lr]
 8008ba0:	fb09 110a 	mla	r1, r9, sl, r1
 8008ba4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ba8:	4567      	cmp	r7, ip
 8008baa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bae:	d8e5      	bhi.n	8008b7c <__multiply+0x10c>
 8008bb0:	9a01      	ldr	r2, [sp, #4]
 8008bb2:	50a9      	str	r1, [r5, r2]
 8008bb4:	3504      	adds	r5, #4
 8008bb6:	e799      	b.n	8008aec <__multiply+0x7c>
 8008bb8:	3e01      	subs	r6, #1
 8008bba:	e79b      	b.n	8008af4 <__multiply+0x84>
 8008bbc:	08009a60 	.word	0x08009a60
 8008bc0:	08009a82 	.word	0x08009a82

08008bc4 <__pow5mult>:
 8008bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc8:	4615      	mov	r5, r2
 8008bca:	f012 0203 	ands.w	r2, r2, #3
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460f      	mov	r7, r1
 8008bd2:	d007      	beq.n	8008be4 <__pow5mult+0x20>
 8008bd4:	4c25      	ldr	r4, [pc, #148]	; (8008c6c <__pow5mult+0xa8>)
 8008bd6:	3a01      	subs	r2, #1
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bde:	f7ff fe9d 	bl	800891c <__multadd>
 8008be2:	4607      	mov	r7, r0
 8008be4:	10ad      	asrs	r5, r5, #2
 8008be6:	d03d      	beq.n	8008c64 <__pow5mult+0xa0>
 8008be8:	69f4      	ldr	r4, [r6, #28]
 8008bea:	b97c      	cbnz	r4, 8008c0c <__pow5mult+0x48>
 8008bec:	2010      	movs	r0, #16
 8008bee:	f7fe f9e7 	bl	8006fc0 <malloc>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	61f0      	str	r0, [r6, #28]
 8008bf6:	b928      	cbnz	r0, 8008c04 <__pow5mult+0x40>
 8008bf8:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <__pow5mult+0xac>)
 8008bfa:	481e      	ldr	r0, [pc, #120]	; (8008c74 <__pow5mult+0xb0>)
 8008bfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c00:	f000 fa78 	bl	80090f4 <__assert_func>
 8008c04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c08:	6004      	str	r4, [r0, #0]
 8008c0a:	60c4      	str	r4, [r0, #12]
 8008c0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c14:	b94c      	cbnz	r4, 8008c2a <__pow5mult+0x66>
 8008c16:	f240 2171 	movw	r1, #625	; 0x271
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7ff ff12 	bl	8008a44 <__i2b>
 8008c20:	2300      	movs	r3, #0
 8008c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c26:	4604      	mov	r4, r0
 8008c28:	6003      	str	r3, [r0, #0]
 8008c2a:	f04f 0900 	mov.w	r9, #0
 8008c2e:	07eb      	lsls	r3, r5, #31
 8008c30:	d50a      	bpl.n	8008c48 <__pow5mult+0x84>
 8008c32:	4639      	mov	r1, r7
 8008c34:	4622      	mov	r2, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff ff1a 	bl	8008a70 <__multiply>
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4680      	mov	r8, r0
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff fe49 	bl	80088d8 <_Bfree>
 8008c46:	4647      	mov	r7, r8
 8008c48:	106d      	asrs	r5, r5, #1
 8008c4a:	d00b      	beq.n	8008c64 <__pow5mult+0xa0>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	b938      	cbnz	r0, 8008c60 <__pow5mult+0x9c>
 8008c50:	4622      	mov	r2, r4
 8008c52:	4621      	mov	r1, r4
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff ff0b 	bl	8008a70 <__multiply>
 8008c5a:	6020      	str	r0, [r4, #0]
 8008c5c:	f8c0 9000 	str.w	r9, [r0]
 8008c60:	4604      	mov	r4, r0
 8008c62:	e7e4      	b.n	8008c2e <__pow5mult+0x6a>
 8008c64:	4638      	mov	r0, r7
 8008c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6a:	bf00      	nop
 8008c6c:	08009bd0 	.word	0x08009bd0
 8008c70:	080099f1 	.word	0x080099f1
 8008c74:	08009a82 	.word	0x08009a82

08008c78 <__lshift>:
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	6849      	ldr	r1, [r1, #4]
 8008c80:	6923      	ldr	r3, [r4, #16]
 8008c82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c86:	68a3      	ldr	r3, [r4, #8]
 8008c88:	4607      	mov	r7, r0
 8008c8a:	4691      	mov	r9, r2
 8008c8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c90:	f108 0601 	add.w	r6, r8, #1
 8008c94:	42b3      	cmp	r3, r6
 8008c96:	db0b      	blt.n	8008cb0 <__lshift+0x38>
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff fddd 	bl	8008858 <_Balloc>
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	b948      	cbnz	r0, 8008cb6 <__lshift+0x3e>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b28      	ldr	r3, [pc, #160]	; (8008d48 <__lshift+0xd0>)
 8008ca6:	4829      	ldr	r0, [pc, #164]	; (8008d4c <__lshift+0xd4>)
 8008ca8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008cac:	f000 fa22 	bl	80090f4 <__assert_func>
 8008cb0:	3101      	adds	r1, #1
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	e7ee      	b.n	8008c94 <__lshift+0x1c>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f100 0114 	add.w	r1, r0, #20
 8008cbc:	f100 0210 	add.w	r2, r0, #16
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	4553      	cmp	r3, sl
 8008cc4:	db33      	blt.n	8008d2e <__lshift+0xb6>
 8008cc6:	6920      	ldr	r0, [r4, #16]
 8008cc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ccc:	f104 0314 	add.w	r3, r4, #20
 8008cd0:	f019 091f 	ands.w	r9, r9, #31
 8008cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cdc:	d02b      	beq.n	8008d36 <__lshift+0xbe>
 8008cde:	f1c9 0e20 	rsb	lr, r9, #32
 8008ce2:	468a      	mov	sl, r1
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	fa00 f009 	lsl.w	r0, r0, r9
 8008cec:	4310      	orrs	r0, r2
 8008cee:	f84a 0b04 	str.w	r0, [sl], #4
 8008cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf6:	459c      	cmp	ip, r3
 8008cf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cfc:	d8f3      	bhi.n	8008ce6 <__lshift+0x6e>
 8008cfe:	ebac 0304 	sub.w	r3, ip, r4
 8008d02:	3b15      	subs	r3, #21
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	3304      	adds	r3, #4
 8008d0a:	f104 0015 	add.w	r0, r4, #21
 8008d0e:	4584      	cmp	ip, r0
 8008d10:	bf38      	it	cc
 8008d12:	2304      	movcc	r3, #4
 8008d14:	50ca      	str	r2, [r1, r3]
 8008d16:	b10a      	cbz	r2, 8008d1c <__lshift+0xa4>
 8008d18:	f108 0602 	add.w	r6, r8, #2
 8008d1c:	3e01      	subs	r6, #1
 8008d1e:	4638      	mov	r0, r7
 8008d20:	612e      	str	r6, [r5, #16]
 8008d22:	4621      	mov	r1, r4
 8008d24:	f7ff fdd8 	bl	80088d8 <_Bfree>
 8008d28:	4628      	mov	r0, r5
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d32:	3301      	adds	r3, #1
 8008d34:	e7c5      	b.n	8008cc2 <__lshift+0x4a>
 8008d36:	3904      	subs	r1, #4
 8008d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d40:	459c      	cmp	ip, r3
 8008d42:	d8f9      	bhi.n	8008d38 <__lshift+0xc0>
 8008d44:	e7ea      	b.n	8008d1c <__lshift+0xa4>
 8008d46:	bf00      	nop
 8008d48:	08009a60 	.word	0x08009a60
 8008d4c:	08009a82 	.word	0x08009a82

08008d50 <__mcmp>:
 8008d50:	b530      	push	{r4, r5, lr}
 8008d52:	6902      	ldr	r2, [r0, #16]
 8008d54:	690c      	ldr	r4, [r1, #16]
 8008d56:	1b12      	subs	r2, r2, r4
 8008d58:	d10e      	bne.n	8008d78 <__mcmp+0x28>
 8008d5a:	f100 0314 	add.w	r3, r0, #20
 8008d5e:	3114      	adds	r1, #20
 8008d60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d70:	42a5      	cmp	r5, r4
 8008d72:	d003      	beq.n	8008d7c <__mcmp+0x2c>
 8008d74:	d305      	bcc.n	8008d82 <__mcmp+0x32>
 8008d76:	2201      	movs	r2, #1
 8008d78:	4610      	mov	r0, r2
 8008d7a:	bd30      	pop	{r4, r5, pc}
 8008d7c:	4283      	cmp	r3, r0
 8008d7e:	d3f3      	bcc.n	8008d68 <__mcmp+0x18>
 8008d80:	e7fa      	b.n	8008d78 <__mcmp+0x28>
 8008d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d86:	e7f7      	b.n	8008d78 <__mcmp+0x28>

08008d88 <__mdiff>:
 8008d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	460c      	mov	r4, r1
 8008d8e:	4606      	mov	r6, r0
 8008d90:	4611      	mov	r1, r2
 8008d92:	4620      	mov	r0, r4
 8008d94:	4690      	mov	r8, r2
 8008d96:	f7ff ffdb 	bl	8008d50 <__mcmp>
 8008d9a:	1e05      	subs	r5, r0, #0
 8008d9c:	d110      	bne.n	8008dc0 <__mdiff+0x38>
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4630      	mov	r0, r6
 8008da2:	f7ff fd59 	bl	8008858 <_Balloc>
 8008da6:	b930      	cbnz	r0, 8008db6 <__mdiff+0x2e>
 8008da8:	4b3a      	ldr	r3, [pc, #232]	; (8008e94 <__mdiff+0x10c>)
 8008daa:	4602      	mov	r2, r0
 8008dac:	f240 2137 	movw	r1, #567	; 0x237
 8008db0:	4839      	ldr	r0, [pc, #228]	; (8008e98 <__mdiff+0x110>)
 8008db2:	f000 f99f 	bl	80090f4 <__assert_func>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc0:	bfa4      	itt	ge
 8008dc2:	4643      	movge	r3, r8
 8008dc4:	46a0      	movge	r8, r4
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dcc:	bfa6      	itte	ge
 8008dce:	461c      	movge	r4, r3
 8008dd0:	2500      	movge	r5, #0
 8008dd2:	2501      	movlt	r5, #1
 8008dd4:	f7ff fd40 	bl	8008858 <_Balloc>
 8008dd8:	b920      	cbnz	r0, 8008de4 <__mdiff+0x5c>
 8008dda:	4b2e      	ldr	r3, [pc, #184]	; (8008e94 <__mdiff+0x10c>)
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f240 2145 	movw	r1, #581	; 0x245
 8008de2:	e7e5      	b.n	8008db0 <__mdiff+0x28>
 8008de4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008de8:	6926      	ldr	r6, [r4, #16]
 8008dea:	60c5      	str	r5, [r0, #12]
 8008dec:	f104 0914 	add.w	r9, r4, #20
 8008df0:	f108 0514 	add.w	r5, r8, #20
 8008df4:	f100 0e14 	add.w	lr, r0, #20
 8008df8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e00:	f108 0210 	add.w	r2, r8, #16
 8008e04:	46f2      	mov	sl, lr
 8008e06:	2100      	movs	r1, #0
 8008e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e10:	fa11 f88b 	uxtah	r8, r1, fp
 8008e14:	b299      	uxth	r1, r3
 8008e16:	0c1b      	lsrs	r3, r3, #16
 8008e18:	eba8 0801 	sub.w	r8, r8, r1
 8008e1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e24:	fa1f f888 	uxth.w	r8, r8
 8008e28:	1419      	asrs	r1, r3, #16
 8008e2a:	454e      	cmp	r6, r9
 8008e2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e30:	f84a 3b04 	str.w	r3, [sl], #4
 8008e34:	d8e8      	bhi.n	8008e08 <__mdiff+0x80>
 8008e36:	1b33      	subs	r3, r6, r4
 8008e38:	3b15      	subs	r3, #21
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	3304      	adds	r3, #4
 8008e40:	3415      	adds	r4, #21
 8008e42:	42a6      	cmp	r6, r4
 8008e44:	bf38      	it	cc
 8008e46:	2304      	movcc	r3, #4
 8008e48:	441d      	add	r5, r3
 8008e4a:	4473      	add	r3, lr
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	462e      	mov	r6, r5
 8008e50:	4566      	cmp	r6, ip
 8008e52:	d30e      	bcc.n	8008e72 <__mdiff+0xea>
 8008e54:	f10c 0203 	add.w	r2, ip, #3
 8008e58:	1b52      	subs	r2, r2, r5
 8008e5a:	f022 0203 	bic.w	r2, r2, #3
 8008e5e:	3d03      	subs	r5, #3
 8008e60:	45ac      	cmp	ip, r5
 8008e62:	bf38      	it	cc
 8008e64:	2200      	movcc	r2, #0
 8008e66:	4413      	add	r3, r2
 8008e68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e6c:	b17a      	cbz	r2, 8008e8e <__mdiff+0x106>
 8008e6e:	6107      	str	r7, [r0, #16]
 8008e70:	e7a4      	b.n	8008dbc <__mdiff+0x34>
 8008e72:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e76:	fa11 f288 	uxtah	r2, r1, r8
 8008e7a:	1414      	asrs	r4, r2, #16
 8008e7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e80:	b292      	uxth	r2, r2
 8008e82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e86:	f84e 2b04 	str.w	r2, [lr], #4
 8008e8a:	1421      	asrs	r1, r4, #16
 8008e8c:	e7e0      	b.n	8008e50 <__mdiff+0xc8>
 8008e8e:	3f01      	subs	r7, #1
 8008e90:	e7ea      	b.n	8008e68 <__mdiff+0xe0>
 8008e92:	bf00      	nop
 8008e94:	08009a60 	.word	0x08009a60
 8008e98:	08009a82 	.word	0x08009a82

08008e9c <__d2b>:
 8008e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	ec59 8b10 	vmov	r8, r9, d0
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	f7ff fcd5 	bl	8008858 <_Balloc>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	b930      	cbnz	r0, 8008ec0 <__d2b+0x24>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b24      	ldr	r3, [pc, #144]	; (8008f48 <__d2b+0xac>)
 8008eb6:	4825      	ldr	r0, [pc, #148]	; (8008f4c <__d2b+0xb0>)
 8008eb8:	f240 310f 	movw	r1, #783	; 0x30f
 8008ebc:	f000 f91a 	bl	80090f4 <__assert_func>
 8008ec0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ec8:	bb2d      	cbnz	r5, 8008f16 <__d2b+0x7a>
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	f1b8 0300 	subs.w	r3, r8, #0
 8008ed0:	d026      	beq.n	8008f20 <__d2b+0x84>
 8008ed2:	4668      	mov	r0, sp
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	f7ff fd87 	bl	80089e8 <__lo0bits>
 8008eda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ede:	b1e8      	cbz	r0, 8008f1c <__d2b+0x80>
 8008ee0:	f1c0 0320 	rsb	r3, r0, #32
 8008ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	40c2      	lsrs	r2, r0
 8008eec:	6163      	str	r3, [r4, #20]
 8008eee:	9201      	str	r2, [sp, #4]
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	61a3      	str	r3, [r4, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf14      	ite	ne
 8008ef8:	2202      	movne	r2, #2
 8008efa:	2201      	moveq	r2, #1
 8008efc:	6122      	str	r2, [r4, #16]
 8008efe:	b1bd      	cbz	r5, 8008f30 <__d2b+0x94>
 8008f00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f04:	4405      	add	r5, r0
 8008f06:	603d      	str	r5, [r7, #0]
 8008f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f0c:	6030      	str	r0, [r6, #0]
 8008f0e:	4620      	mov	r0, r4
 8008f10:	b003      	add	sp, #12
 8008f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f1a:	e7d6      	b.n	8008eca <__d2b+0x2e>
 8008f1c:	6161      	str	r1, [r4, #20]
 8008f1e:	e7e7      	b.n	8008ef0 <__d2b+0x54>
 8008f20:	a801      	add	r0, sp, #4
 8008f22:	f7ff fd61 	bl	80089e8 <__lo0bits>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	3020      	adds	r0, #32
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	e7e5      	b.n	8008efc <__d2b+0x60>
 8008f30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f38:	6038      	str	r0, [r7, #0]
 8008f3a:	6918      	ldr	r0, [r3, #16]
 8008f3c:	f7ff fd34 	bl	80089a8 <__hi0bits>
 8008f40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f44:	e7e2      	b.n	8008f0c <__d2b+0x70>
 8008f46:	bf00      	nop
 8008f48:	08009a60 	.word	0x08009a60
 8008f4c:	08009a82 	.word	0x08009a82

08008f50 <__sread>:
 8008f50:	b510      	push	{r4, lr}
 8008f52:	460c      	mov	r4, r1
 8008f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f58:	f000 f8a8 	bl	80090ac <_read_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	bfab      	itete	ge
 8008f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f62:	89a3      	ldrhlt	r3, [r4, #12]
 8008f64:	181b      	addge	r3, r3, r0
 8008f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f6a:	bfac      	ite	ge
 8008f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f6e:	81a3      	strhlt	r3, [r4, #12]
 8008f70:	bd10      	pop	{r4, pc}

08008f72 <__swrite>:
 8008f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f76:	461f      	mov	r7, r3
 8008f78:	898b      	ldrh	r3, [r1, #12]
 8008f7a:	05db      	lsls	r3, r3, #23
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	4616      	mov	r6, r2
 8008f82:	d505      	bpl.n	8008f90 <__swrite+0x1e>
 8008f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f88:	2302      	movs	r3, #2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f000 f87c 	bl	8009088 <_lseek_r>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	4632      	mov	r2, r6
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa6:	f000 b893 	b.w	80090d0 <_write_r>

08008faa <__sseek>:
 8008faa:	b510      	push	{r4, lr}
 8008fac:	460c      	mov	r4, r1
 8008fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb2:	f000 f869 	bl	8009088 <_lseek_r>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	bf15      	itete	ne
 8008fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fc6:	81a3      	strheq	r3, [r4, #12]
 8008fc8:	bf18      	it	ne
 8008fca:	81a3      	strhne	r3, [r4, #12]
 8008fcc:	bd10      	pop	{r4, pc}

08008fce <__sclose>:
 8008fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd2:	f000 b849 	b.w	8009068 <_close_r>

08008fd6 <_realloc_r>:
 8008fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	4680      	mov	r8, r0
 8008fdc:	4614      	mov	r4, r2
 8008fde:	460e      	mov	r6, r1
 8008fe0:	b921      	cbnz	r1, 8008fec <_realloc_r+0x16>
 8008fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	f7fe b812 	b.w	8007010 <_malloc_r>
 8008fec:	b92a      	cbnz	r2, 8008ffa <_realloc_r+0x24>
 8008fee:	f7ff f9e1 	bl	80083b4 <_free_r>
 8008ff2:	4625      	mov	r5, r4
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffa:	f000 f8c1 	bl	8009180 <_malloc_usable_size_r>
 8008ffe:	4284      	cmp	r4, r0
 8009000:	4607      	mov	r7, r0
 8009002:	d802      	bhi.n	800900a <_realloc_r+0x34>
 8009004:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009008:	d812      	bhi.n	8009030 <_realloc_r+0x5a>
 800900a:	4621      	mov	r1, r4
 800900c:	4640      	mov	r0, r8
 800900e:	f7fd ffff 	bl	8007010 <_malloc_r>
 8009012:	4605      	mov	r5, r0
 8009014:	2800      	cmp	r0, #0
 8009016:	d0ed      	beq.n	8008ff4 <_realloc_r+0x1e>
 8009018:	42bc      	cmp	r4, r7
 800901a:	4622      	mov	r2, r4
 800901c:	4631      	mov	r1, r6
 800901e:	bf28      	it	cs
 8009020:	463a      	movcs	r2, r7
 8009022:	f7fe fb3d 	bl	80076a0 <memcpy>
 8009026:	4631      	mov	r1, r6
 8009028:	4640      	mov	r0, r8
 800902a:	f7ff f9c3 	bl	80083b4 <_free_r>
 800902e:	e7e1      	b.n	8008ff4 <_realloc_r+0x1e>
 8009030:	4635      	mov	r5, r6
 8009032:	e7df      	b.n	8008ff4 <_realloc_r+0x1e>

08009034 <memmove>:
 8009034:	4288      	cmp	r0, r1
 8009036:	b510      	push	{r4, lr}
 8009038:	eb01 0402 	add.w	r4, r1, r2
 800903c:	d902      	bls.n	8009044 <memmove+0x10>
 800903e:	4284      	cmp	r4, r0
 8009040:	4623      	mov	r3, r4
 8009042:	d807      	bhi.n	8009054 <memmove+0x20>
 8009044:	1e43      	subs	r3, r0, #1
 8009046:	42a1      	cmp	r1, r4
 8009048:	d008      	beq.n	800905c <memmove+0x28>
 800904a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800904e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009052:	e7f8      	b.n	8009046 <memmove+0x12>
 8009054:	4402      	add	r2, r0
 8009056:	4601      	mov	r1, r0
 8009058:	428a      	cmp	r2, r1
 800905a:	d100      	bne.n	800905e <memmove+0x2a>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009066:	e7f7      	b.n	8009058 <memmove+0x24>

08009068 <_close_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d06      	ldr	r5, [pc, #24]	; (8009084 <_close_r+0x1c>)
 800906c:	2300      	movs	r3, #0
 800906e:	4604      	mov	r4, r0
 8009070:	4608      	mov	r0, r1
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	f7f8 ff30 	bl	8001ed8 <_close>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	d102      	bne.n	8009082 <_close_r+0x1a>
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	b103      	cbz	r3, 8009082 <_close_r+0x1a>
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	20000c0c 	.word	0x20000c0c

08009088 <_lseek_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d07      	ldr	r5, [pc, #28]	; (80090a8 <_lseek_r+0x20>)
 800908c:	4604      	mov	r4, r0
 800908e:	4608      	mov	r0, r1
 8009090:	4611      	mov	r1, r2
 8009092:	2200      	movs	r2, #0
 8009094:	602a      	str	r2, [r5, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	f7f8 ff45 	bl	8001f26 <_lseek>
 800909c:	1c43      	adds	r3, r0, #1
 800909e:	d102      	bne.n	80090a6 <_lseek_r+0x1e>
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	b103      	cbz	r3, 80090a6 <_lseek_r+0x1e>
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	bd38      	pop	{r3, r4, r5, pc}
 80090a8:	20000c0c 	.word	0x20000c0c

080090ac <_read_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d07      	ldr	r5, [pc, #28]	; (80090cc <_read_r+0x20>)
 80090b0:	4604      	mov	r4, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	4611      	mov	r1, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	602a      	str	r2, [r5, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	f7f8 fed3 	bl	8001e66 <_read>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_read_r+0x1e>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_read_r+0x1e>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20000c0c 	.word	0x20000c0c

080090d0 <_write_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d07      	ldr	r5, [pc, #28]	; (80090f0 <_write_r+0x20>)
 80090d4:	4604      	mov	r4, r0
 80090d6:	4608      	mov	r0, r1
 80090d8:	4611      	mov	r1, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	602a      	str	r2, [r5, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f7f8 fede 	bl	8001ea0 <_write>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_write_r+0x1e>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_write_r+0x1e>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20000c0c 	.word	0x20000c0c

080090f4 <__assert_func>:
 80090f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090f6:	4614      	mov	r4, r2
 80090f8:	461a      	mov	r2, r3
 80090fa:	4b09      	ldr	r3, [pc, #36]	; (8009120 <__assert_func+0x2c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4605      	mov	r5, r0
 8009100:	68d8      	ldr	r0, [r3, #12]
 8009102:	b14c      	cbz	r4, 8009118 <__assert_func+0x24>
 8009104:	4b07      	ldr	r3, [pc, #28]	; (8009124 <__assert_func+0x30>)
 8009106:	9100      	str	r1, [sp, #0]
 8009108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800910c:	4906      	ldr	r1, [pc, #24]	; (8009128 <__assert_func+0x34>)
 800910e:	462b      	mov	r3, r5
 8009110:	f000 f83e 	bl	8009190 <fiprintf>
 8009114:	f000 f85b 	bl	80091ce <abort>
 8009118:	4b04      	ldr	r3, [pc, #16]	; (800912c <__assert_func+0x38>)
 800911a:	461c      	mov	r4, r3
 800911c:	e7f3      	b.n	8009106 <__assert_func+0x12>
 800911e:	bf00      	nop
 8009120:	200000e4 	.word	0x200000e4
 8009124:	08009ce7 	.word	0x08009ce7
 8009128:	08009cf4 	.word	0x08009cf4
 800912c:	08009d22 	.word	0x08009d22

08009130 <_calloc_r>:
 8009130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009132:	fba1 2402 	umull	r2, r4, r1, r2
 8009136:	b94c      	cbnz	r4, 800914c <_calloc_r+0x1c>
 8009138:	4611      	mov	r1, r2
 800913a:	9201      	str	r2, [sp, #4]
 800913c:	f7fd ff68 	bl	8007010 <_malloc_r>
 8009140:	9a01      	ldr	r2, [sp, #4]
 8009142:	4605      	mov	r5, r0
 8009144:	b930      	cbnz	r0, 8009154 <_calloc_r+0x24>
 8009146:	4628      	mov	r0, r5
 8009148:	b003      	add	sp, #12
 800914a:	bd30      	pop	{r4, r5, pc}
 800914c:	220c      	movs	r2, #12
 800914e:	6002      	str	r2, [r0, #0]
 8009150:	2500      	movs	r5, #0
 8009152:	e7f8      	b.n	8009146 <_calloc_r+0x16>
 8009154:	4621      	mov	r1, r4
 8009156:	f7fe fa5b 	bl	8007610 <memset>
 800915a:	e7f4      	b.n	8009146 <_calloc_r+0x16>

0800915c <__ascii_mbtowc>:
 800915c:	b082      	sub	sp, #8
 800915e:	b901      	cbnz	r1, 8009162 <__ascii_mbtowc+0x6>
 8009160:	a901      	add	r1, sp, #4
 8009162:	b142      	cbz	r2, 8009176 <__ascii_mbtowc+0x1a>
 8009164:	b14b      	cbz	r3, 800917a <__ascii_mbtowc+0x1e>
 8009166:	7813      	ldrb	r3, [r2, #0]
 8009168:	600b      	str	r3, [r1, #0]
 800916a:	7812      	ldrb	r2, [r2, #0]
 800916c:	1e10      	subs	r0, r2, #0
 800916e:	bf18      	it	ne
 8009170:	2001      	movne	r0, #1
 8009172:	b002      	add	sp, #8
 8009174:	4770      	bx	lr
 8009176:	4610      	mov	r0, r2
 8009178:	e7fb      	b.n	8009172 <__ascii_mbtowc+0x16>
 800917a:	f06f 0001 	mvn.w	r0, #1
 800917e:	e7f8      	b.n	8009172 <__ascii_mbtowc+0x16>

08009180 <_malloc_usable_size_r>:
 8009180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009184:	1f18      	subs	r0, r3, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfbc      	itt	lt
 800918a:	580b      	ldrlt	r3, [r1, r0]
 800918c:	18c0      	addlt	r0, r0, r3
 800918e:	4770      	bx	lr

08009190 <fiprintf>:
 8009190:	b40e      	push	{r1, r2, r3}
 8009192:	b503      	push	{r0, r1, lr}
 8009194:	4601      	mov	r1, r0
 8009196:	ab03      	add	r3, sp, #12
 8009198:	4805      	ldr	r0, [pc, #20]	; (80091b0 <fiprintf+0x20>)
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	6800      	ldr	r0, [r0, #0]
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	f000 f845 	bl	8009230 <_vfiprintf_r>
 80091a6:	b002      	add	sp, #8
 80091a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ac:	b003      	add	sp, #12
 80091ae:	4770      	bx	lr
 80091b0:	200000e4 	.word	0x200000e4

080091b4 <__ascii_wctomb>:
 80091b4:	b149      	cbz	r1, 80091ca <__ascii_wctomb+0x16>
 80091b6:	2aff      	cmp	r2, #255	; 0xff
 80091b8:	bf85      	ittet	hi
 80091ba:	238a      	movhi	r3, #138	; 0x8a
 80091bc:	6003      	strhi	r3, [r0, #0]
 80091be:	700a      	strbls	r2, [r1, #0]
 80091c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80091c4:	bf98      	it	ls
 80091c6:	2001      	movls	r0, #1
 80091c8:	4770      	bx	lr
 80091ca:	4608      	mov	r0, r1
 80091cc:	4770      	bx	lr

080091ce <abort>:
 80091ce:	b508      	push	{r3, lr}
 80091d0:	2006      	movs	r0, #6
 80091d2:	f000 fa89 	bl	80096e8 <raise>
 80091d6:	2001      	movs	r0, #1
 80091d8:	f7f8 fe3b 	bl	8001e52 <_exit>

080091dc <__sfputc_r>:
 80091dc:	6893      	ldr	r3, [r2, #8]
 80091de:	3b01      	subs	r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	b410      	push	{r4}
 80091e4:	6093      	str	r3, [r2, #8]
 80091e6:	da08      	bge.n	80091fa <__sfputc_r+0x1e>
 80091e8:	6994      	ldr	r4, [r2, #24]
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	db01      	blt.n	80091f2 <__sfputc_r+0x16>
 80091ee:	290a      	cmp	r1, #10
 80091f0:	d103      	bne.n	80091fa <__sfputc_r+0x1e>
 80091f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f6:	f000 b935 	b.w	8009464 <__swbuf_r>
 80091fa:	6813      	ldr	r3, [r2, #0]
 80091fc:	1c58      	adds	r0, r3, #1
 80091fe:	6010      	str	r0, [r2, #0]
 8009200:	7019      	strb	r1, [r3, #0]
 8009202:	4608      	mov	r0, r1
 8009204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009208:	4770      	bx	lr

0800920a <__sfputs_r>:
 800920a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920c:	4606      	mov	r6, r0
 800920e:	460f      	mov	r7, r1
 8009210:	4614      	mov	r4, r2
 8009212:	18d5      	adds	r5, r2, r3
 8009214:	42ac      	cmp	r4, r5
 8009216:	d101      	bne.n	800921c <__sfputs_r+0x12>
 8009218:	2000      	movs	r0, #0
 800921a:	e007      	b.n	800922c <__sfputs_r+0x22>
 800921c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009220:	463a      	mov	r2, r7
 8009222:	4630      	mov	r0, r6
 8009224:	f7ff ffda 	bl	80091dc <__sfputc_r>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d1f3      	bne.n	8009214 <__sfputs_r+0xa>
 800922c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009230 <_vfiprintf_r>:
 8009230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	460d      	mov	r5, r1
 8009236:	b09d      	sub	sp, #116	; 0x74
 8009238:	4614      	mov	r4, r2
 800923a:	4698      	mov	r8, r3
 800923c:	4606      	mov	r6, r0
 800923e:	b118      	cbz	r0, 8009248 <_vfiprintf_r+0x18>
 8009240:	6a03      	ldr	r3, [r0, #32]
 8009242:	b90b      	cbnz	r3, 8009248 <_vfiprintf_r+0x18>
 8009244:	f7fe f9ae 	bl	80075a4 <__sinit>
 8009248:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800924a:	07d9      	lsls	r1, r3, #31
 800924c:	d405      	bmi.n	800925a <_vfiprintf_r+0x2a>
 800924e:	89ab      	ldrh	r3, [r5, #12]
 8009250:	059a      	lsls	r2, r3, #22
 8009252:	d402      	bmi.n	800925a <_vfiprintf_r+0x2a>
 8009254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009256:	f7fe fa21 	bl	800769c <__retarget_lock_acquire_recursive>
 800925a:	89ab      	ldrh	r3, [r5, #12]
 800925c:	071b      	lsls	r3, r3, #28
 800925e:	d501      	bpl.n	8009264 <_vfiprintf_r+0x34>
 8009260:	692b      	ldr	r3, [r5, #16]
 8009262:	b99b      	cbnz	r3, 800928c <_vfiprintf_r+0x5c>
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f000 f93a 	bl	80094e0 <__swsetup_r>
 800926c:	b170      	cbz	r0, 800928c <_vfiprintf_r+0x5c>
 800926e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009270:	07dc      	lsls	r4, r3, #31
 8009272:	d504      	bpl.n	800927e <_vfiprintf_r+0x4e>
 8009274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009278:	b01d      	add	sp, #116	; 0x74
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	0598      	lsls	r0, r3, #22
 8009282:	d4f7      	bmi.n	8009274 <_vfiprintf_r+0x44>
 8009284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009286:	f7fe fa0a 	bl	800769e <__retarget_lock_release_recursive>
 800928a:	e7f3      	b.n	8009274 <_vfiprintf_r+0x44>
 800928c:	2300      	movs	r3, #0
 800928e:	9309      	str	r3, [sp, #36]	; 0x24
 8009290:	2320      	movs	r3, #32
 8009292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009296:	f8cd 800c 	str.w	r8, [sp, #12]
 800929a:	2330      	movs	r3, #48	; 0x30
 800929c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009450 <_vfiprintf_r+0x220>
 80092a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a4:	f04f 0901 	mov.w	r9, #1
 80092a8:	4623      	mov	r3, r4
 80092aa:	469a      	mov	sl, r3
 80092ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b0:	b10a      	cbz	r2, 80092b6 <_vfiprintf_r+0x86>
 80092b2:	2a25      	cmp	r2, #37	; 0x25
 80092b4:	d1f9      	bne.n	80092aa <_vfiprintf_r+0x7a>
 80092b6:	ebba 0b04 	subs.w	fp, sl, r4
 80092ba:	d00b      	beq.n	80092d4 <_vfiprintf_r+0xa4>
 80092bc:	465b      	mov	r3, fp
 80092be:	4622      	mov	r2, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ffa1 	bl	800920a <__sfputs_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f000 80a9 	beq.w	8009420 <_vfiprintf_r+0x1f0>
 80092ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d0:	445a      	add	r2, fp
 80092d2:	9209      	str	r2, [sp, #36]	; 0x24
 80092d4:	f89a 3000 	ldrb.w	r3, [sl]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 80a1 	beq.w	8009420 <_vfiprintf_r+0x1f0>
 80092de:	2300      	movs	r3, #0
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092e8:	f10a 0a01 	add.w	sl, sl, #1
 80092ec:	9304      	str	r3, [sp, #16]
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f4:	931a      	str	r3, [sp, #104]	; 0x68
 80092f6:	4654      	mov	r4, sl
 80092f8:	2205      	movs	r2, #5
 80092fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092fe:	4854      	ldr	r0, [pc, #336]	; (8009450 <_vfiprintf_r+0x220>)
 8009300:	f7f6 ff66 	bl	80001d0 <memchr>
 8009304:	9a04      	ldr	r2, [sp, #16]
 8009306:	b9d8      	cbnz	r0, 8009340 <_vfiprintf_r+0x110>
 8009308:	06d1      	lsls	r1, r2, #27
 800930a:	bf44      	itt	mi
 800930c:	2320      	movmi	r3, #32
 800930e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009312:	0713      	lsls	r3, r2, #28
 8009314:	bf44      	itt	mi
 8009316:	232b      	movmi	r3, #43	; 0x2b
 8009318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800931c:	f89a 3000 	ldrb.w	r3, [sl]
 8009320:	2b2a      	cmp	r3, #42	; 0x2a
 8009322:	d015      	beq.n	8009350 <_vfiprintf_r+0x120>
 8009324:	9a07      	ldr	r2, [sp, #28]
 8009326:	4654      	mov	r4, sl
 8009328:	2000      	movs	r0, #0
 800932a:	f04f 0c0a 	mov.w	ip, #10
 800932e:	4621      	mov	r1, r4
 8009330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009334:	3b30      	subs	r3, #48	; 0x30
 8009336:	2b09      	cmp	r3, #9
 8009338:	d94d      	bls.n	80093d6 <_vfiprintf_r+0x1a6>
 800933a:	b1b0      	cbz	r0, 800936a <_vfiprintf_r+0x13a>
 800933c:	9207      	str	r2, [sp, #28]
 800933e:	e014      	b.n	800936a <_vfiprintf_r+0x13a>
 8009340:	eba0 0308 	sub.w	r3, r0, r8
 8009344:	fa09 f303 	lsl.w	r3, r9, r3
 8009348:	4313      	orrs	r3, r2
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	46a2      	mov	sl, r4
 800934e:	e7d2      	b.n	80092f6 <_vfiprintf_r+0xc6>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	1d19      	adds	r1, r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	9103      	str	r1, [sp, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfbb      	ittet	lt
 800935c:	425b      	neglt	r3, r3
 800935e:	f042 0202 	orrlt.w	r2, r2, #2
 8009362:	9307      	strge	r3, [sp, #28]
 8009364:	9307      	strlt	r3, [sp, #28]
 8009366:	bfb8      	it	lt
 8009368:	9204      	strlt	r2, [sp, #16]
 800936a:	7823      	ldrb	r3, [r4, #0]
 800936c:	2b2e      	cmp	r3, #46	; 0x2e
 800936e:	d10c      	bne.n	800938a <_vfiprintf_r+0x15a>
 8009370:	7863      	ldrb	r3, [r4, #1]
 8009372:	2b2a      	cmp	r3, #42	; 0x2a
 8009374:	d134      	bne.n	80093e0 <_vfiprintf_r+0x1b0>
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	1d1a      	adds	r2, r3, #4
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	9203      	str	r2, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009386:	3402      	adds	r4, #2
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009460 <_vfiprintf_r+0x230>
 800938e:	7821      	ldrb	r1, [r4, #0]
 8009390:	2203      	movs	r2, #3
 8009392:	4650      	mov	r0, sl
 8009394:	f7f6 ff1c 	bl	80001d0 <memchr>
 8009398:	b138      	cbz	r0, 80093aa <_vfiprintf_r+0x17a>
 800939a:	9b04      	ldr	r3, [sp, #16]
 800939c:	eba0 000a 	sub.w	r0, r0, sl
 80093a0:	2240      	movs	r2, #64	; 0x40
 80093a2:	4082      	lsls	r2, r0
 80093a4:	4313      	orrs	r3, r2
 80093a6:	3401      	adds	r4, #1
 80093a8:	9304      	str	r3, [sp, #16]
 80093aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ae:	4829      	ldr	r0, [pc, #164]	; (8009454 <_vfiprintf_r+0x224>)
 80093b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093b4:	2206      	movs	r2, #6
 80093b6:	f7f6 ff0b 	bl	80001d0 <memchr>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d03f      	beq.n	800943e <_vfiprintf_r+0x20e>
 80093be:	4b26      	ldr	r3, [pc, #152]	; (8009458 <_vfiprintf_r+0x228>)
 80093c0:	bb1b      	cbnz	r3, 800940a <_vfiprintf_r+0x1da>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	3307      	adds	r3, #7
 80093c6:	f023 0307 	bic.w	r3, r3, #7
 80093ca:	3308      	adds	r3, #8
 80093cc:	9303      	str	r3, [sp, #12]
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	443b      	add	r3, r7
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
 80093d4:	e768      	b.n	80092a8 <_vfiprintf_r+0x78>
 80093d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093da:	460c      	mov	r4, r1
 80093dc:	2001      	movs	r0, #1
 80093de:	e7a6      	b.n	800932e <_vfiprintf_r+0xfe>
 80093e0:	2300      	movs	r3, #0
 80093e2:	3401      	adds	r4, #1
 80093e4:	9305      	str	r3, [sp, #20]
 80093e6:	4619      	mov	r1, r3
 80093e8:	f04f 0c0a 	mov.w	ip, #10
 80093ec:	4620      	mov	r0, r4
 80093ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f2:	3a30      	subs	r2, #48	; 0x30
 80093f4:	2a09      	cmp	r2, #9
 80093f6:	d903      	bls.n	8009400 <_vfiprintf_r+0x1d0>
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0c6      	beq.n	800938a <_vfiprintf_r+0x15a>
 80093fc:	9105      	str	r1, [sp, #20]
 80093fe:	e7c4      	b.n	800938a <_vfiprintf_r+0x15a>
 8009400:	fb0c 2101 	mla	r1, ip, r1, r2
 8009404:	4604      	mov	r4, r0
 8009406:	2301      	movs	r3, #1
 8009408:	e7f0      	b.n	80093ec <_vfiprintf_r+0x1bc>
 800940a:	ab03      	add	r3, sp, #12
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	462a      	mov	r2, r5
 8009410:	4b12      	ldr	r3, [pc, #72]	; (800945c <_vfiprintf_r+0x22c>)
 8009412:	a904      	add	r1, sp, #16
 8009414:	4630      	mov	r0, r6
 8009416:	f7fd fb9d 	bl	8006b54 <_printf_float>
 800941a:	4607      	mov	r7, r0
 800941c:	1c78      	adds	r0, r7, #1
 800941e:	d1d6      	bne.n	80093ce <_vfiprintf_r+0x19e>
 8009420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009422:	07d9      	lsls	r1, r3, #31
 8009424:	d405      	bmi.n	8009432 <_vfiprintf_r+0x202>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	059a      	lsls	r2, r3, #22
 800942a:	d402      	bmi.n	8009432 <_vfiprintf_r+0x202>
 800942c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800942e:	f7fe f936 	bl	800769e <__retarget_lock_release_recursive>
 8009432:	89ab      	ldrh	r3, [r5, #12]
 8009434:	065b      	lsls	r3, r3, #25
 8009436:	f53f af1d 	bmi.w	8009274 <_vfiprintf_r+0x44>
 800943a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800943c:	e71c      	b.n	8009278 <_vfiprintf_r+0x48>
 800943e:	ab03      	add	r3, sp, #12
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	462a      	mov	r2, r5
 8009444:	4b05      	ldr	r3, [pc, #20]	; (800945c <_vfiprintf_r+0x22c>)
 8009446:	a904      	add	r1, sp, #16
 8009448:	4630      	mov	r0, r6
 800944a:	f7fd fecf 	bl	80071ec <_printf_i>
 800944e:	e7e4      	b.n	800941a <_vfiprintf_r+0x1ea>
 8009450:	08009a71 	.word	0x08009a71
 8009454:	08009a7b 	.word	0x08009a7b
 8009458:	08006b55 	.word	0x08006b55
 800945c:	0800920b 	.word	0x0800920b
 8009460:	08009a77 	.word	0x08009a77

08009464 <__swbuf_r>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	460e      	mov	r6, r1
 8009468:	4614      	mov	r4, r2
 800946a:	4605      	mov	r5, r0
 800946c:	b118      	cbz	r0, 8009476 <__swbuf_r+0x12>
 800946e:	6a03      	ldr	r3, [r0, #32]
 8009470:	b90b      	cbnz	r3, 8009476 <__swbuf_r+0x12>
 8009472:	f7fe f897 	bl	80075a4 <__sinit>
 8009476:	69a3      	ldr	r3, [r4, #24]
 8009478:	60a3      	str	r3, [r4, #8]
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	071a      	lsls	r2, r3, #28
 800947e:	d525      	bpl.n	80094cc <__swbuf_r+0x68>
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	b31b      	cbz	r3, 80094cc <__swbuf_r+0x68>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	6922      	ldr	r2, [r4, #16]
 8009488:	1a98      	subs	r0, r3, r2
 800948a:	6963      	ldr	r3, [r4, #20]
 800948c:	b2f6      	uxtb	r6, r6
 800948e:	4283      	cmp	r3, r0
 8009490:	4637      	mov	r7, r6
 8009492:	dc04      	bgt.n	800949e <__swbuf_r+0x3a>
 8009494:	4621      	mov	r1, r4
 8009496:	4628      	mov	r0, r5
 8009498:	f7ff f9b6 	bl	8008808 <_fflush_r>
 800949c:	b9e0      	cbnz	r0, 80094d8 <__swbuf_r+0x74>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	6022      	str	r2, [r4, #0]
 80094aa:	701e      	strb	r6, [r3, #0]
 80094ac:	6962      	ldr	r2, [r4, #20]
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d004      	beq.n	80094be <__swbuf_r+0x5a>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	07db      	lsls	r3, r3, #31
 80094b8:	d506      	bpl.n	80094c8 <__swbuf_r+0x64>
 80094ba:	2e0a      	cmp	r6, #10
 80094bc:	d104      	bne.n	80094c8 <__swbuf_r+0x64>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff f9a1 	bl	8008808 <_fflush_r>
 80094c6:	b938      	cbnz	r0, 80094d8 <__swbuf_r+0x74>
 80094c8:	4638      	mov	r0, r7
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094cc:	4621      	mov	r1, r4
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f806 	bl	80094e0 <__swsetup_r>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d0d5      	beq.n	8009484 <__swbuf_r+0x20>
 80094d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094dc:	e7f4      	b.n	80094c8 <__swbuf_r+0x64>
	...

080094e0 <__swsetup_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <__swsetup_r+0xac>)
 80094e4:	4605      	mov	r5, r0
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	460c      	mov	r4, r1
 80094ea:	b118      	cbz	r0, 80094f4 <__swsetup_r+0x14>
 80094ec:	6a03      	ldr	r3, [r0, #32]
 80094ee:	b90b      	cbnz	r3, 80094f4 <__swsetup_r+0x14>
 80094f0:	f7fe f858 	bl	80075a4 <__sinit>
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094fa:	0718      	lsls	r0, r3, #28
 80094fc:	d422      	bmi.n	8009544 <__swsetup_r+0x64>
 80094fe:	06d9      	lsls	r1, r3, #27
 8009500:	d407      	bmi.n	8009512 <__swsetup_r+0x32>
 8009502:	2309      	movs	r3, #9
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009510:	e034      	b.n	800957c <__swsetup_r+0x9c>
 8009512:	0758      	lsls	r0, r3, #29
 8009514:	d512      	bpl.n	800953c <__swsetup_r+0x5c>
 8009516:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009518:	b141      	cbz	r1, 800952c <__swsetup_r+0x4c>
 800951a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800951e:	4299      	cmp	r1, r3
 8009520:	d002      	beq.n	8009528 <__swsetup_r+0x48>
 8009522:	4628      	mov	r0, r5
 8009524:	f7fe ff46 	bl	80083b4 <_free_r>
 8009528:	2300      	movs	r3, #0
 800952a:	6363      	str	r3, [r4, #52]	; 0x34
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009532:	81a3      	strh	r3, [r4, #12]
 8009534:	2300      	movs	r3, #0
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	f043 0308 	orr.w	r3, r3, #8
 8009542:	81a3      	strh	r3, [r4, #12]
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	b94b      	cbnz	r3, 800955c <__swsetup_r+0x7c>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800954e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009552:	d003      	beq.n	800955c <__swsetup_r+0x7c>
 8009554:	4621      	mov	r1, r4
 8009556:	4628      	mov	r0, r5
 8009558:	f000 f840 	bl	80095dc <__smakebuf_r>
 800955c:	89a0      	ldrh	r0, [r4, #12]
 800955e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009562:	f010 0301 	ands.w	r3, r0, #1
 8009566:	d00a      	beq.n	800957e <__swsetup_r+0x9e>
 8009568:	2300      	movs	r3, #0
 800956a:	60a3      	str	r3, [r4, #8]
 800956c:	6963      	ldr	r3, [r4, #20]
 800956e:	425b      	negs	r3, r3
 8009570:	61a3      	str	r3, [r4, #24]
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	b943      	cbnz	r3, 8009588 <__swsetup_r+0xa8>
 8009576:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800957a:	d1c4      	bne.n	8009506 <__swsetup_r+0x26>
 800957c:	bd38      	pop	{r3, r4, r5, pc}
 800957e:	0781      	lsls	r1, r0, #30
 8009580:	bf58      	it	pl
 8009582:	6963      	ldrpl	r3, [r4, #20]
 8009584:	60a3      	str	r3, [r4, #8]
 8009586:	e7f4      	b.n	8009572 <__swsetup_r+0x92>
 8009588:	2000      	movs	r0, #0
 800958a:	e7f7      	b.n	800957c <__swsetup_r+0x9c>
 800958c:	200000e4 	.word	0x200000e4

08009590 <__swhatbuf_r>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	460c      	mov	r4, r1
 8009594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009598:	2900      	cmp	r1, #0
 800959a:	b096      	sub	sp, #88	; 0x58
 800959c:	4615      	mov	r5, r2
 800959e:	461e      	mov	r6, r3
 80095a0:	da0d      	bge.n	80095be <__swhatbuf_r+0x2e>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095a8:	f04f 0100 	mov.w	r1, #0
 80095ac:	bf0c      	ite	eq
 80095ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095b2:	2340      	movne	r3, #64	; 0x40
 80095b4:	2000      	movs	r0, #0
 80095b6:	6031      	str	r1, [r6, #0]
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	b016      	add	sp, #88	; 0x58
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	466a      	mov	r2, sp
 80095c0:	f000 f848 	bl	8009654 <_fstat_r>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	dbec      	blt.n	80095a2 <__swhatbuf_r+0x12>
 80095c8:	9901      	ldr	r1, [sp, #4]
 80095ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095d2:	4259      	negs	r1, r3
 80095d4:	4159      	adcs	r1, r3
 80095d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095da:	e7eb      	b.n	80095b4 <__swhatbuf_r+0x24>

080095dc <__smakebuf_r>:
 80095dc:	898b      	ldrh	r3, [r1, #12]
 80095de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095e0:	079d      	lsls	r5, r3, #30
 80095e2:	4606      	mov	r6, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	d507      	bpl.n	80095f8 <__smakebuf_r+0x1c>
 80095e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	2301      	movs	r3, #1
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	b002      	add	sp, #8
 80095f6:	bd70      	pop	{r4, r5, r6, pc}
 80095f8:	ab01      	add	r3, sp, #4
 80095fa:	466a      	mov	r2, sp
 80095fc:	f7ff ffc8 	bl	8009590 <__swhatbuf_r>
 8009600:	9900      	ldr	r1, [sp, #0]
 8009602:	4605      	mov	r5, r0
 8009604:	4630      	mov	r0, r6
 8009606:	f7fd fd03 	bl	8007010 <_malloc_r>
 800960a:	b948      	cbnz	r0, 8009620 <__smakebuf_r+0x44>
 800960c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009610:	059a      	lsls	r2, r3, #22
 8009612:	d4ef      	bmi.n	80095f4 <__smakebuf_r+0x18>
 8009614:	f023 0303 	bic.w	r3, r3, #3
 8009618:	f043 0302 	orr.w	r3, r3, #2
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	e7e3      	b.n	80095e8 <__smakebuf_r+0xc>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	6020      	str	r0, [r4, #0]
 8009624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	9b00      	ldr	r3, [sp, #0]
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	6120      	str	r0, [r4, #16]
 8009632:	b15b      	cbz	r3, 800964c <__smakebuf_r+0x70>
 8009634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009638:	4630      	mov	r0, r6
 800963a:	f000 f81d 	bl	8009678 <_isatty_r>
 800963e:	b128      	cbz	r0, 800964c <__smakebuf_r+0x70>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f023 0303 	bic.w	r3, r3, #3
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	431d      	orrs	r5, r3
 8009650:	81a5      	strh	r5, [r4, #12]
 8009652:	e7cf      	b.n	80095f4 <__smakebuf_r+0x18>

08009654 <_fstat_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_fstat_r+0x20>)
 8009658:	2300      	movs	r3, #0
 800965a:	4604      	mov	r4, r0
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f7f8 fc45 	bl	8001ef0 <_fstat>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d102      	bne.n	8009670 <_fstat_r+0x1c>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	b103      	cbz	r3, 8009670 <_fstat_r+0x1c>
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	20000c0c 	.word	0x20000c0c

08009678 <_isatty_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d06      	ldr	r5, [pc, #24]	; (8009694 <_isatty_r+0x1c>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7f8 fc44 	bl	8001f10 <_isatty>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_isatty_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_isatty_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20000c0c 	.word	0x20000c0c

08009698 <_raise_r>:
 8009698:	291f      	cmp	r1, #31
 800969a:	b538      	push	{r3, r4, r5, lr}
 800969c:	4604      	mov	r4, r0
 800969e:	460d      	mov	r5, r1
 80096a0:	d904      	bls.n	80096ac <_raise_r+0x14>
 80096a2:	2316      	movs	r3, #22
 80096a4:	6003      	str	r3, [r0, #0]
 80096a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80096ae:	b112      	cbz	r2, 80096b6 <_raise_r+0x1e>
 80096b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096b4:	b94b      	cbnz	r3, 80096ca <_raise_r+0x32>
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 f830 	bl	800971c <_getpid_r>
 80096bc:	462a      	mov	r2, r5
 80096be:	4601      	mov	r1, r0
 80096c0:	4620      	mov	r0, r4
 80096c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c6:	f000 b817 	b.w	80096f8 <_kill_r>
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d00a      	beq.n	80096e4 <_raise_r+0x4c>
 80096ce:	1c59      	adds	r1, r3, #1
 80096d0:	d103      	bne.n	80096da <_raise_r+0x42>
 80096d2:	2316      	movs	r3, #22
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	2001      	movs	r0, #1
 80096d8:	e7e7      	b.n	80096aa <_raise_r+0x12>
 80096da:	2400      	movs	r4, #0
 80096dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096e0:	4628      	mov	r0, r5
 80096e2:	4798      	blx	r3
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7e0      	b.n	80096aa <_raise_r+0x12>

080096e8 <raise>:
 80096e8:	4b02      	ldr	r3, [pc, #8]	; (80096f4 <raise+0xc>)
 80096ea:	4601      	mov	r1, r0
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	f7ff bfd3 	b.w	8009698 <_raise_r>
 80096f2:	bf00      	nop
 80096f4:	200000e4 	.word	0x200000e4

080096f8 <_kill_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	; (8009718 <_kill_r+0x20>)
 80096fc:	2300      	movs	r3, #0
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	602b      	str	r3, [r5, #0]
 8009706:	f7f8 fb94 	bl	8001e32 <_kill>
 800970a:	1c43      	adds	r3, r0, #1
 800970c:	d102      	bne.n	8009714 <_kill_r+0x1c>
 800970e:	682b      	ldr	r3, [r5, #0]
 8009710:	b103      	cbz	r3, 8009714 <_kill_r+0x1c>
 8009712:	6023      	str	r3, [r4, #0]
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	bf00      	nop
 8009718:	20000c0c 	.word	0x20000c0c

0800971c <_getpid_r>:
 800971c:	f7f8 bb81 	b.w	8001e22 <_getpid>

08009720 <sqrt>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	ed2d 8b02 	vpush	{d8}
 8009726:	ec55 4b10 	vmov	r4, r5, d0
 800972a:	f000 f825 	bl	8009778 <__ieee754_sqrt>
 800972e:	4622      	mov	r2, r4
 8009730:	462b      	mov	r3, r5
 8009732:	4620      	mov	r0, r4
 8009734:	4629      	mov	r1, r5
 8009736:	eeb0 8a40 	vmov.f32	s16, s0
 800973a:	eef0 8a60 	vmov.f32	s17, s1
 800973e:	f7f7 f9f5 	bl	8000b2c <__aeabi_dcmpun>
 8009742:	b990      	cbnz	r0, 800976a <sqrt+0x4a>
 8009744:	2200      	movs	r2, #0
 8009746:	2300      	movs	r3, #0
 8009748:	4620      	mov	r0, r4
 800974a:	4629      	mov	r1, r5
 800974c:	f7f7 f9c6 	bl	8000adc <__aeabi_dcmplt>
 8009750:	b158      	cbz	r0, 800976a <sqrt+0x4a>
 8009752:	f7fd ff79 	bl	8007648 <__errno>
 8009756:	2321      	movs	r3, #33	; 0x21
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	2200      	movs	r2, #0
 800975c:	2300      	movs	r3, #0
 800975e:	4610      	mov	r0, r2
 8009760:	4619      	mov	r1, r3
 8009762:	f7f7 f873 	bl	800084c <__aeabi_ddiv>
 8009766:	ec41 0b18 	vmov	d8, r0, r1
 800976a:	eeb0 0a48 	vmov.f32	s0, s16
 800976e:	eef0 0a68 	vmov.f32	s1, s17
 8009772:	ecbd 8b02 	vpop	{d8}
 8009776:	bd38      	pop	{r3, r4, r5, pc}

08009778 <__ieee754_sqrt>:
 8009778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	ec55 4b10 	vmov	r4, r5, d0
 8009780:	4e67      	ldr	r6, [pc, #412]	; (8009920 <__ieee754_sqrt+0x1a8>)
 8009782:	43ae      	bics	r6, r5
 8009784:	ee10 0a10 	vmov	r0, s0
 8009788:	ee10 2a10 	vmov	r2, s0
 800978c:	4629      	mov	r1, r5
 800978e:	462b      	mov	r3, r5
 8009790:	d10d      	bne.n	80097ae <__ieee754_sqrt+0x36>
 8009792:	f7f6 ff31 	bl	80005f8 <__aeabi_dmul>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4620      	mov	r0, r4
 800979c:	4629      	mov	r1, r5
 800979e:	f7f6 fd75 	bl	800028c <__adddf3>
 80097a2:	4604      	mov	r4, r0
 80097a4:	460d      	mov	r5, r1
 80097a6:	ec45 4b10 	vmov	d0, r4, r5
 80097aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	dc0b      	bgt.n	80097ca <__ieee754_sqrt+0x52>
 80097b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097b6:	4326      	orrs	r6, r4
 80097b8:	d0f5      	beq.n	80097a6 <__ieee754_sqrt+0x2e>
 80097ba:	b135      	cbz	r5, 80097ca <__ieee754_sqrt+0x52>
 80097bc:	f7f6 fd64 	bl	8000288 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	f7f7 f842 	bl	800084c <__aeabi_ddiv>
 80097c8:	e7eb      	b.n	80097a2 <__ieee754_sqrt+0x2a>
 80097ca:	1509      	asrs	r1, r1, #20
 80097cc:	f000 808d 	beq.w	80098ea <__ieee754_sqrt+0x172>
 80097d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80097d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097dc:	07c9      	lsls	r1, r1, #31
 80097de:	bf5c      	itt	pl
 80097e0:	005b      	lslpl	r3, r3, #1
 80097e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80097e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097ea:	bf58      	it	pl
 80097ec:	0052      	lslpl	r2, r2, #1
 80097ee:	2500      	movs	r5, #0
 80097f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80097f4:	1076      	asrs	r6, r6, #1
 80097f6:	0052      	lsls	r2, r2, #1
 80097f8:	f04f 0e16 	mov.w	lr, #22
 80097fc:	46ac      	mov	ip, r5
 80097fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009802:	eb0c 0001 	add.w	r0, ip, r1
 8009806:	4298      	cmp	r0, r3
 8009808:	bfde      	ittt	le
 800980a:	1a1b      	suble	r3, r3, r0
 800980c:	eb00 0c01 	addle.w	ip, r0, r1
 8009810:	186d      	addle	r5, r5, r1
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	f1be 0e01 	subs.w	lr, lr, #1
 8009818:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800981c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009820:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009824:	d1ed      	bne.n	8009802 <__ieee754_sqrt+0x8a>
 8009826:	4674      	mov	r4, lr
 8009828:	2720      	movs	r7, #32
 800982a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800982e:	4563      	cmp	r3, ip
 8009830:	eb01 000e 	add.w	r0, r1, lr
 8009834:	dc02      	bgt.n	800983c <__ieee754_sqrt+0xc4>
 8009836:	d113      	bne.n	8009860 <__ieee754_sqrt+0xe8>
 8009838:	4290      	cmp	r0, r2
 800983a:	d811      	bhi.n	8009860 <__ieee754_sqrt+0xe8>
 800983c:	2800      	cmp	r0, #0
 800983e:	eb00 0e01 	add.w	lr, r0, r1
 8009842:	da57      	bge.n	80098f4 <__ieee754_sqrt+0x17c>
 8009844:	f1be 0f00 	cmp.w	lr, #0
 8009848:	db54      	blt.n	80098f4 <__ieee754_sqrt+0x17c>
 800984a:	f10c 0801 	add.w	r8, ip, #1
 800984e:	eba3 030c 	sub.w	r3, r3, ip
 8009852:	4290      	cmp	r0, r2
 8009854:	bf88      	it	hi
 8009856:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800985a:	1a12      	subs	r2, r2, r0
 800985c:	440c      	add	r4, r1
 800985e:	46c4      	mov	ip, r8
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	3f01      	subs	r7, #1
 8009864:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009868:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800986c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009870:	d1dd      	bne.n	800982e <__ieee754_sqrt+0xb6>
 8009872:	4313      	orrs	r3, r2
 8009874:	d01b      	beq.n	80098ae <__ieee754_sqrt+0x136>
 8009876:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009924 <__ieee754_sqrt+0x1ac>
 800987a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009928 <__ieee754_sqrt+0x1b0>
 800987e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009882:	e9db 2300 	ldrd	r2, r3, [fp]
 8009886:	f7f6 fcff 	bl	8000288 <__aeabi_dsub>
 800988a:	e9da 8900 	ldrd	r8, r9, [sl]
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4640      	mov	r0, r8
 8009894:	4649      	mov	r1, r9
 8009896:	f7f7 f92b 	bl	8000af0 <__aeabi_dcmple>
 800989a:	b140      	cbz	r0, 80098ae <__ieee754_sqrt+0x136>
 800989c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80098a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80098a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80098a8:	d126      	bne.n	80098f8 <__ieee754_sqrt+0x180>
 80098aa:	3501      	adds	r5, #1
 80098ac:	463c      	mov	r4, r7
 80098ae:	106a      	asrs	r2, r5, #1
 80098b0:	0863      	lsrs	r3, r4, #1
 80098b2:	07e9      	lsls	r1, r5, #31
 80098b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80098b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80098bc:	bf48      	it	mi
 80098be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80098c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80098c6:	461c      	mov	r4, r3
 80098c8:	e76d      	b.n	80097a6 <__ieee754_sqrt+0x2e>
 80098ca:	0ad3      	lsrs	r3, r2, #11
 80098cc:	3815      	subs	r0, #21
 80098ce:	0552      	lsls	r2, r2, #21
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d0fa      	beq.n	80098ca <__ieee754_sqrt+0x152>
 80098d4:	02dc      	lsls	r4, r3, #11
 80098d6:	d50a      	bpl.n	80098ee <__ieee754_sqrt+0x176>
 80098d8:	f1c1 0420 	rsb	r4, r1, #32
 80098dc:	fa22 f404 	lsr.w	r4, r2, r4
 80098e0:	1e4d      	subs	r5, r1, #1
 80098e2:	408a      	lsls	r2, r1
 80098e4:	4323      	orrs	r3, r4
 80098e6:	1b41      	subs	r1, r0, r5
 80098e8:	e772      	b.n	80097d0 <__ieee754_sqrt+0x58>
 80098ea:	4608      	mov	r0, r1
 80098ec:	e7f0      	b.n	80098d0 <__ieee754_sqrt+0x158>
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	3101      	adds	r1, #1
 80098f2:	e7ef      	b.n	80098d4 <__ieee754_sqrt+0x15c>
 80098f4:	46e0      	mov	r8, ip
 80098f6:	e7aa      	b.n	800984e <__ieee754_sqrt+0xd6>
 80098f8:	f7f6 fcc8 	bl	800028c <__adddf3>
 80098fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4640      	mov	r0, r8
 8009906:	4649      	mov	r1, r9
 8009908:	f7f7 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800990c:	b120      	cbz	r0, 8009918 <__ieee754_sqrt+0x1a0>
 800990e:	1ca0      	adds	r0, r4, #2
 8009910:	bf08      	it	eq
 8009912:	3501      	addeq	r5, #1
 8009914:	3402      	adds	r4, #2
 8009916:	e7ca      	b.n	80098ae <__ieee754_sqrt+0x136>
 8009918:	3401      	adds	r4, #1
 800991a:	f024 0401 	bic.w	r4, r4, #1
 800991e:	e7c6      	b.n	80098ae <__ieee754_sqrt+0x136>
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	20000258 	.word	0x20000258
 8009928:	20000260 	.word	0x20000260

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
